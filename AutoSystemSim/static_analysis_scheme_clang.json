{
  "functions": [
    {
      "function_id_key": "_Z19getCurrentTimestampB5cxx11v",
      "display_signature": "getCurrentTimestamp",
      "file": "common/logger.h",
      "line": 11,
      "end_line": 17,
      "execution_elements": []
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module19airDistModeToStringENS_19AirDistributionModeE",
      "display_signature": "ecu_body_control_module::airDistModeToString",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 10,
      "end_line": 20,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 11,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirDistributionMode::OFF",
              "line": 12,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirDistributionMode::FACE_VENTS",
              "line": 13,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirDistributionMode::FEET_VENTS",
              "line": 14,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirDistributionMode::FACE_AND_FEET",
              "line": 15,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirDistributionMode::WINDSHIELD_DEFROST",
              "line": 16,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirDistributionMode::WINDSHIELD_AND_FEET",
              "line": 17,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 18,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module16acStatusToStringENS_18ACCompressorStatusE",
      "display_signature": "ecu_body_control_module::acStatusToString",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 23,
      "end_line": 33,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 24,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ACCompressorStatus::OFF",
              "line": 25,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ACCompressorStatus::ON_REQUESTED",
              "line": 26,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ACCompressorStatus::ON_ACTIVE",
              "line": 27,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ACCompressorStatus::OFF_BY_POWER_MANAGEMENT",
              "line": 28,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ACCompressorStatus::OFF_BY_ENGINE_NOT_RUNNING",
              "line": 29,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ACCompressorStatus::FAULTY",
              "line": 30,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 31,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControlC1EPN20ecu_power_management12PowerMonitorE",
      "display_signature": "ecu_body_control_module::ClimateControl",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 35,
      "end_line": 53,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: Initializing. Target Temp: %.1fC, Fan: %d, AC User Req: %s, Auto: %s",
          "log_arguments": [
            "target_temperature_celsius_",
            "fan_speed_level_",
            "[complex_arg]",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"ClimateControl: Initializing. Target Temp: %.1fC, Fan: %d, AC User Req: %s, Auto: %s\", target_temperature_celsius_, fan_speed_level_, [complex_arg], [complex_arg]",
          "line": 48,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Initializing. Target Temp: %.1fC, Fan: %d, AC User Req: %s, Auto: %s\",              target_temperature_celsius_, fan_speed_level_, ac_requested_by_user_ ? \"ON\" : \"OFF\", auto_mode_enabled_ ? \"ON\" : \"OFF\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!power_monitor_",
          "line": 50,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "ClimateControl: PowerMonitor service is NULL. AC compressor management might be impaired.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: PowerMonitor service is NULL. AC compressor management might be impaired.\"",
              "line": 51,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ClimateControl: PowerMonitor service is NULL. AC compressor management might be impaired.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControlD1Ev",
      "display_signature": "ecu_body_control_module::~ClimateControl",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 55,
      "end_line": 58,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: Shutting down. Final Target Temp: %.1fC, AC Status: %s",
          "log_arguments": [
            "target_temperature_celsius_",
            "acStatusToString"
          ],
          "message_args_str_combined": "\"ClimateControl: Shutting down. Final Target Temp: %.1fC, AC Status: %s\", target_temperature_celsius_, acStatusToString",
          "line": 56,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Shutting down. Final Target Temp: %.1fC, AC Status: %s\",              target_temperature_celsius_, acStatusToString(ac_compressor_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl20setTargetTemperatureEd",
      "display_signature": "ecu_body_control_module::setTargetTemperature",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 60,
      "end_line": 74,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: Set target temperature to %.1fC (was %.1fC).",
          "log_arguments": [
            "celsius",
            "target_temperature_celsius_"
          ],
          "message_args_str_combined": "\"ClimateControl: Set target temperature to %.1fC (was %.1fC).\", celsius, target_temperature_celsius_",
          "line": 63,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Set target temperature to %.1fC (was %.1fC).\", celsius, target_temperature_celsius_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "fabs(target_temperature_celsius_ - celsius) < 0.1 && !auto_mode_enabled_",
          "line": 64,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: Target temperature already set to %.1fC or auto mode is off.",
              "log_arguments": [
                "celsius"
              ],
              "message_args_str_combined": "\"ClimateControl: Target temperature already set to %.1fC or auto mode is off.\", celsius",
              "line": 65,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Target temperature already set to %.1fC or auto mode is off.\", celsius)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "auto_mode_enabled_",
          "line": 69,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: Auto mode is ON. Temperature change may trigger recalculation of fan/distribution.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Auto mode is ON. Temperature change may trigger recalculation of fan/distribution.\"",
              "line": 70,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Auto mode is ON. Temperature change may trigger recalculation of fan/distribution.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl11setFanSpeedEi",
      "display_signature": "ecu_body_control_module::setFanSpeed",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 76,
      "end_line": 93,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: Set fan speed to level %d (was %d).",
          "log_arguments": [
            "level",
            "fan_speed_level_"
          ],
          "message_args_str_combined": "\"ClimateControl: Set fan speed to level %d (was %d).\", level, fan_speed_level_",
          "line": 78,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Set fan speed to level %d (was %d).\", level, fan_speed_level_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "fan_speed_level_ == level",
          "line": 79,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: Fan speed already at level %d.",
              "log_arguments": [
                "level"
              ],
              "message_args_str_combined": "\"ClimateControl: Fan speed already at level %d.\", level",
              "line": 80,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Fan speed already at level %d.\", level)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "level == 0",
          "line": 83,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: Fan turned OFF. This might also turn off AC compressor if it's not needed for defrost.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Fan turned OFF. This might also turn off AC compressor if it's not needed for defrost.\"",
              "line": 84,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Fan turned OFF. This might also turn off AC compressor if it's not needed for defrost.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "auto_mode_enabled_ && level != 0",
          "line": 88,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: Manual fan speed change. Disabling AUTO mode.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Manual fan speed change. Disabling AUTO mode.\"",
              "line": 89,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Manual fan speed change. Disabling AUTO mode.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl18setAirDistributionENS_19AirDistributionModeE",
      "display_signature": "ecu_body_control_module::setAirDistribution",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 95,
      "end_line": 111,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: Set air distribution to %s (was %s).",
          "log_arguments": [
            "airDistModeToString",
            "airDistModeToString"
          ],
          "message_args_str_combined": "\"ClimateControl: Set air distribution to %s (was %s).\", airDistModeToString, airDistModeToString",
          "line": 96,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Set air distribution to %s (was %s).\",              airDistModeToString(mode), airDistModeToString(current_air_distribution_))"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_air_distribution_ == mode",
          "line": 98,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: Air distribution already %s.",
              "log_arguments": [
                "airDistModeToString"
              ],
              "message_args_str_combined": "\"ClimateControl: Air distribution already %s.\", airDistModeToString",
              "line": 99,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Air distribution already %s.\", airDistModeToString(mode))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "auto_mode_enabled_ && mode != AirDistributionMode::OFF",
          "line": 102,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: Manual air distribution change. Disabling AUTO mode.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Manual air distribution change. Disabling AUTO mode.\"",
              "line": 103,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Manual air distribution change. Disabling AUTO mode.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "mode == AirDistributionMode::WINDSHIELD_DEFROST",
          "line": 106,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: Windshield defrost selected. AC might be activated for dehumidification.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Windshield defrost selected. AC might be activated for dehumidification.\"",
              "line": 107,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Windshield defrost selected. AC might be activated for dehumidification.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl11setACActiveEb",
      "display_signature": "ecu_body_control_module::setACActive",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 113,
      "end_line": 126,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: User request to set AC to %s (was %s).",
          "log_arguments": [
            "[complex_arg]",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"ClimateControl: User request to set AC to %s (was %s).\", [complex_arg], [complex_arg]",
          "line": 114,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: User request to set AC to %s (was %s).\",              active ? \"ON\" : \"OFF\", ac_requested_by_user_ ? \"ON\" : \"OFF\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "ac_requested_by_user_ == active",
          "line": 116,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: AC user request already %s.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"ClimateControl: AC user request already %s.\", [complex_arg]",
              "line": 117,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: AC user request already %s.\", active ? \"ON\" : \"OFF\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "auto_mode_enabled_ && !active",
          "line": 120,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: Manual AC OFF request. Disabling AUTO mode.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Manual AC OFF request. Disabling AUTO mode.\"",
              "line": 121,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Manual AC OFF request. Disabling AUTO mode.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl22setRecirculationActiveEb",
      "display_signature": "ecu_body_control_module::setRecirculationActive",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 128,
      "end_line": 141,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: Set air recirculation to %s (was %s).",
          "log_arguments": [
            "[complex_arg]",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"ClimateControl: Set air recirculation to %s (was %s).\", [complex_arg], [complex_arg]",
          "line": 129,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Set air recirculation to %s (was %s).\",              active ? \"ON\" : \"OFF\", recirculation_active_ ? \"ON\" : \"OFF\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "recirculation_active_ == active",
          "line": 131,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: Recirculation already %s.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"ClimateControl: Recirculation already %s.\", [complex_arg]",
              "line": 132,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Recirculation already %s.\", active ? \"ON\" : \"OFF\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_air_distribution_ == AirDistributionMode::WINDSHIELD_DEFROST && recirculation_active_",
          "line": 136,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "ClimateControl: Recirculation requested during WINDSHIELD_DEFROST. This is often overridden to FRESH AIR for safety/effectiveness.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Recirculation requested during WINDSHIELD_DEFROST. This is often overridden to FRESH AIR for safety/effectiveness.\"",
              "line": 137,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ClimateControl: Recirculation requested during WINDSHIELD_DEFROST. This is often overridden to FRESH AIR for safety/effectiveness.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl11setAutoModeEb",
      "display_signature": "ecu_body_control_module::setAutoMode",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 143,
      "end_line": 157,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: AUTO mode set to %s (was %s).",
          "log_arguments": [
            "[complex_arg]",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"ClimateControl: AUTO mode set to %s (was %s).\", [complex_arg], [complex_arg]",
          "line": 144,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AUTO mode set to %s (was %s).\",              enabled ? \"ENABLED\" : \"DISABLED\", auto_mode_enabled_ ? \"ENABLED\" : \"DISABLED\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "auto_mode_enabled_ == enabled",
          "line": 146,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: AUTO mode already %s.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"ClimateControl: AUTO mode already %s.\", [complex_arg]",
              "line": 147,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: AUTO mode already %s.\", enabled ? \"ENABLED\" : \"DISABLED\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "enabled",
          "line": 150,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: AUTO mode enabled. System will now manage fan, distribution, and AC.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: AUTO mode enabled. System will now manage fan, distribution, and AC.\"",
              "line": 151,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AUTO mode enabled. System will now manage fan, distribution, and AC.\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: AUTO mode disabled. System reverts to last manual settings.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: AUTO mode disabled. System reverts to last manual settings.\"",
              "line": 154,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AUTO mode disabled. System reverts to last manual settings.\")"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module14ClimateControl22getCurrentInteriorTempEv",
      "display_signature": "ecu_body_control_module::getCurrentInteriorTemp",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 159,
      "end_line": 162,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: getCurrentInteriorTemp() -> %.1fC",
          "log_arguments": [
            "current_interior_temperature_celsius_"
          ],
          "message_args_str_combined": "\"ClimateControl: getCurrentInteriorTemp() -> %.1fC\", current_interior_temperature_celsius_",
          "line": 160,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: getCurrentInteriorTemp() -> %.1fC\", current_interior_temperature_celsius_)"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module14ClimateControl20getTargetTemperatureEv",
      "display_signature": "ecu_body_control_module::getTargetTemperature",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 163,
      "end_line": 166,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: getTargetTemperature() -> %.1fC",
          "log_arguments": [
            "target_temperature_celsius_"
          ],
          "message_args_str_combined": "\"ClimateControl: getTargetTemperature() -> %.1fC\", target_temperature_celsius_",
          "line": 164,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: getTargetTemperature() -> %.1fC\", target_temperature_celsius_)"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module14ClimateControl11getFanSpeedEv",
      "display_signature": "ecu_body_control_module::getFanSpeed",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 167,
      "end_line": 170,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: getFanSpeed() -> Level %d",
          "log_arguments": [
            "fan_speed_level_"
          ],
          "message_args_str_combined": "\"ClimateControl: getFanSpeed() -> Level %d\", fan_speed_level_",
          "line": 168,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: getFanSpeed() -> Level %d\", fan_speed_level_)"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module14ClimateControl18getAirDistributionEv",
      "display_signature": "ecu_body_control_module::getAirDistribution",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 171,
      "end_line": 174,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: getAirDistribution() -> %s",
          "log_arguments": [
            "airDistModeToString"
          ],
          "message_args_str_combined": "\"ClimateControl: getAirDistribution() -> %s\", airDistModeToString",
          "line": 172,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: getAirDistribution() -> %s\", airDistModeToString(current_air_distribution_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module14ClimateControl10isACActiveEv",
      "display_signature": "ecu_body_control_module::isACActive",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 175,
      "end_line": 180,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: isACActive() (effective) -> %s (Compressor status: %s)",
          "log_arguments": [
            "[complex_arg]",
            "acStatusToString"
          ],
          "message_args_str_combined": "\"ClimateControl: isACActive() (effective) -> %s (Compressor status: %s)\", [complex_arg], acStatusToString",
          "line": 177,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: isACActive() (effective) -> %s (Compressor status: %s)\",               active ? \"YES\" : \"NO\", acStatusToString(ac_compressor_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module14ClimateControl21getACCompressorStatusEv",
      "display_signature": "ecu_body_control_module::getACCompressorStatus",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 181,
      "end_line": 184,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: getACCompressorStatus() -> %s",
          "log_arguments": [
            "acStatusToString"
          ],
          "message_args_str_combined": "\"ClimateControl: getACCompressorStatus() -> %s\", acStatusToString",
          "line": 182,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: getACCompressorStatus() -> %s\", acStatusToString(ac_compressor_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module14ClimateControl21isRecirculationActiveEv",
      "display_signature": "ecu_body_control_module::isRecirculationActive",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 185,
      "end_line": 188,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: isRecirculationActive() -> %s",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"ClimateControl: isRecirculationActive() -> %s\", [complex_arg]",
          "line": 186,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: isRecirculationActive() -> %s\", recirculation_active_ ? \"YES\" : \"NO\")"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module14ClimateControl17isAutoModeEnabledEv",
      "display_signature": "ecu_body_control_module::isAutoModeEnabled",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 189,
      "end_line": 192,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: isAutoModeEnabled() -> %s",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"ClimateControl: isAutoModeEnabled() -> %s\", [complex_arg]",
          "line": 190,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: isAutoModeEnabled() -> %s\", auto_mode_enabled_ ? \"YES\" : \"NO\")"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module14ClimateControl13canActivateACEbb",
      "display_signature": "ecu_body_control_module::canActivateAC",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 195,
      "end_line": 220,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "!engine_running",
          "line": 196,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: Cannot activate AC. Engine is not running.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Cannot activate AC. Engine is not running.\"",
              "line": 197,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Cannot activate AC. Engine is not running.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "high_engine_load_simulated",
          "line": 200,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: Cannot activate AC. High engine load detected (e.g. full throttle).",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Cannot activate AC. High engine load detected (e.g. full throttle).\"",
              "line": 201,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Cannot activate AC. High engine load detected (e.g. full throttle).\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "power_monitor_",
          "line": 205,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "!power_monitor_->isPowerStable()",
              "line": 206,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "ClimateControl: Power system unstable. AC activation deferred by PowerMonitor.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"ClimateControl: Power system unstable. AC activation deferred by PowerMonitor.\"",
                  "line": 207,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ClimateControl: Power system unstable. AC activation deferred by PowerMonitor.\")"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "power_monitor_->getBatteryVoltage() < 11.0",
              "line": 210,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "ClimateControl: Battery voltage (%.2fV) too low for AC compressor. Activation deferred.",
                  "log_arguments": [
                    "getBatteryVoltage"
                  ],
                  "message_args_str_combined": "\"ClimateControl: Battery voltage (%.2fV) too low for AC compressor. Activation deferred.\", getBatteryVoltage",
                  "line": 211,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ClimateControl: Battery voltage (%.2fV) too low for AC compressor. Activation deferred.\", power_monitor_->getBatteryVoltage())"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_exterior_temperature_celsius_ < 2.0",
          "line": 215,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: Exterior temperature (%.1fC) very low. AC compressor might not engage for cooling.",
              "log_arguments": [
                "current_exterior_temperature_celsius_"
              ],
              "message_args_str_combined": "\"ClimateControl: Exterior temperature (%.1fC) very low. AC compressor might not engage for cooling.\", current_exterior_temperature_celsius_",
              "line": 216,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Exterior temperature (%.1fC) very low. AC compressor might not engage for cooling.\", current_exterior_temperature_celsius_)"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl19controlACCompressorEbb",
      "display_signature": "ecu_body_control_module::controlACCompressor",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 222,
      "end_line": 277,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "fan_speed_level_ == 0 && current_air_distribution_ != AirDistributionMode::WINDSHIELD_DEFROST",
          "line": 226,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: Fan is OFF and not defrosting. AC compressor should be OFF.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Fan is OFF and not defrosting. AC compressor should be OFF.\"",
              "line": 228,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Fan is OFF and not defrosting. AC compressor should be OFF.\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: AC potentially needed. UserReq: %d, AutoCool: %d, Defrost: %d",
              "log_arguments": [
                "ac_requested_by_user_",
                "[complex_arg]",
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"ClimateControl: AC potentially needed. UserReq: %d, AutoCool: %d, Defrost: %d\", ac_requested_by_user_, [complex_arg], [complex_arg]",
              "line": 233,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: AC potentially needed. UserReq: %d, AutoCool: %d, Defrost: %d\",                   ac_requested_by_user_,                   (auto_mode_enabled_ && current_interior_temperature_celsius_ > target_temperature_celsius_ + 0.5),                   (current_air_distribution_ == AirDistributionMode::WINDSHIELD_DEFROST)                   )"
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "ac_should_be_on",
          "line": 242,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "canActivateAC(engine_running, high_engine_load_simulated)",
              "line": 243,
              "then_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "old_status != ACCompressorStatus::ON_ACTIVE",
                  "line": 246,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "ClimateControl: AC Compressor ACTIVATED.",
                      "log_arguments": [],
                      "message_args_str_combined": "\"ClimateControl: AC Compressor ACTIVATED.\"",
                      "line": 247,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AC Compressor ACTIVATED.\")"
                    },
                    {
                      "type": "IF_STMT",
                      "condition_expression_text": "power_monitor_",
                      "line": 248,
                      "then_branch_elements": [],
                      "else_branch_elements": []
                    }
                  ],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "old_status == ACCompressorStatus::ON_ACTIVE && power_monitor_",
                  "line": 254,
                  "then_branch_elements": [
                    {
                      "type": "CALL",
                      "callee_expression": "power_monitor_->simulateHighLoadEvent(false)",
                      "callee_name_at_call_site": "simulateHighLoadEvent",
                      "callee_resolved_key": "_ZN20ecu_power_management12PowerMonitor21simulateHighLoadEventEb",
                      "callee_resolved_display_name": "ecu_power_management::PowerMonitor::simulateHighLoadEvent",
                      "line": 255
                    }
                  ],
                  "else_branch_elements": []
                },
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "ClimateControl: AC Compressor activation DENIED. Reason: %s. Denial count: %d",
                  "log_arguments": [
                    "acStatusToString",
                    "ac_power_denial_counter_"
                  ],
                  "message_args_str_combined": "\"ClimateControl: AC Compressor activation DENIED. Reason: %s. Denial count: %d\", acStatusToString, ac_power_denial_counter_",
                  "line": 257,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ClimateControl: AC Compressor activation DENIED. Reason: %s. Denial count: %d\",                         acStatusToString(ac_compressor_status_), ac_power_denial_counter_)"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "ac_power_denial_counter_ > 5",
                  "line": 259,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "ERROR",
                      "log_format_string": "ClimateControl: AC compressor denied %d consecutive times. Potential underlying issue or prolonged condition.",
                      "log_arguments": [
                        "ac_power_denial_counter_"
                      ],
                      "message_args_str_combined": "\"ClimateControl: AC compressor denied %d consecutive times. Potential underlying issue or prolonged condition.\", ac_power_denial_counter_",
                      "line": 260,
                      "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"ClimateControl: AC compressor denied %d consecutive times. Potential underlying issue or prolonged condition.\", ac_power_denial_counter_)"
                    }
                  ],
                  "else_branch_elements": []
                }
              ]
            }
          ],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "ac_compressor_status_ == ACCompressorStatus::ON_ACTIVE",
              "line": 265,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "ClimateControl: AC Compressor DEACTIVATED (no longer needed).",
                  "log_arguments": [],
                  "message_args_str_combined": "\"ClimateControl: AC Compressor DEACTIVATED (no longer needed).\"",
                  "line": 266,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AC Compressor DEACTIVATED (no longer needed).\")"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "power_monitor_",
                  "line": 267,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "old_status != ac_compressor_status_",
          "line": 273,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: AC Compressor status changed from %s to %s.",
              "log_arguments": [
                "acStatusToString",
                "acStatusToString"
              ],
              "message_args_str_combined": "\"ClimateControl: AC Compressor status changed from %s to %s.\", acStatusToString, acStatusToString",
              "line": 274,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AC Compressor status changed from %s to %s.\",                  acStatusToString(old_status), acStatusToString(ac_compressor_status_))"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl23adjustFanForTemperatureEv",
      "display_signature": "ecu_body_control_module::adjustFanForTemperature",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 279,
      "end_line": 307,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "fabs(temp_diff) < 0.5",
          "line": 284,
          "then_branch_elements": [],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "fabs(temp_diff) < 4.0",
              "line": 288,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "temp_diff < -1.0 && current_exterior_temperature_celsius_ < 5.0",
          "line": 296,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: Auto fan: Cold exterior/interior, limiting fan speed to %d for heating comfort.",
              "log_arguments": [
                "new_fan_speed"
              ],
              "message_args_str_combined": "\"ClimateControl: Auto fan: Cold exterior/interior, limiting fan speed to %d for heating comfort.\", new_fan_speed",
              "line": 298,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Auto fan: Cold exterior/interior, limiting fan speed to %d for heating comfort.\", new_fan_speed)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "new_fan_speed != fan_speed_level_",
          "line": 302,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: AUTO Fan Speed: Adjusting from %d to %d due to temp diff %.1fC.",
              "log_arguments": [
                "fan_speed_level_",
                "new_fan_speed",
                "temp_diff"
              ],
              "message_args_str_combined": "\"ClimateControl: AUTO Fan Speed: Adjusting from %d to %d due to temp diff %.1fC.\", fan_speed_level_, new_fan_speed, temp_diff",
              "line": 303,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AUTO Fan Speed: Adjusting from %d to %d due to temp diff %.1fC.\",                  fan_speed_level_, new_fan_speed, temp_diff)"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl28adjustAirDistributionForModeEv",
      "display_signature": "ecu_body_control_module::adjustAirDistributionForMode",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 309,
      "end_line": 328,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_exterior_temperature_celsius_ < 3.0 && target_temperature_celsius_ > 18.0",
          "line": 313,
          "then_branch_elements": [],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "temp_diff < -1.0",
              "line": 317,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "new_dist_mode != current_air_distribution_",
          "line": 323,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: AUTO Air Distribution: Changing from %s to %s.",
              "log_arguments": [
                "airDistModeToString",
                "airDistModeToString"
              ],
              "message_args_str_combined": "\"ClimateControl: AUTO Air Distribution: Changing from %s to %s.\", airDistModeToString, airDistModeToString",
              "line": 324,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AUTO Air Distribution: Changing from %s to %s.\",                  airDistModeToString(current_air_distribution_), airDistModeToString(new_dist_mode))"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl24manageAutomaticOperationEv",
      "display_signature": "ecu_body_control_module::manageAutomaticOperation",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 330,
      "end_line": 361,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "!auto_mode_enabled_",
          "line": 331,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: Managing automatic climate operation. Target: %.1fC, Interior: %.1fC, Exterior: %.1fC.",
          "log_arguments": [
            "target_temperature_celsius_",
            "current_interior_temperature_celsius_",
            "current_exterior_temperature_celsius_"
          ],
          "message_args_str_combined": "\"ClimateControl: Managing automatic climate operation. Target: %.1fC, Interior: %.1fC, Exterior: %.1fC.\", target_temperature_celsius_, current_interior_temperature_celsius_, current_exterior_temperature_celsius_",
          "line": 333,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Managing automatic climate operation. Target: %.1fC, Interior: %.1fC, Exterior: %.1fC.\",              target_temperature_celsius_, current_interior_temperature_celsius_, current_exterior_temperature_celsius_)"
        },
        {
          "type": "CALL",
          "callee_expression": "adjustFanForTemperature()",
          "callee_name_at_call_site": "adjustFanForTemperature",
          "callee_resolved_key": "_ZN23ecu_body_control_module14ClimateControl23adjustFanForTemperatureEv",
          "callee_resolved_display_name": "ecu_body_control_module::adjustFanForTemperature",
          "line": 336
        },
        {
          "type": "CALL",
          "callee_expression": "adjustAirDistributionForMode()",
          "callee_name_at_call_site": "adjustAirDistributionForMode",
          "callee_resolved_key": "_ZN23ecu_body_control_module14ClimateControl28adjustAirDistributionForModeEv",
          "callee_resolved_display_name": "ecu_body_control_module::adjustAirDistributionForMode",
          "line": 337
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "(current_interior_temperature_celsius_ > target_temperature_celsius_ + 0.5) ||         current_air_distribution_ == AirDistributionMode::WINDSHIELD_DEFROST ||         (current_exterior_temperature_celsius_ > 15.0 && current_interior_temperature_celsius_ > 15.0 && recirculation_active_)",
          "line": 340,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "!ac_requested_by_user_",
              "line": 343,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "ClimateControl: AUTO mode requesting AC ON.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"ClimateControl: AUTO mode requesting AC ON.\"",
                  "line": 344,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AUTO mode requesting AC ON.\")"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "ac_requested_by_user_",
              "line": 350,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "ClimateControl: AUTO mode requesting AC OFF (heating phase).",
                  "log_arguments": [],
                  "message_args_str_combined": "\"ClimateControl: AUTO mode requesting AC OFF (heating phase).\"",
                  "line": 351,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AUTO mode requesting AC OFF (heating phase).\")"
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "fan_speed_level_ == 0",
          "line": 356,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ClimateControl: AUTO mode set fan to 0. System effectively OFF.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: AUTO mode set fan to 0. System effectively OFF.\"",
              "line": 359,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: AUTO mode set fan to 0. System effectively OFF.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl25simulateTemperatureChangeEv",
      "display_signature": "ecu_body_control_module::simulateTemperatureChange",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 363,
      "end_line": 405,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "fan_speed_level_ > 0",
          "line": 371,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "ac_compressor_status_ == ACCompressorStatus::ON_ACTIVE && current_interior_temperature_celsius_ > target_temperature_celsius_",
              "line": 372,
              "then_branch_elements": [
                {
                  "type": "DO_WHILE_LOOP",
                  "line": 374,
                  "body_elements": []
                }
              ],
              "else_branch_elements": [
                {
                  "type": "DO_WHILE_LOOP",
                  "line": 378,
                  "body_elements": []
                }
              ]
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_interior_temperature_celsius_ > natural_drift_target",
          "line": 385,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: Interior temperature simulated to %.1fC. (Rate: %.2f, Ext: %.1fC)",
          "log_arguments": [
            "current_interior_temperature_celsius_",
            "rate_of_change",
            "current_exterior_temperature_celsius_"
          ],
          "message_args_str_combined": "\"ClimateControl: Interior temperature simulated to %.1fC. (Rate: %.2f, Ext: %.1fC)\", current_interior_temperature_celsius_, rate_of_change, current_exterior_temperature_celsius_",
          "line": 403,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Interior temperature simulated to %.1fC. (Rate: %.2f, Ext: %.1fC)\",               current_interior_temperature_celsius_, rate_of_change, current_exterior_temperature_celsius_)"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module14ClimateControl18updateClimateStateERK12VehicleStateRK10SensorDataS6_",
      "display_signature": "ecu_body_control_module::updateClimateState",
      "file": "ecu_body_control_module/calimate_control.cpp",
      "line": 408,
      "end_line": 459,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ClimateControl: Updating climate state. AutoMode: %s, Target: %.1fC, Fan: %d, AC Req: %s",
          "log_arguments": [
            "[complex_arg]",
            "target_temperature_celsius_",
            "fan_speed_level_",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"ClimateControl: Updating climate state. AutoMode: %s, Target: %.1fC, Fan: %d, AC Req: %s\", [complex_arg], target_temperature_celsius_, fan_speed_level_, [complex_arg]",
          "line": 411,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Updating climate state. AutoMode: %s, Target: %.1fC, Fan: %d, AC Req: %s\",               auto_mode_enabled_ ? \"ON\" : \"OFF\", target_temperature_celsius_, fan_speed_level_, ac_requested_by_user_ ? \"ON\" : \"OFF\")"
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 417,
          "body_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "high_engine_load",
          "line": 426,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "auto_mode_enabled_",
          "line": 429,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "manageAutomaticOperation()",
              "callee_name_at_call_site": "manageAutomaticOperation",
              "callee_resolved_key": "_ZN23ecu_body_control_module14ClimateControl24manageAutomaticOperationEv",
              "callee_resolved_display_name": "ecu_body_control_module::manageAutomaticOperation",
              "line": 430
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "callee_expression": "controlACCompressor(engine_is_running, high_engine_load)",
          "callee_name_at_call_site": "controlACCompressor",
          "callee_resolved_key": "_ZN23ecu_body_control_module14ClimateControl19controlACCompressorEbb",
          "callee_resolved_display_name": "ecu_body_control_module::controlACCompressor",
          "line": 434
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "fan_speed_level_ > 0 || ac_compressor_status_ == ACCompressorStatus::ON_ACTIVE",
          "line": 439,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "simulateTemperatureChange()",
              "callee_name_at_call_site": "simulateTemperatureChange",
              "callee_resolved_key": "_ZN23ecu_body_control_module14ClimateControl25simulateTemperatureChangeEv",
              "callee_resolved_display_name": "ecu_body_control_module::simulateTemperatureChange",
              "line": 440
            }
          ],
          "else_branch_elements": [
            {
              "type": "DO_WHILE_LOOP",
              "line": 445,
              "body_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "fan_speed_level_ == 0 && current_air_distribution_ != AirDistributionMode::OFF",
          "line": 450,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ClimateControl: Fan is off, ensuring air distribution is also OFF.",
              "log_arguments": [],
              "message_args_str_combined": "\"ClimateControl: Fan is off, ensuring air distribution is also OFF.\"",
              "line": 451,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ClimateControl: Fan is off, ensuring air distribution is also OFF.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ClimateControl: Update cycle complete. Interior: %.1fC, Fan: %d, AC: %s, Dist: %s",
          "log_arguments": [
            "current_interior_temperature_celsius_",
            "fan_speed_level_",
            "acStatusToString",
            "airDistModeToString"
          ],
          "message_args_str_combined": "\"ClimateControl: Update cycle complete. Interior: %.1fC, Fan: %d, AC: %s, Dist: %s\", current_interior_temperature_celsius_, fan_speed_level_, acStatusToString, airDistModeToString",
          "line": 456,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ClimateControl: Update cycle complete. Interior: %.1fC, Fan: %d, AC: %s, Dist: %s\",              current_interior_temperature_celsius_, fan_speed_level_,              acStatusToString(ac_compressor_status_), airDistModeToString(current_air_distribution_))"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControlC1EPN20ecu_power_management12PowerMonitorE",
      "display_signature": "ecu_body_control_module::LightingControl",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 9,
      "end_line": 36,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: Initializing...",
          "log_arguments": [],
          "message_args_str_combined": "\"LightingControl: Initializing...\"",
          "line": 15,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Initializing...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!power_monitor_",
          "line": 16,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "LightingControl: PowerMonitor service is NULL! Lighting functions may be impaired.",
              "log_arguments": [],
              "message_args_str_combined": "\"LightingControl: PowerMonitor service is NULL! Lighting functions may be impaired.\"",
              "line": 17,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"LightingControl: PowerMonitor service is NULL! Lighting functions may be impaired.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: Initialization complete. %zu light types registered.",
          "log_arguments": [
            "size"
          ],
          "message_args_str_combined": "\"LightingControl: Initialization complete. %zu light types registered.\", size",
          "line": 34,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Initialization complete. %zu light types registered.\", all_lights_.size())"
        },
        {
          "type": "CALL",
          "callee_expression": "performBulbCheck()",
          "callee_name_at_call_site": "performBulbCheck",
          "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16performBulbCheckEv",
          "callee_resolved_display_name": "ecu_body_control_module::LightingControl::performBulbCheck",
          "line": 35
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControlD1Ev",
      "display_signature": "ecu_body_control_module::~LightingControl",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 38,
      "end_line": 40,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: Shutting down.",
          "log_arguments": [],
          "message_args_str_combined": "\"LightingControl: Shutting down.\"",
          "line": 39,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Shutting down.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControl8findBulbENS_9LightTypeE",
      "display_signature": "ecu_body_control_module::findBulb",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 42,
      "end_line": 50,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "it != all_lights_.end()",
          "line": 45,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "LightingControl: findBulb: LightType %d not found.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"LightingControl: findBulb: LightType %d not found.\", [complex_arg]",
          "line": 48,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: findBulb: LightType %d not found.\", static_cast<int>(type))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module15LightingControl8findBulbENS_9LightTypeE",
      "display_signature": "ecu_body_control_module::findBulb",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 52,
      "end_line": 61,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "it != all_lights_.end()",
          "line": 56,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "LightingControl: findBulb (const): LightType %d not found.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"LightingControl: findBulb (const): LightType %d not found.\", [complex_arg]",
          "line": 59,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: findBulb (const): LightType %d not found.\", static_cast<int>(type))"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
      "display_signature": "ecu_body_control_module::setSpecificLight",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 64,
      "end_line": 114,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "!bulb",
          "line": 66,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "LightingControl: Cannot set state for unknown LightType %d.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"LightingControl: Cannot set state for unknown LightType %d.\", [complex_arg]",
              "line": 67,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"LightingControl: Cannot set state for unknown LightType %d.\", static_cast<int>(type))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "bulb->status == LightStatus::FAULTY_BULB || bulb->status == LightStatus::FAULTY_CIRCUIT",
          "line": 71,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "LightingControl: Cannot turn %s LightType %d. It's faulty (Status: %d).",
              "log_arguments": [
                "[complex_arg]",
                "[complex_arg]",
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"LightingControl: Cannot turn %s LightType %d. It's faulty (Status: %d).\", [complex_arg], [complex_arg], [complex_arg]",
              "line": 72,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: Cannot turn %s LightType %d. It's faulty (Status: %d).\",                     on ? \"ON\" : \"OFF\", static_cast<int>(type), static_cast<int>(bulb->status))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "bulb->status == new_status",
          "line": 78,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "LightingControl: LightType %d already %s.",
              "log_arguments": [
                "[complex_arg]",
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"LightingControl: LightType %d already %s.\", [complex_arg], [complex_arg]",
              "line": 79,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"LightingControl: LightType %d already %s.\", static_cast<int>(type), on ? \"ON\" : \"OFF\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "on && (type == LightType::HEADLIGHT_LOW || type == LightType::HEADLIGHT_HIGH || type == LightType::FOG_LIGHT_FRONT)",
          "line": 84,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "power_monitor_ && !power_monitor_->isPowerStable()",
              "line": 85,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "LightingControl: Power system unstable. Deferring turning ON LightType %d.",
                  "log_arguments": [
                    "[complex_arg]"
                  ],
                  "message_args_str_combined": "\"LightingControl: Power system unstable. Deferring turning ON LightType %d.\", [complex_arg]",
                  "line": 86,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: Power system unstable. Deferring turning ON LightType %d.\", static_cast<int>(type))"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "power_monitor_->getBatteryVoltage() < 10.0",
                  "line": 88,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "ERROR",
                      "log_format_string": "LightingControl: CRITICAL: Battery too low (%.2fV) to activate LightType %d.",
                      "log_arguments": [
                        "getBatteryVoltage",
                        "[complex_arg]"
                      ],
                      "message_args_str_combined": "\"LightingControl: CRITICAL: Battery too low (%.2fV) to activate LightType %d.\", getBatteryVoltage, [complex_arg]",
                      "line": 89,
                      "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"LightingControl: CRITICAL: Battery too low (%.2fV) to activate LightType %d.\", power_monitor_->getBatteryVoltage(), static_cast<int>(type))"
                    }
                  ],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: LightType %d turned %s.",
          "log_arguments": [
            "[complex_arg]",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"LightingControl: LightType %d turned %s.\", [complex_arg], [complex_arg]",
          "line": 96,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: LightType %d turned %s.\", static_cast<int>(type), on ? \"ON\" : \"OFF\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "type == LightType::HEADLIGHT_HIGH && on",
          "line": 99,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "low_beam && low_beam->status == LightStatus::OFF",
              "line": 101,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "DEBUG",
                  "log_format_string": "LightingControl: High beams activated, ensuring low beams are also ON.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"LightingControl: High beams activated, ensuring low beams are also ON.\"",
                  "line": 102,
                  "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"LightingControl: High beams activated, ensuring low beams are also ON.\")"
                },
                {
                  "type": "CALL",
                  "callee_expression": "setSpecificLight(LightType::HEADLIGHT_LOW, true)",
                  "callee_name_at_call_site": "setSpecificLight",
                  "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
                  "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
                  "line": 103
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "type == LightType::HEADLIGHT_LOW && !on",
          "line": 107,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "high_beam && high_beam->status == LightStatus::ON",
              "line": 109,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "LightingControl: Low beams turned OFF while high beams were ON. Turning OFF high beams for safety.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"LightingControl: Low beams turned OFF while high beams were ON. Turning OFF high beams for safety.\"",
                  "line": 110,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Low beams turned OFF while high beams were ON. Turning OFF high beams for safety.\")"
                },
                {
                  "type": "CALL",
                  "callee_expression": "setSpecificLight(LightType::HEADLIGHT_HIGH, false)",
                  "callee_name_at_call_site": "setSpecificLight",
                  "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
                  "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
                  "line": 111
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControl13setLightStateENS_9LightTypeEb",
      "display_signature": "ecu_body_control_module::setLightState",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 117,
      "end_line": 143,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "LightingControl: Request to set LightType %d to %s.",
          "log_arguments": [
            "[complex_arg]",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"LightingControl: Request to set LightType %d to %s.\", [complex_arg], [complex_arg]",
          "line": 118,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"LightingControl: Request to set LightType %d to %s.\", static_cast<int>(type), on ? \"ON\" : \"OFF\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "is_hazard_active_ && (type == LightType::INDICATOR_LEFT || type == LightType::INDICATOR_RIGHT)",
          "line": 121,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "LightingControl: Hazard lights are active. Ignoring individual indicator request for LightType %d.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"LightingControl: Hazard lights are active. Ignoring individual indicator request for LightType %d.\", [complex_arg]",
              "line": 122,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Hazard lights are active. Ignoring individual indicator request for LightType %d.\", static_cast<int>(type))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "type == LightType::INDICATOR_LEFT && on",
          "line": 127,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "is_right_indicator_active_",
              "line": 128,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "is_left_indicator_active_",
              "line": 132,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "(type == LightType::INDICATOR_LEFT || type == LightType::INDICATOR_RIGHT) && !on",
              "line": 135,
              "then_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "type == LightType::INDICATOR_LEFT && is_left_indicator_active_",
                  "line": 137,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "type == LightType::INDICATOR_RIGHT && is_right_indicator_active_",
                  "line": 138,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "CALL",
          "callee_expression": "setSpecificLight(type, on)",
          "callee_name_at_call_site": "setSpecificLight",
          "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
          "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
          "line": 141
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControl20activateHazardLightsEb",
      "display_signature": "ecu_body_control_module::activateHazardLights",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 145,
      "end_line": 174,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: Hazard lights requested to %s.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"LightingControl: Hazard lights requested to %s.\", [complex_arg]",
          "line": 146,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Hazard lights requested to %s.\", activate ? \"ACTIVATE\" : \"DEACTIVATE\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "is_hazard_active_ == activate",
          "line": 147,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "LightingControl: Hazard lights already in requested state (%s).",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"LightingControl: Hazard lights already in requested state (%s).\", [complex_arg]",
              "line": 148,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"LightingControl: Hazard lights already in requested state (%s).\", activate ? \"ACTIVE\" : \"INACTIVE\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "activate",
          "line": 153,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "is_left_indicator_active_",
              "line": 155,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "setSpecificLight(LightType::INDICATOR_LEFT, false)",
                  "callee_name_at_call_site": "setSpecificLight",
                  "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
                  "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
                  "line": 156
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "is_right_indicator_active_",
              "line": 159,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "setSpecificLight(LightType::INDICATOR_RIGHT, false)",
                  "callee_name_at_call_site": "setSpecificLight",
                  "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
                  "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
                  "line": 160
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "LightingControl: Activating hazard sequence (both indicators ON).",
              "log_arguments": [],
              "message_args_str_combined": "\"LightingControl: Activating hazard sequence (both indicators ON).\"",
              "line": 164,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Activating hazard sequence (both indicators ON).\")"
            },
            {
              "type": "CALL",
              "callee_expression": "setSpecificLight(LightType::INDICATOR_LEFT, true)",
              "callee_name_at_call_site": "setSpecificLight",
              "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
              "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
              "line": 165
            },
            {
              "type": "CALL",
              "callee_expression": "setSpecificLight(LightType::INDICATOR_RIGHT, true)",
              "callee_name_at_call_site": "setSpecificLight",
              "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
              "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
              "line": 166
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "LightingControl: Deactivating hazard sequence (both indicators OFF).",
              "log_arguments": [],
              "message_args_str_combined": "\"LightingControl: Deactivating hazard sequence (both indicators OFF).\"",
              "line": 169,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Deactivating hazard sequence (both indicators OFF).\")"
            },
            {
              "type": "CALL",
              "callee_expression": "setSpecificLight(LightType::INDICATOR_LEFT, false)",
              "callee_name_at_call_site": "setSpecificLight",
              "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
              "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
              "line": 170
            },
            {
              "type": "CALL",
              "callee_expression": "setSpecificLight(LightType::INDICATOR_RIGHT, false)",
              "callee_name_at_call_site": "setSpecificLight",
              "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
              "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
              "line": 171
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControl17activateIndicatorENS_9LightTypeEb",
      "display_signature": "ecu_body_control_module::activateIndicator",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 176,
      "end_line": 192,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "indicator_type != LightType::INDICATOR_LEFT && indicator_type != LightType::INDICATOR_RIGHT",
          "line": 177,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "LightingControl: Invalid LightType %d for indicator.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"LightingControl: Invalid LightType %d for indicator.\", [complex_arg]",
              "line": 178,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"LightingControl: Invalid LightType %d for indicator.\", static_cast<int>(indicator_type))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: Indicator %s requested to %s.",
          "log_arguments": [
            "[complex_arg]",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"LightingControl: Indicator %s requested to %s.\", [complex_arg], [complex_arg]",
          "line": 181,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Indicator %s requested to %s.\",              (indicator_type == LightType::INDICATOR_LEFT ? \"LEFT\" : \"RIGHT\"),              activate ? \"ACTIVATE\" : \"DEACTIVATE\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "is_hazard_active_",
          "line": 185,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "LightingControl: Hazard lights are active. Cannot set individual indicator %s.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"LightingControl: Hazard lights are active. Cannot set individual indicator %s.\", [complex_arg]",
              "line": 186,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: Hazard lights are active. Cannot set individual indicator %s.\",                     (indicator_type == LightType::INDICATOR_LEFT ? \"LEFT\" : \"RIGHT\"))"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module15LightingControl14getLightStatusENS_9LightTypeE",
      "display_signature": "ecu_body_control_module::getLightStatus",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 195,
      "end_line": 203,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "bulb",
          "line": 197,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "LightingControl: Status for LightType %d is %d.",
              "log_arguments": [
                "[complex_arg]",
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"LightingControl: Status for LightType %d is %d.\", [complex_arg], [complex_arg]",
              "line": 198,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"LightingControl: Status for LightType %d is %d.\", static_cast<int>(type), static_cast<int>(bulb->status))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "LightingControl: getLightStatus: Could not find LightType %d. Reporting OFF.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"LightingControl: getLightStatus: Could not find LightType %d. Reporting OFF.\", [complex_arg]",
          "line": 201,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: getLightStatus: Could not find LightType %d. Reporting OFF.\", static_cast<int>(type))"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControl16performBulbCheckEv",
      "display_signature": "ecu_body_control_module::performBulbCheck",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 205,
      "end_line": 242,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: Performing diagnostic bulb check sequence...",
          "log_arguments": [],
          "message_args_str_combined": "\"LightingControl: Performing diagnostic bulb check sequence...\"",
          "line": 206,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Performing diagnostic bulb check sequence...\")"
        },
        {
          "type": "FOR_RANGE_LOOP",
          "line": 211,
          "body_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "bulb.status == LightStatus::FAULTY_BULB || bulb.status == LightStatus::FAULTY_CIRCUIT",
              "line": 213,
              "then_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "distrib(gen) > 90",
                  "line": 214,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "WARNING",
                      "log_format_string": "LightingControl: Re-confirming fault for LightType %d. Status: %d, Code: %d",
                      "log_arguments": [
                        "[complex_arg]",
                        "[complex_arg]",
                        "fault_code"
                      ],
                      "message_args_str_combined": "\"LightingControl: Re-confirming fault for LightType %d. Status: %d, Code: %d\", [complex_arg], [complex_arg], fault_code",
                      "line": 215,
                      "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: Re-confirming fault for LightType %d. Status: %d, Code: %d\",                     static_cast<int>(bulb.type), static_cast<int>(bulb.status), bulb.fault_code)"
                    }
                  ],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "chance <= 2",
              "line": 222,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "LightingControl: BULB FAULT DETECTED for LightType %d! Code: %d",
                  "log_arguments": [
                    "[complex_arg]",
                    "fault_code"
                  ],
                  "message_args_str_combined": "\"LightingControl: BULB FAULT DETECTED for LightType %d! Code: %d\", [complex_arg], fault_code",
                  "line": 225,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"LightingControl: BULB FAULT DETECTED for LightType %d! Code: %d\",                       static_cast<int>(bulb.type), bulb.fault_code)"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "LightingControl: CIRCUIT FAULT DETECTED for LightType %d! Code: %d",
                  "log_arguments": [
                    "[complex_arg]",
                    "fault_code"
                  ],
                  "message_args_str_combined": "\"LightingControl: CIRCUIT FAULT DETECTED for LightType %d! Code: %d\", [complex_arg], fault_code",
                  "line": 230,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"LightingControl: CIRCUIT FAULT DETECTED for LightType %d! Code: %d\",                       static_cast<int>(bulb.type), bulb.fault_code)"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "bulb.status == LightStatus::OFF",
                  "line": 234,
                  "then_branch_elements": [
                    {
                      "type": "DO_WHILE_LOOP",
                      "line": 235,
                      "body_elements": []
                    }
                  ],
                  "else_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "DEBUG",
                      "log_format_string": "LightingControl: Bulb check OK for LightType %d (currently ON).",
                      "log_arguments": [
                        "[complex_arg]"
                      ],
                      "message_args_str_combined": "\"LightingControl: Bulb check OK for LightType %d (currently ON).\", [complex_arg]",
                      "line": 237,
                      "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"LightingControl: Bulb check OK for LightType %d (currently ON).\", static_cast<int>(bulb.type))"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: Bulb check sequence complete.",
          "log_arguments": [],
          "message_args_str_combined": "\"LightingControl: Bulb check sequence complete.\"",
          "line": 241,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Bulb check sequence complete.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControl25handleAutomaticHeadlightsERK12VehicleStateb",
      "display_signature": "ecu_body_control_module::handleAutomaticHeadlights",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 244,
      "end_line": 270,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "LightingControl: Evaluating automatic headlights. Speed: %.1f km/h, Power Stable: %s",
          "log_arguments": [
            "speed_kmh",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"LightingControl: Evaluating automatic headlights. Speed: %.1f km/h, Power Stable: %s\", speed_kmh, [complex_arg]",
          "line": 247,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"LightingControl: Evaluating automatic headlights. Speed: %.1f km/h, Power Stable: %s\",               vehicle_state.speed_kmh, power_stable ? \"true\" : \"false\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!low_beam || low_beam->status == LightStatus::FAULTY_BULB || low_beam->status == LightStatus::FAULTY_CIRCUIT",
          "line": 251,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "LightingControl: Auto Headlights: Low beam bulb faulty or not found. Cannot operate automatically.",
              "log_arguments": [],
              "message_args_str_combined": "\"LightingControl: Auto Headlights: Low beam bulb faulty or not found. Cannot operate automatically.\"",
              "line": 252,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: Auto Headlights: Low beam bulb faulty or not found. Cannot operate automatically.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "should_be_on && low_beam->status == LightStatus::OFF",
          "line": 259,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "LightingControl: Automatic Headlights: Turning ON low beams. Speed: %.1f km/h.",
              "log_arguments": [
                "speed_kmh"
              ],
              "message_args_str_combined": "\"LightingControl: Automatic Headlights: Turning ON low beams. Speed: %.1f km/h.\", speed_kmh",
              "line": 260,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Automatic Headlights: Turning ON low beams. Speed: %.1f km/h.\", vehicle_state.speed_kmh)"
            },
            {
              "type": "CALL",
              "callee_expression": "setSpecificLight(LightType::HEADLIGHT_LOW, true)",
              "callee_name_at_call_site": "setSpecificLight",
              "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
              "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
              "line": 261
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "LightingControl: Automatic Headlights: Turning OFF low beams. Speed: %.1f km/h or power unstable.",
              "log_arguments": [
                "speed_kmh"
              ],
              "message_args_str_combined": "\"LightingControl: Automatic Headlights: Turning OFF low beams. Speed: %.1f km/h or power unstable.\", speed_kmh",
              "line": 265,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Automatic Headlights: Turning OFF low beams. Speed: %.1f km/h or power unstable.\", vehicle_state.speed_kmh)"
            },
            {
              "type": "CALL",
              "callee_expression": "setSpecificLight(LightType::HEADLIGHT_LOW, false)",
              "callee_name_at_call_site": "setSpecificLight",
              "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
              "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
              "line": 266
            },
            {
              "type": "DO_WHILE_LOOP",
              "line": 268,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControl16checkBrakeLightsERK12VehicleState",
      "display_signature": "ecu_body_control_module::checkBrakeLights",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 272,
      "end_line": 307,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "LightingControl: Checking brake light status based on vehicle state.",
          "log_arguments": [],
          "message_args_str_combined": "\"LightingControl: Checking brake light status based on vehicle state.\"",
          "line": 279,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"LightingControl: Checking brake light status based on vehicle state.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "(last_speed - vehicle_state.speed_kmh) > 5.0",
          "line": 287,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "LightingControl: Significant deceleration detected (%.1f -> %.1f km/h). Activating brake lights.",
              "log_arguments": [
                "last_speed",
                "speed_kmh"
              ],
              "message_args_str_combined": "\"LightingControl: Significant deceleration detected (%.1f -> %.1f km/h). Activating brake lights.\", last_speed, speed_kmh",
              "line": 288,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Significant deceleration detected (%.1f -> %.1f km/h). Activating brake lights.\", last_speed, vehicle_state.speed_kmh)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "activate_brake_lights",
          "line": 293,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "getLightStatus(LightType::BRAKE_LIGHT) == LightStatus::OFF",
              "line": 294,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "LightingControl: Activating brake lights.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"LightingControl: Activating brake lights.\"",
                  "line": 295,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Activating brake lights.\")"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "CALL",
              "callee_expression": "setSpecificLight(LightType::BRAKE_LIGHT, true)",
              "callee_name_at_call_site": "setSpecificLight",
              "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
              "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
              "line": 297
            }
          ],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "getLightStatus(LightType::BRAKE_LIGHT) == LightStatus::ON",
              "line": 302,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "LightingControl: Deactivating brake lights (no braking condition detected).",
                  "log_arguments": [],
                  "message_args_str_combined": "\"LightingControl: Deactivating brake lights (no braking condition detected).\"",
                  "line": 303,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Deactivating brake lights (no braking condition detected).\")"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "CALL",
              "callee_expression": "setSpecificLight(LightType::BRAKE_LIGHT, false)",
              "callee_name_at_call_site": "setSpecificLight",
              "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16setSpecificLightENS_9LightTypeEb",
              "callee_resolved_display_name": "ecu_body_control_module::setSpecificLight",
              "line": 305
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module15LightingControl14updateLightingERK12VehicleState",
      "display_signature": "ecu_body_control_module::updateLighting",
      "file": "ecu_body_control_module/lighting_control.cpp",
      "line": 310,
      "end_line": 351,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: Updating lighting based on vehicle state. Speed: %.1f km/h, RPM: %d",
          "log_arguments": [
            "speed_kmh",
            "engine_rpm"
          ],
          "message_args_str_combined": "\"LightingControl: Updating lighting based on vehicle state. Speed: %.1f km/h, RPM: %d\", speed_kmh, engine_rpm",
          "line": 311,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Updating lighting based on vehicle state. Speed: %.1f km/h, RPM: %d\",              current_vehicle_state.speed_kmh, current_vehicle_state.engine_rpm)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "power_monitor_",
          "line": 315,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "!power_is_stable",
              "line": 317,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "LightingControl: Power system is UNSTABLE. Some lighting functions might be limited.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"LightingControl: Power system is UNSTABLE. Some lighting functions might be limited.\"",
                  "line": 318,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: Power system is UNSTABLE. Some lighting functions might be limited.\")"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "interior && interior->status == LightStatus::ON",
                  "line": 321,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "LightingControl: Dimming interior light due to unstable power (simulated).",
                      "log_arguments": [],
                      "message_args_str_combined": "\"LightingControl: Dimming interior light due to unstable power (simulated).\"",
                      "line": 322,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Dimming interior light due to unstable power (simulated).\")"
                    }
                  ],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "LightingControl: updateLighting: PowerMonitor not available. Assuming power is stable.",
              "log_arguments": [],
              "message_args_str_combined": "\"LightingControl: updateLighting: PowerMonitor not available. Assuming power is stable.\"",
              "line": 327,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"LightingControl: updateLighting: PowerMonitor not available. Assuming power is stable.\")"
            }
          ]
        },
        {
          "type": "CALL",
          "callee_expression": "handleAutomaticHeadlights(current_vehicle_state, power_is_stable)",
          "callee_name_at_call_site": "handleAutomaticHeadlights",
          "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl25handleAutomaticHeadlightsERK12VehicleStateb",
          "callee_resolved_display_name": "ecu_body_control_module::handleAutomaticHeadlights",
          "line": 333
        },
        {
          "type": "CALL",
          "callee_expression": "checkBrakeLights(current_vehicle_state)",
          "callee_name_at_call_site": "checkBrakeLights",
          "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16checkBrakeLightsERK12VehicleState",
          "callee_resolved_display_name": "ecu_body_control_module::checkBrakeLights",
          "line": 337
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "++update_counter % 10 == 0",
          "line": 345,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "LightingControl: Periodic bulb check triggered during update cycle.",
              "log_arguments": [],
              "message_args_str_combined": "\"LightingControl: Periodic bulb check triggered during update cycle.\"",
              "line": 346,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"LightingControl: Periodic bulb check triggered during update cycle.\")"
            },
            {
              "type": "CALL",
              "callee_expression": "performBulbCheck()",
              "callee_name_at_call_site": "performBulbCheck",
              "callee_resolved_key": "_ZN23ecu_body_control_module15LightingControl16performBulbCheckEv",
              "callee_resolved_display_name": "ecu_body_control_module::performBulbCheck",
              "line": 347
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "LightingControl: Lighting update cycle complete.",
          "log_arguments": [],
          "message_args_str_combined": "\"LightingControl: Lighting update cycle complete.\"",
          "line": 350,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"LightingControl: Lighting update cycle complete.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module9BulbStateC1ENS_9LightTypeE",
      "display_signature": "ecu_body_control_module::BulbState::BulbState",
      "file": "ecu_body_control_module/lighting_control.h",
      "line": 41,
      "end_line": 41,
      "execution_elements": []
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module17windowPosToStringENS_14WindowPositionE",
      "display_signature": "ecu_body_control_module::windowPosToString",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 11,
      "end_line": 22,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 12,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowPosition::FULLY_CLOSED",
              "line": 13,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowPosition::SLIGHTLY_OPEN",
              "line": 14,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowPosition::HALF_OPEN",
              "line": 15,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowPosition::FULLY_OPEN",
              "line": 16,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowPosition::MOVING_UP",
              "line": 17,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowPosition::MOVING_DOWN",
              "line": 18,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowPosition::OBSTRUCTION_DETECTED",
              "line": 19,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 20,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module16windowIdToStringENS_8WindowIDE",
      "display_signature": "ecu_body_control_module::windowIdToString",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 24,
      "end_line": 33,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 25,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowID::FRONT_LEFT",
              "line": 26,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowID::FRONT_RIGHT",
              "line": 27,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowID::REAR_LEFT",
              "line": 28,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowID::REAR_RIGHT",
              "line": 29,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "WindowID::SUNROOF",
              "line": 30,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 31,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControlC1EPN20ecu_power_management12PowerMonitorE",
      "display_signature": "ecu_body_control_module::WindowControl",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 36,
      "end_line": 51,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "WindowControl: Initializing...",
          "log_arguments": [],
          "message_args_str_combined": "\"WindowControl: Initializing...\"",
          "line": 39,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Initializing...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!power_monitor_",
          "line": 40,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "WindowControl: PowerMonitor service is NULL. Window operations might be affected by power availability.",
              "log_arguments": [],
              "message_args_str_combined": "\"WindowControl: PowerMonitor service is NULL. Window operations might be affected by power availability.\"",
              "line": 41,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"WindowControl: PowerMonitor service is NULL. Window operations might be affected by power availability.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "WindowControl: Initialization complete. %zu windows registered.",
          "log_arguments": [
            "size"
          ],
          "message_args_str_combined": "\"WindowControl: Initialization complete. %zu windows registered.\", size",
          "line": 50,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Initialization complete. %zu windows registered.\", windows_.size())"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControlD1Ev",
      "display_signature": "ecu_body_control_module::~WindowControl",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 53,
      "end_line": 55,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "WindowControl: Shutting down.",
          "log_arguments": [],
          "message_args_str_combined": "\"WindowControl: Shutting down.\"",
          "line": 54,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Shutting down.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControl10findWindowENS_8WindowIDE",
      "display_signature": "ecu_body_control_module::findWindow",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 57,
      "end_line": 65,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "it != windows_.end()",
          "line": 60,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "WindowControl: findWindow: WindowID %s not found.",
          "log_arguments": [
            "windowIdToString"
          ],
          "message_args_str_combined": "\"WindowControl: findWindow: WindowID %s not found.\", windowIdToString",
          "line": 63,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"WindowControl: findWindow: WindowID %s not found.\", windowIdToString(id))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module13WindowControl10findWindowENS_8WindowIDE",
      "display_signature": "ecu_body_control_module::findWindow",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 67,
      "end_line": 75,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "it != windows_.end()",
          "line": 70,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "WindowControl: findWindow (const): WindowID %s not found.",
          "log_arguments": [
            "windowIdToString"
          ],
          "message_args_str_combined": "\"WindowControl: findWindow (const): WindowID %s not found.\", windowIdToString",
          "line": 73,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"WindowControl: findWindow (const): WindowID %s not found.\", windowIdToString(id))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module13WindowControl16canOperateWindowERKNS_17SingleWindowStateEb",
      "display_signature": "ecu_body_control_module::canOperateWindow",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 77,
      "end_line": 104,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "window.id != WindowID::FRONT_LEFT && all_windows_locked_by_driver_",
          "line": 78,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "WindowControl: Operation for window %s denied by driver master lock.",
              "log_arguments": [
                "windowIdToString"
              ],
              "message_args_str_combined": "\"WindowControl: Operation for window %s denied by driver master lock.\", windowIdToString",
              "line": 79,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Operation for window %s denied by driver master lock.\", windowIdToString(window.id))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "power_monitor_ && !power_monitor_->isPowerStable()",
          "line": 89,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "WindowControl: Power system unstable. Window %s operation might be slow or denied.",
              "log_arguments": [
                "windowIdToString"
              ],
              "message_args_str_combined": "\"WindowControl: Power system unstable. Window %s operation might be slow or denied.\", windowIdToString",
              "line": 90,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"WindowControl: Power system unstable. Window %s operation might be slow or denied.\", windowIdToString(window.id))"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "power_monitor_->getBatteryVoltage() < 10.5",
              "line": 91,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "WindowControl: Battery too low (%.2fV) to operate window %s.",
                  "log_arguments": [
                    "getBatteryVoltage",
                    "windowIdToString"
                  ],
                  "message_args_str_combined": "\"WindowControl: Battery too low (%.2fV) to operate window %s.\", getBatteryVoltage, windowIdToString",
                  "line": 92,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"WindowControl: Battery too low (%.2fV) to operate window %s.\",                       power_monitor_->getBatteryVoltage(), windowIdToString(window.id))"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControl10moveWindowENS_8WindowIDEdb",
      "display_signature": "ecu_body_control_module::moveWindow",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 107,
      "end_line": 159,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "WindowControl: Request to move window %s to %.0f%%, one-touch: %s.",
          "log_arguments": [
            "windowIdToString",
            "[complex_arg]",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"WindowControl: Request to move window %s to %.0f%%, one-touch: %s.\", windowIdToString, [complex_arg], [complex_arg]",
          "line": 108,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Request to move window %s to %.0f%%, one-touch: %s.\",              windowIdToString(id), target_position_percent * 100.0, one_touch ? \"YES\" : \"NO\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!window",
          "line": 112,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "target_position_percent <= 0.01",
          "line": 118,
          "then_branch_elements": [],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "target_position_percent < 0.5",
              "line": 120,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "target_enum_pos == WindowPosition::FULLY_CLOSED && window->current_pos != WindowPosition::FULLY_CLOSED",
          "line": 125,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "target_enum_pos == WindowPosition::FULLY_OPEN && window->current_pos != WindowPosition::FULLY_OPEN",
          "line": 126,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!canOperateWindow(*window, opening)",
          "line": 129,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "WindowControl: Move request for window %s denied by operational checks.",
              "log_arguments": [
                "windowIdToString"
              ],
              "message_args_str_combined": "\"WindowControl: Move request for window %s denied by operational checks.\", windowIdToString",
              "line": 130,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"WindowControl: Move request for window %s denied by operational checks.\", windowIdToString(id))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "window->motor_active && window->target_pos == target_enum_pos",
          "line": 134,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "WindowControl: Window %s already moving towards target %s.",
              "log_arguments": [
                "windowIdToString",
                "windowPosToString"
              ],
              "message_args_str_combined": "\"WindowControl: Window %s already moving towards target %s.\", windowIdToString, windowPosToString",
              "line": 135,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Window %s already moving towards target %s.\",                   windowIdToString(id), windowPosToString(target_enum_pos))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "WindowControl: Window %s motor activated. Current: %s, Target: %s.",
          "log_arguments": [
            "windowIdToString",
            "windowPosToString",
            "windowPosToString"
          ],
          "message_args_str_combined": "\"WindowControl: Window %s motor activated. Current: %s, Target: %s.\", windowIdToString, windowPosToString, windowPosToString",
          "line": 145,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Window %s motor activated. Current: %s, Target: %s.\",              windowIdToString(id), windowPosToString(window->current_pos), windowPosToString(window->target_pos))"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!one_touch",
          "line": 152,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "WindowControl: Non-one-touch for %s. Motor will stop if not periodically re-commanded (simulated).",
              "log_arguments": [
                "windowIdToString"
              ],
              "message_args_str_combined": "\"WindowControl: Non-one-touch for %s. Motor will stop if not periodically re-commanded (simulated).\", windowIdToString",
              "line": 153,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Non-one-touch for %s. Motor will stop if not periodically re-commanded (simulated).\", windowIdToString(id))"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControl18stopWindowMovementENS_8WindowIDE",
      "display_signature": "ecu_body_control_module::stopWindowMovement",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 161,
      "end_line": 178,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "WindowControl: Request to STOP movement for window %s.",
          "log_arguments": [
            "windowIdToString"
          ],
          "message_args_str_combined": "\"WindowControl: Request to STOP movement for window %s.\", windowIdToString",
          "line": 162,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Request to STOP movement for window %s.\", windowIdToString(id))"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!window",
          "line": 164,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!window->motor_active",
          "line": 168,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "WindowControl: Window %s motor is not active. No action needed for stop.",
              "log_arguments": [
                "windowIdToString"
              ],
              "message_args_str_combined": "\"WindowControl: Window %s motor is not active. No action needed for stop.\", windowIdToString",
              "line": 169,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Window %s motor is not active. No action needed for stop.\", windowIdToString(id))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "WindowControl: Window %s motor DEACTIVATED by stop request.",
          "log_arguments": [
            "windowIdToString"
          ],
          "message_args_str_combined": "\"WindowControl: Window %s motor DEACTIVATED by stop request.\", windowIdToString",
          "line": 176,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Window %s motor DEACTIVATED by stop request.\", windowIdToString(id))"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControl12setChildLockENS_8WindowIDEb",
      "display_signature": "ecu_body_control_module::setChildLock",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 180,
      "end_line": 190,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "WindowControl: Child lock for window %s set to %s (SIMULATED - not fully implemented).",
          "log_arguments": [
            "windowIdToString",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"WindowControl: Child lock for window %s set to %s (SIMULATED - not fully implemented).\", windowIdToString, [complex_arg]",
          "line": 182,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Child lock for window %s set to %s (SIMULATED - not fully implemented).\",              windowIdToString(id), locked ? \"LOCKED\" : \"UNLOCKED\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "id == WindowID::REAR_LEFT || id == WindowID::REAR_RIGHT || id == WindowID::SUNROOF",
          "line": 184,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "WindowControl: Child lock typically applies to rear windows or sunroof. Ignored for %s.",
          "log_arguments": [
            "windowIdToString"
          ],
          "message_args_str_combined": "\"WindowControl: Child lock typically applies to rear windows or sunroof. Ignored for %s.\", windowIdToString",
          "line": 188,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"WindowControl: Child lock typically applies to rear windows or sunroof. Ignored for %s.\", windowIdToString(id))"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControl17setAllWindowsLockEb",
      "display_signature": "ecu_body_control_module::setAllWindowsLock",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 192,
      "end_line": 206,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "WindowControl: Driver master window lock set to %s.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"WindowControl: Driver master window lock set to %s.\", [complex_arg]",
          "line": 193,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Driver master window lock set to %s.\", locked ? \"LOCKED\" : \"UNLOCKED\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "locked",
          "line": 195,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "WindowControl: All passenger windows (except driver) are now locked from local operation.",
              "log_arguments": [],
              "message_args_str_combined": "\"WindowControl: All passenger windows (except driver) are now locked from local operation.\"",
              "line": 196,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: All passenger windows (except driver) are now locked from local operation.\")"
            },
            {
              "type": "FOR_RANGE_LOOP",
              "line": 198,
              "body_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "win.id != WindowID::FRONT_LEFT && win.motor_active",
                  "line": 199,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "WindowControl: Stopping passenger window %s due to master lock activation.",
                      "log_arguments": [
                        "windowIdToString"
                      ],
                      "message_args_str_combined": "\"WindowControl: Stopping passenger window %s due to master lock activation.\", windowIdToString",
                      "line": 200,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Stopping passenger window %s due to master lock activation.\", windowIdToString(win.id))"
                    },
                    {
                      "type": "CALL",
                      "callee_expression": "stopWindowMovement(win.id)",
                      "callee_name_at_call_site": "stopWindowMovement",
                      "callee_resolved_key": "_ZN23ecu_body_control_module13WindowControl18stopWindowMovementENS_8WindowIDE",
                      "callee_resolved_display_name": "ecu_body_control_module::stopWindowMovement",
                      "line": 201
                    }
                  ],
                  "else_branch_elements": []
                }
              ]
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZNK23ecu_body_control_module13WindowControl17getWindowPositionENS_8WindowIDE",
      "display_signature": "ecu_body_control_module::getWindowPosition",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 208,
      "end_line": 216,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "window",
          "line": 210,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "WindowControl: Position of window %s is %s.",
              "log_arguments": [
                "windowIdToString",
                "windowPosToString"
              ],
              "message_args_str_combined": "\"WindowControl: Position of window %s is %s.\", windowIdToString, windowPosToString",
              "line": 211,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Position of window %s is %s.\", windowIdToString(id), windowPosToString(window->current_pos))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "WindowControl: getWindowPosition: Could not find window %s. Reporting FULLY_CLOSED.",
          "log_arguments": [
            "windowIdToString"
          ],
          "message_args_str_combined": "\"WindowControl: getWindowPosition: Could not find window %s. Reporting FULLY_CLOSED.\", windowIdToString",
          "line": 214,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"WindowControl: getWindowPosition: Could not find window %s. Reporting FULLY_CLOSED.\", windowIdToString(id))"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControl14checkAntiPinchERNS_17SingleWindowStateE",
      "display_signature": "ecu_body_control_module::checkAntiPinch",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 218,
      "end_line": 243,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "window.current_pos == WindowPosition::MOVING_UP && window.target_pos != WindowPosition::FULLY_OPEN",
          "line": 220,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "distrib(gen) <= 10",
              "line": 224,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "WindowControl: ANTI-PINCH DETECTED for window %s! Reversing direction.",
                  "log_arguments": [
                    "windowIdToString"
                  ],
                  "message_args_str_combined": "\"WindowControl: ANTI-PINCH DETECTED for window %s! Reversing direction.\", windowIdToString",
                  "line": 225,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"WindowControl: ANTI-PINCH DETECTED for window %s! Reversing direction.\", windowIdToString(window.id))"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "window.obstruction_counter >= 3",
                  "line": 233,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "ERROR",
                      "log_format_string": "WindowControl: Window %s has detected obstruction %d times. Disabling one-touch for safety.",
                      "log_arguments": [
                        "windowIdToString",
                        "obstruction_counter"
                      ],
                      "message_args_str_combined": "\"WindowControl: Window %s has detected obstruction %d times. Disabling one-touch for safety.\", windowIdToString, obstruction_counter",
                      "line": 234,
                      "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"WindowControl: Window %s has detected obstruction %d times. Disabling one-touch for safety.\",                           windowIdToString(window.id), window.obstruction_counter)"
                    }
                  ],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControl21simulateMotorMovementERNS_17SingleWindowStateEd",
      "display_signature": "ecu_body_control_module::simulateMotorMovement",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 245,
      "end_line": 290,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "window.current_pos == WindowPosition::MOVING_UP",
          "line": 250,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "window.target_pos == WindowPosition::FULLY_CLOSED",
              "line": 251,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "window.current_pos == window.target_pos || window.current_pos == WindowPosition::FULLY_CLOSED && window.target_pos != WindowPosition::FULLY_OPEN",
              "line": 258,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "WindowControl: Window %s reached target %s (was MOVING_UP). Motor stopped.",
                  "log_arguments": [
                    "windowIdToString",
                    "windowPosToString"
                  ],
                  "message_args_str_combined": "\"WindowControl: Window %s reached target %s (was MOVING_UP). Motor stopped.\", windowIdToString, windowPosToString",
                  "line": 261,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Window %s reached target %s (was MOVING_UP). Motor stopped.\",                       windowIdToString(window.id), windowPosToString(window.current_pos))"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "window.target_pos == WindowPosition::FULLY_OPEN",
              "line": 265,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "window.current_pos == window.target_pos || window.current_pos == WindowPosition::FULLY_OPEN && window.target_pos != WindowPosition::FULLY_CLOSED",
              "line": 271,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "WindowControl: Window %s reached target %s (was MOVING_DOWN). Motor stopped.",
                  "log_arguments": [
                    "windowIdToString",
                    "windowPosToString"
                  ],
                  "message_args_str_combined": "\"WindowControl: Window %s reached target %s (was MOVING_DOWN). Motor stopped.\", windowIdToString, windowPosToString",
                  "line": 274,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Window %s reached target %s (was MOVING_DOWN). Motor stopped.\",                       windowIdToString(window.id), windowPosToString(window.current_pos))"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "window.current_pos == WindowPosition::OBSTRUCTION_DETECTED",
              "line": 277,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "DEBUG",
                  "log_format_string": "WindowControl: Window %s reversing due to obstruction. New target: HALF_OPEN.",
                  "log_arguments": [
                    "windowIdToString"
                  ],
                  "message_args_str_combined": "\"WindowControl: Window %s reversing due to obstruction. New target: HALF_OPEN.\", windowIdToString",
                  "line": 281,
                  "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Window %s reversing due to obstruction. New target: HALF_OPEN.\", windowIdToString(window.id))"
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "old_discrete_pos != window.current_pos && window.motor_active",
          "line": 285,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "WindowControl: Window %s moved from %s to %s. Target: %s",
              "log_arguments": [
                "windowIdToString",
                "windowPosToString",
                "windowPosToString",
                "windowPosToString"
              ],
              "message_args_str_combined": "\"WindowControl: Window %s moved from %s to %s. Target: %s\", windowIdToString, windowPosToString, windowPosToString, windowPosToString",
              "line": 286,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Window %s moved from %s to %s. Target: %s\",                   windowIdToString(window.id), windowPosToString(old_discrete_pos),                   windowPosToString(window.current_pos), windowPosToString(window.target_pos))"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module13WindowControl18updateWindowStatesEv",
      "display_signature": "ecu_body_control_module::updateWindowStates",
      "file": "ecu_body_control_module/window_control.cpp",
      "line": 293,
      "end_line": 343,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "WindowControl: Updating all window states...",
          "log_arguments": [],
          "message_args_str_combined": "\"WindowControl: Updating all window states...\"",
          "line": 294,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Updating all window states...\")"
        },
        {
          "type": "FOR_RANGE_LOOP",
          "line": 296,
          "body_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "power_monitor_ && any_motor_active_start",
          "line": 298,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "power_monitor_->simulateHighLoadEvent(true)",
              "callee_name_at_call_site": "simulateHighLoadEvent",
              "callee_resolved_key": "_ZN20ecu_power_management12PowerMonitor21simulateHighLoadEventEb",
              "callee_resolved_display_name": "ecu_power_management::PowerMonitor::simulateHighLoadEvent",
              "line": 300
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "WindowControl: Signaled high power load to PowerMonitor due to active window motor(s).",
              "log_arguments": [],
              "message_args_str_combined": "\"WindowControl: Signaled high power load to PowerMonitor due to active window motor(s).\"",
              "line": 301,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Signaled high power load to PowerMonitor due to active window motor(s).\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "FOR_RANGE_LOOP",
          "line": 304,
          "body_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "!window.motor_active",
              "line": 305,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "WindowControl: Updating active window %s. Current: %s, Target: %s",
              "log_arguments": [
                "windowIdToString",
                "windowPosToString",
                "windowPosToString"
              ],
              "message_args_str_combined": "\"WindowControl: Updating active window %s. Current: %s, Target: %s\", windowIdToString, windowPosToString, windowPosToString",
              "line": 309,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Updating active window %s. Current: %s, Target: %s\",                   windowIdToString(window.id), windowPosToString(window.current_pos), windowPosToString(window.target_pos))"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "window.current_pos == WindowPosition::MOVING_UP",
              "line": 313,
              "then_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "checkAntiPinch(window)",
                  "line": 314,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "DEBUG",
                      "log_format_string": "WindowControl: Anti-pinch for %s modified state. Continuing update.",
                      "log_arguments": [
                        "windowIdToString"
                      ],
                      "message_args_str_combined": "\"WindowControl: Anti-pinch for %s modified state. Continuing update.\", windowIdToString",
                      "line": 318,
                      "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Anti-pinch for %s modified state. Continuing update.\", windowIdToString(window.id))"
                    }
                  ],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "window.motor_active",
              "line": 323,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "simulateMotorMovement(window, 0.1)",
                  "callee_name_at_call_site": "simulateMotorMovement",
                  "callee_resolved_key": "_ZN23ecu_body_control_module13WindowControl21simulateMotorMovementERNS_17SingleWindowStateEd",
                  "callee_resolved_display_name": "ecu_body_control_module::simulateMotorMovement",
                  "line": 324
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "!window.motor_active && window.current_pos != WindowPosition::MOVING_UP && window.current_pos != WindowPosition::MOVING_DOWN",
              "line": 328,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "WindowControl: Window %s has stopped at %s.",
                  "log_arguments": [
                    "windowIdToString",
                    "windowPosToString"
                  ],
                  "message_args_str_combined": "\"WindowControl: Window %s has stopped at %s.\", windowIdToString, windowPosToString",
                  "line": 329,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Window %s has stopped at %s.\",                       windowIdToString(window.id), windowPosToString(window.current_pos))"
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "FOR_RANGE_LOOP",
          "line": 335,
          "body_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "power_monitor_ && any_motor_active_start && !any_motor_active_end",
          "line": 337,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "power_monitor_->simulateHighLoadEvent(false)",
              "callee_name_at_call_site": "simulateHighLoadEvent",
              "callee_resolved_key": "_ZN20ecu_power_management12PowerMonitor21simulateHighLoadEventEb",
              "callee_resolved_display_name": "ecu_power_management::PowerMonitor::simulateHighLoadEvent",
              "line": 339
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "WindowControl: Signaled end of high power load to PowerMonitor as all window motors stopped.",
              "log_arguments": [],
              "message_args_str_combined": "\"WindowControl: Signaled end of high power load to PowerMonitor as all window motors stopped.\"",
              "line": 340,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"WindowControl: Signaled end of high power load to PowerMonitor as all window motors stopped.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "WindowControl: Window states update cycle complete.",
          "log_arguments": [],
          "message_args_str_combined": "\"WindowControl: Window states update cycle complete.\"",
          "line": 342,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"WindowControl: Window states update cycle complete.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN23ecu_body_control_module17SingleWindowStateC1ENS_8WindowIDE",
      "display_signature": "ecu_body_control_module::SingleWindowState::SingleWindowState",
      "file": "ecu_body_control_module/window_control.h",
      "line": 40,
      "end_line": 43,
      "execution_elements": []
    },
    {
      "function_id_key": "_ZN16ecu_infotainment19mediaSourceToStringENS_11MediaSourceE",
      "display_signature": "ecu_infotainment::mediaSourceToString",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 9,
      "end_line": 19,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 10,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::USB",
              "line": 11,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::BLUETOOTH",
              "line": 12,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::RADIO_FM",
              "line": 13,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::RADIO_AM",
              "line": 14,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::AUX",
              "line": 15,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::NONE",
              "line": 16,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 17,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment22playbackStatusToStringENS_14PlaybackStatusE",
      "display_signature": "ecu_infotainment::playbackStatusToString",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 22,
      "end_line": 32,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 23,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "PlaybackStatus::STOPPED",
              "line": 24,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "PlaybackStatus::PLAYING",
              "line": 25,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "PlaybackStatus::PAUSED",
              "line": 26,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "PlaybackStatus::BUFFERING",
              "line": 27,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "PlaybackStatus::ERROR_SOURCE_UNAVAILABLE",
              "line": 28,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "PlaybackStatus::ERROR_TRACK_UNREADABLE",
              "line": 29,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 30,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayerC1Ev",
      "display_signature": "ecu_infotainment::MediaPlayer",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 35,
      "end_line": 46,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Initializing. Default volume: %d%%.",
          "log_arguments": [
            "volume_level_"
          ],
          "message_args_str_combined": "\"MediaPlayer: Initializing. Default volume: %d%%.\", volume_level_",
          "line": 45,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Initializing. Default volume: %d%%.\", volume_level_)"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayerD1Ev",
      "display_signature": "ecu_infotainment::~MediaPlayer",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 48,
      "end_line": 51,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Shutting down. Current source: %s, Status: %s.",
          "log_arguments": [
            "mediaSourceToString",
            "playbackStatusToString"
          ],
          "message_args_str_combined": "\"MediaPlayer: Shutting down. Current source: %s, Status: %s.\", mediaSourceToString, playbackStatusToString",
          "line": 49,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Shutting down. Current source: %s, Status: %s.\",              mediaSourceToString(current_source_), playbackStatusToString(current_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer12selectSourceENS_11MediaSourceE",
      "display_signature": "ecu_infotainment::selectSource",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 53,
      "end_line": 119,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Request to select source: %s.",
          "log_arguments": [
            "mediaSourceToString"
          ],
          "message_args_str_combined": "\"MediaPlayer: Request to select source: %s.\", mediaSourceToString",
          "line": 54,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Request to select source: %s.\", mediaSourceToString(new_source))"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_source_ == new_source",
          "line": 55,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "MediaPlayer: Source %s is already active.",
              "log_arguments": [
                "mediaSourceToString"
              ],
              "message_args_str_combined": "\"MediaPlayer: Source %s is already active.\", mediaSourceToString",
              "line": 56,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Source %s is already active.\", mediaSourceToString(new_source))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "callee_expression": "stop()",
          "callee_name_at_call_site": "stop",
          "callee_resolved_key": "_ZN16ecu_infotainment11MediaPlayer4stopEv",
          "callee_resolved_display_name": "ecu_infotainment::MediaPlayer::stop",
          "line": 60
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Switched to source %s.",
          "log_arguments": [
            "mediaSourceToString"
          ],
          "message_args_str_combined": "\"MediaPlayer: Switched to source %s.\", mediaSourceToString",
          "line": 67,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Switched to source %s.\", mediaSourceToString(current_source_))"
        },
        {
          "type": "SWITCH_BLOCK",
          "line": 74,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::USB",
              "line": 75,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: USB source selected. Please load a playlist or select a track.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: USB source selected. Please load a playlist or select a track.\"",
              "line": 80,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: USB source selected. Please load a playlist or select a track.\")"
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::BLUETOOTH",
              "line": 88,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: Bluetooth source selected. Awaiting stream or playlist.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: Bluetooth source selected. Awaiting stream or playlist.\"",
              "line": 93,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Bluetooth source selected. Awaiting stream or playlist.\")"
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::RADIO_FM",
              "line": 99,
              "body_elements": []
            },
            {
              "type": "CALL",
              "callee_expression": "tuneRadio(98.5, MediaSource::RADIO_FM)",
              "callee_name_at_call_site": "tuneRadio",
              "callee_resolved_key": "_ZN16ecu_infotainment11MediaPlayer9tuneRadioEdNS_11MediaSourceE",
              "callee_resolved_display_name": "ecu_infotainment::MediaPlayer::tuneRadio",
              "line": 101
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::RADIO_AM",
              "line": 103,
              "body_elements": []
            },
            {
              "type": "CALL",
              "callee_expression": "tuneRadio(740, MediaSource::RADIO_AM)",
              "callee_name_at_call_site": "tuneRadio",
              "callee_resolved_key": "_ZN16ecu_infotainment11MediaPlayer9tuneRadioEdNS_11MediaSourceE",
              "callee_resolved_display_name": "ecu_infotainment::MediaPlayer::tuneRadio",
              "line": 105
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::AUX",
              "line": 107,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::NONE",
              "line": 111,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 114,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment11MediaPlayer16getCurrentSourceEv",
      "display_signature": "ecu_infotainment::getCurrentSource",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 121,
      "end_line": 124,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MediaPlayer: getCurrentSource() -> %s.",
          "log_arguments": [
            "mediaSourceToString"
          ],
          "message_args_str_combined": "\"MediaPlayer: getCurrentSource() -> %s.\", mediaSourceToString",
          "line": 122,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: getCurrentSource() -> %s.\", mediaSourceToString(current_source_))"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer16playTrackAtIndexEi",
      "display_signature": "ecu_infotainment::playTrackAtIndex",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 126,
      "end_line": 149,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "index < 0 || index >= static_cast<int>(current_playlist_.size())",
          "line": 127,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "track.title == \"Bad USB File\"",
          "line": 134,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Playing track #%d: '%s' by '%s'. Duration: %llds.",
          "log_arguments": [
            "track_number",
            "c_str",
            "c_str",
            "count"
          ],
          "message_args_str_combined": "\"MediaPlayer: Playing track #%d: '%s' by '%s'. Duration: %llds.\", track_number, c_str, c_str, count",
          "line": 146,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Playing track #%d: '%s' by '%s'. Duration: %llds.\",              track.track_number, track.title.c_str(), track.artist.c_str(), track.duration.count())"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer4playEv",
      "display_signature": "ecu_infotainment::play",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 151,
      "end_line": 198,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Play command received.",
          "log_arguments": [],
          "message_args_str_combined": "\"MediaPlayer: Play command received.\"",
          "line": 152,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Play command received.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "muted_",
          "line": 153,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "MediaPlayer: Player is muted. Sound will not be audible until unmuted.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: Player is muted. Sound will not be audible until unmuted.\"",
              "line": 154,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Player is muted. Sound will not be audible until unmuted.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "SWITCH_BLOCK",
          "line": 156,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::USB",
              "line": 157,
              "body_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_playlist_.empty()",
              "line": 163,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_status_ == PlaybackStatus::PAUSED && current_track_index_ != -1",
              "line": 167,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "MediaPlayer: Resuming track '%s'.",
                  "log_arguments": [
                    "c_str"
                  ],
                  "message_args_str_combined": "\"MediaPlayer: Resuming track '%s'.\", c_str",
                  "line": 172,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Resuming track '%s'.\", current_playlist_[current_track_index_].title.c_str())"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::RADIO_FM",
              "line": 179,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: Playing radio station %.1f %s.",
              "log_arguments": [
                "[complex_arg]",
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"MediaPlayer: Playing radio station %.1f %s.\", [complex_arg], [complex_arg]",
              "line": 182,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Playing radio station %.1f %s.\",                      (current_source_ == MediaSource::RADIO_FM ? current_fm_frequency_ : current_am_frequency_),                      (current_source_ == MediaSource::RADIO_FM ? \"MHz\" : \"kHz\"))"
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::AUX",
              "line": 186,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: AUX source is active.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: AUX source is active.\"",
              "line": 188,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: AUX source is active.\")"
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "MediaSource::NONE",
              "line": 190,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 193,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer5pauseEv",
      "display_signature": "ecu_infotainment::pause",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 200,
      "end_line": 219,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Pause command received.",
          "log_arguments": [],
          "message_args_str_combined": "\"MediaPlayer: Pause command received.\"",
          "line": 201,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Pause command received.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == PlaybackStatus::PLAYING &&         (current_source_ == MediaSource::USB || current_source_ == MediaSource::BLUETOOTH) &&         current_track_index_ != -1",
          "line": 202,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: Paused track '%s' at %llds.",
              "log_arguments": [
                "c_str",
                "count"
              ],
              "message_args_str_combined": "\"MediaPlayer: Paused track '%s' at %llds.\", c_str, count",
              "line": 209,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Paused track '%s' at %llds.\",                  current_playlist_[current_track_index_].title.c_str(),                  paused_elapsed_time_.count())"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "MediaPlayer: Already paused.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: Already paused.\"",
              "line": 213,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Already paused.\")"
            },
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MediaPlayer: Cannot pause. Not playing a pausable track or source %s is not pausable.",
              "log_arguments": [
                "mediaSourceToString"
              ],
              "message_args_str_combined": "\"MediaPlayer: Cannot pause. Not playing a pausable track or source %s is not pausable.\", mediaSourceToString",
              "line": 215,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MediaPlayer: Cannot pause. Not playing a pausable track or source %s is not pausable.\", mediaSourceToString(current_source_))"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer4stopEv",
      "display_signature": "ecu_infotainment::stop",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 221,
      "end_line": 241,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Stop command received.",
          "log_arguments": [],
          "message_args_str_combined": "\"MediaPlayer: Stop command received.\"",
          "line": 222,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Stop command received.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ != PlaybackStatus::STOPPED",
          "line": 223,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_source_ == MediaSource::USB || current_source_ == MediaSource::BLUETOOTH",
              "line": 227,
              "then_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "current_track_index_ != -1",
                  "line": 228,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "MediaPlayer: Stopped playback of track '%s'.",
                      "log_arguments": [
                        "c_str"
                      ],
                      "message_args_str_combined": "\"MediaPlayer: Stopped playback of track '%s'.\", c_str",
                      "line": 229,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Stopped playback of track '%s'.\", current_playlist_[current_track_index_].title.c_str())"
                    }
                  ],
                  "else_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "MediaPlayer: Playback stopped on source %s.",
                      "log_arguments": [
                        "mediaSourceToString"
                      ],
                      "message_args_str_combined": "\"MediaPlayer: Playback stopped on source %s.\", mediaSourceToString",
                      "line": 231,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Playback stopped on source %s.\", mediaSourceToString(current_source_))"
                    }
                  ]
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "MediaPlayer: Playback stopped on source %s.",
                  "log_arguments": [
                    "mediaSourceToString"
                  ],
                  "message_args_str_combined": "\"MediaPlayer: Playback stopped on source %s.\", mediaSourceToString",
                  "line": 235,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Playback stopped on source %s.\", mediaSourceToString(current_source_))"
                }
              ]
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "MediaPlayer: Already stopped.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: Already stopped.\"",
              "line": 238,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Already stopped.\")"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer9nextTrackEv",
      "display_signature": "ecu_infotainment::nextTrack",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 243,
      "end_line": 255,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Next track command received.",
          "log_arguments": [],
          "message_args_str_combined": "\"MediaPlayer: Next track command received.\"",
          "line": 244,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Next track command received.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_source_ != MediaSource::USB && current_source_ != MediaSource::BLUETOOTH",
          "line": 245,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MediaPlayer: Next track command ignored. Source %s does not support tracks.",
              "log_arguments": [
                "mediaSourceToString"
              ],
              "message_args_str_combined": "\"MediaPlayer: Next track command ignored. Source %s does not support tracks.\", mediaSourceToString",
              "line": 246,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MediaPlayer: Next track command ignored. Source %s does not support tracks.\", mediaSourceToString(current_source_))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_playlist_.empty()",
          "line": 249,
          "then_branch_elements": [],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer13previousTrackEv",
      "display_signature": "ecu_infotainment::previousTrack",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 257,
      "end_line": 278,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Previous track command received.",
          "log_arguments": [],
          "message_args_str_combined": "\"MediaPlayer: Previous track command received.\"",
          "line": 258,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Previous track command received.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_source_ != MediaSource::USB && current_source_ != MediaSource::BLUETOOTH",
          "line": 259,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MediaPlayer: Previous track command ignored. Source %s does not support tracks.",
              "log_arguments": [
                "mediaSourceToString"
              ],
              "message_args_str_combined": "\"MediaPlayer: Previous track command ignored. Source %s does not support tracks.\", mediaSourceToString",
              "line": 260,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MediaPlayer: Previous track command ignored. Source %s does not support tracks.\", mediaSourceToString(current_source_))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_playlist_.empty()",
          "line": 263,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "getCurrentTrackElapsedTime() > std::chrono::seconds(5) && current_status_ == PlaybackStatus::PLAYING",
          "line": 268,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "MediaPlayer: Restarting current track '%s'.",
              "log_arguments": [
                "c_str"
              ],
              "message_args_str_combined": "\"MediaPlayer: Restarting current track '%s'.\", c_str",
              "line": 269,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Restarting current track '%s'.\", current_playlist_[current_track_index_].title.c_str())"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "prev_idx < 0",
          "line": 274,
          "then_branch_elements": [],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer4seekENSt6chrono8durationIlSt5ratioILl1ELl1EEEE",
      "display_signature": "ecu_infotainment::seek",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 280,
      "end_line": 308,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Seek command received. Target position: %llds.",
          "log_arguments": [
            "count"
          ],
          "message_args_str_combined": "\"MediaPlayer: Seek command received. Target position: %llds.\", count",
          "line": 281,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Seek command received. Target position: %llds.\", position.count())"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ != PlaybackStatus::PLAYING && current_status_ != PlaybackStatus::PAUSED",
          "line": 282,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MediaPlayer: Cannot seek. Not currently playing or paused on a track.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: Cannot seek. Not currently playing or paused on a track.\"",
              "line": 283,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MediaPlayer: Cannot seek. Not currently playing or paused on a track.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_source_ != MediaSource::USB && current_source_ != MediaSource::BLUETOOTH",
          "line": 286,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MediaPlayer: Seek command ignored. Source %s does not support seeking.",
              "log_arguments": [
                "mediaSourceToString"
              ],
              "message_args_str_combined": "\"MediaPlayer: Seek command ignored. Source %s does not support seeking.\", mediaSourceToString",
              "line": 287,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MediaPlayer: Seek command ignored. Source %s does not support seeking.\", mediaSourceToString(current_source_))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_track_index_ == -1 || current_playlist_.empty()",
          "line": 290,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "position < std::chrono::seconds(0) || position > track.duration",
          "line": 296,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MediaPlayer: Invalid seek position %llds for track '%s' (duration %llds). Clamping.",
              "log_arguments": [
                "count",
                "c_str",
                "count"
              ],
              "message_args_str_combined": "\"MediaPlayer: Invalid seek position %llds for track '%s' (duration %llds). Clamping.\", count, c_str, count",
              "line": 297,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MediaPlayer: Invalid seek position %llds for track '%s' (duration %llds). Clamping.\",                     position.count(), track.title.c_str(), track.duration.count())"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == PlaybackStatus::PAUSED",
          "line": 303,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Seeked track '%s' to %llds.",
          "log_arguments": [
            "c_str",
            "count"
          ],
          "message_args_str_combined": "\"MediaPlayer: Seeked track '%s' to %llds.\", c_str, count",
          "line": 306,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Seeked track '%s' to %llds.\", track.title.c_str(), position.count())"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer9setVolumeEi",
      "display_signature": "ecu_infotainment::setVolume",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 311,
      "end_line": 328,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Set volume command. Level: %d%%.",
          "log_arguments": [
            "level_percent"
          ],
          "message_args_str_combined": "\"MediaPlayer: Set volume command. Level: %d%%.\", level_percent",
          "line": 313,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Set volume command. Level: %d%%.\", level_percent)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "volume_level_ == level_percent && !muted_",
          "line": 314,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "MediaPlayer: Volume already at %d%%.",
              "log_arguments": [
                "level_percent"
              ],
              "message_args_str_combined": "\"MediaPlayer: Volume already at %d%%.\", level_percent",
              "line": 315,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Volume already at %d%%.\", level_percent)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "volume_level_ > 0 && muted_",
          "line": 319,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: Volume set to %d%%. Unmuting device.",
              "log_arguments": [
                "volume_level_"
              ],
              "message_args_str_combined": "\"MediaPlayer: Volume set to %d%%. Unmuting device.\", volume_level_",
              "line": 320,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Volume set to %d%%. Unmuting device.\", volume_level_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: Volume set to 0%%. Muting device.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: Volume set to 0%%. Muting device.\"",
              "line": 323,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Volume set to 0%%. Muting device.\")"
            }
          ]
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Volume is now %d%%. Muted: %s.",
          "log_arguments": [
            "volume_level_",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"MediaPlayer: Volume is now %d%%. Muted: %s.\", volume_level_, [complex_arg]",
          "line": 326,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Volume is now %d%%. Muted: %s.\", volume_level_, muted_ ? \"YES\" : \"NO\")"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment11MediaPlayer9getVolumeEv",
      "display_signature": "ecu_infotainment::getVolume",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 330,
      "end_line": 333,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MediaPlayer: getVolume() -> %d%%. Muted: %s.",
          "log_arguments": [
            "volume_level_",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"MediaPlayer: getVolume() -> %d%%. Muted: %s.\", volume_level_, [complex_arg]",
          "line": 331,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: getVolume() -> %d%%. Muted: %s.\", volume_level_, muted_ ? \"YES\" : \"NO\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer4muteEb",
      "display_signature": "ecu_infotainment::mute",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 335,
      "end_line": 345,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Mute command. Enable: %s.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"MediaPlayer: Mute command. Enable: %s.\", [complex_arg]",
          "line": 336,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Mute command. Enable: %s.\", enable_mute ? \"YES\" : \"NO\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "muted_ == enable_mute",
          "line": 337,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "MediaPlayer: Mute state already %s.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"MediaPlayer: Mute state already %s.\", [complex_arg]",
              "line": 338,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Mute state already %s.\", muted_ ? \"ON\" : \"OFF\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Mute state is now %s. Volume level (if unmuted): %d%%.",
          "log_arguments": [
            "[complex_arg]",
            "volume_level_"
          ],
          "message_args_str_combined": "\"MediaPlayer: Mute state is now %s. Volume level (if unmuted): %d%%.\", [complex_arg], volume_level_",
          "line": 342,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Mute state is now %s. Volume level (if unmuted): %d%%.\",              muted_ ? \"ON\" : \"OFF\", volume_level_)"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment11MediaPlayer7isMutedEv",
      "display_signature": "ecu_infotainment::isMuted",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 347,
      "end_line": 350,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MediaPlayer: isMuted() -> %s.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"MediaPlayer: isMuted() -> %s.\", [complex_arg]",
          "line": 348,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: isMuted() -> %s.\", muted_ ? \"YES\" : \"NO\")"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment11MediaPlayer17getPlaybackStatusEv",
      "display_signature": "ecu_infotainment::getPlaybackStatus",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 352,
      "end_line": 355,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MediaPlayer: getPlaybackStatus() -> %s.",
          "log_arguments": [
            "playbackStatusToString"
          ],
          "message_args_str_combined": "\"MediaPlayer: getPlaybackStatus() -> %s.\", playbackStatusToString",
          "line": 353,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: getPlaybackStatus() -> %s.\", playbackStatusToString(current_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment11MediaPlayer19getCurrentTrackInfoEv",
      "display_signature": "ecu_infotainment::getCurrentTrackInfo",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 357,
      "end_line": 367,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_track_index_ != -1 && !current_playlist_.empty() &&         (current_source_ == MediaSource::USB || current_source_ == MediaSource::BLUETOOTH)",
          "line": 358,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "MediaPlayer: getCurrentTrackInfo() for '%s'.",
              "log_arguments": [
                "c_str"
              ],
              "message_args_str_combined": "\"MediaPlayer: getCurrentTrackInfo() for '%s'.\", c_str",
              "line": 360,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: getCurrentTrackInfo() for '%s'.\", current_playlist_[current_track_index_].title.c_str())"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MediaPlayer: getCurrentTrackInfo() -> No track info available for current source/status.",
          "log_arguments": [],
          "message_args_str_combined": "\"MediaPlayer: getCurrentTrackInfo() -> No track info available for current source/status.\"",
          "line": 365,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: getCurrentTrackInfo() -> No track info available for current source/status.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment11MediaPlayer26getCurrentTrackElapsedTimeEv",
      "display_signature": "ecu_infotainment::getCurrentTrackElapsedTime",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 369,
      "end_line": 382,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == PlaybackStatus::PLAYING && current_track_index_ != -1",
          "line": 370,
          "then_branch_elements": [
            {
              "type": "DO_WHILE_LOOP",
              "line": 374,
              "body_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "DO_WHILE_LOOP",
              "line": 377,
              "body_elements": []
            }
          ]
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 380,
          "body_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer12loadPlaylistERKSt6vectorINS_9TrackInfoESaIS2_EE",
      "display_signature": "ecu_infotainment::loadPlaylist",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 384,
      "end_line": 399,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_source_ != MediaSource::USB && current_source_ != MediaSource::BLUETOOTH",
          "line": 385,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MediaPlayer: Cannot load playlist. Current source %s does not support playlists.",
              "log_arguments": [
                "mediaSourceToString"
              ],
              "message_args_str_combined": "\"MediaPlayer: Cannot load playlist. Current source %s does not support playlists.\", mediaSourceToString",
              "line": 386,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MediaPlayer: Cannot load playlist. Current source %s does not support playlists.\",                     mediaSourceToString(current_source_))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Playlist with %zu tracks loaded for source %s.",
          "log_arguments": [
            "size",
            "mediaSourceToString"
          ],
          "message_args_str_combined": "\"MediaPlayer: Playlist with %zu tracks loaded for source %s.\", size, mediaSourceToString",
          "line": 393,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Playlist with %zu tracks loaded for source %s.\",              playlist.size(), mediaSourceToString(current_source_))"
        },
        {
          "type": "FOR_LOOP",
          "line": 395,
          "body_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "MediaPlayer: Playlist item %zu: '%s' by '%s'",
              "log_arguments": [
                "[complex_arg]",
                "c_str",
                "c_str"
              ],
              "message_args_str_combined": "\"MediaPlayer: Playlist item %zu: '%s' by '%s'\", [complex_arg], c_str, c_str",
              "line": 396,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Playlist item %zu: '%s' by '%s'\", i+1, playlist[i].title.c_str(), playlist[i].artist.c_str())"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer9tuneRadioEdNS_11MediaSourceE",
      "display_signature": "ecu_infotainment::tuneRadio",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 401,
      "end_line": 424,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "radio_band != MediaSource::RADIO_FM && radio_band != MediaSource::RADIO_AM",
          "line": 402,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "MediaPlayer: Invalid radio band specified for tuning: %s",
              "log_arguments": [
                "mediaSourceToString"
              ],
              "message_args_str_combined": "\"MediaPlayer: Invalid radio band specified for tuning: %s\", mediaSourceToString",
              "line": 403,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"MediaPlayer: Invalid radio band specified for tuning: %s\", mediaSourceToString(radio_band))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_source_ != radio_band",
          "line": 406,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MediaPlayer: Cannot tune %s. Current source is %s. Please select %s source first.",
              "log_arguments": [
                "mediaSourceToString",
                "mediaSourceToString",
                "mediaSourceToString"
              ],
              "message_args_str_combined": "\"MediaPlayer: Cannot tune %s. Current source is %s. Please select %s source first.\", mediaSourceToString, mediaSourceToString, mediaSourceToString",
              "line": 407,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MediaPlayer: Cannot tune %s. Current source is %s. Please select %s source first.\",                     mediaSourceToString(radio_band), mediaSourceToString(current_source_), mediaSourceToString(radio_band))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "radio_band == MediaSource::RADIO_FM",
          "line": 414,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: Tuned FM Radio to %.1f MHz.",
              "log_arguments": [
                "current_fm_frequency_"
              ],
              "message_args_str_combined": "\"MediaPlayer: Tuned FM Radio to %.1f MHz.\", current_fm_frequency_",
              "line": 416,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Tuned FM Radio to %.1f MHz.\", current_fm_frequency_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: Tuned AM Radio to %.0f kHz.",
              "log_arguments": [
                "current_am_frequency_"
              ],
              "message_args_str_combined": "\"MediaPlayer: Tuned AM Radio to %.0f kHz.\", current_am_frequency_",
              "line": 419,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Tuned AM Radio to %.0f kHz.\", current_am_frequency_)"
            }
          ]
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MediaPlayer: Radio tuned. Status set to PLAYING.",
          "log_arguments": [],
          "message_args_str_combined": "\"MediaPlayer: Radio tuned. Status set to PLAYING.\"",
          "line": 422,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Radio tuned. Status set to PLAYING.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer14handleTrackEndEv",
      "display_signature": "ecu_infotainment::handleTrackEnd",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 426,
      "end_line": 442,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MediaPlayer: Track '%s' ended.",
          "log_arguments": [
            "c_str"
          ],
          "message_args_str_combined": "\"MediaPlayer: Track '%s' ended.\", c_str",
          "line": 427,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Track '%s' ended.\", current_playlist_[current_track_index_].title.c_str())"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_track_index_ + 1 < static_cast<int>(current_playlist_.size())",
          "line": 432,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: Playing next track in playlist.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: Playing next track in playlist.\"",
              "line": 433,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: Playing next track in playlist.\")"
            },
            {
              "type": "CALL",
              "callee_expression": "nextTrack()",
              "callee_name_at_call_site": "nextTrack",
              "callee_resolved_key": "_ZN16ecu_infotainment11MediaPlayer9nextTrackEv",
              "callee_resolved_display_name": "ecu_infotainment::nextTrack",
              "line": 434
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: End of playlist. Repeating from beginning.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: End of playlist. Repeating from beginning.\"",
              "line": 436,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: End of playlist. Repeating from beginning.\")"
            },
            {
              "type": "CALL",
              "callee_expression": "playTrackAtIndex(0)",
              "callee_name_at_call_site": "playTrackAtIndex",
              "callee_resolved_key": "_ZN16ecu_infotainment11MediaPlayer16playTrackAtIndexEi",
              "callee_resolved_display_name": "ecu_infotainment::playTrackAtIndex",
              "line": 437
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MediaPlayer: End of playlist. Stopping playback.",
              "log_arguments": [],
              "message_args_str_combined": "\"MediaPlayer: End of playlist. Stopping playback.\"",
              "line": 439,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MediaPlayer: End of playlist. Stopping playback.\")"
            },
            {
              "type": "CALL",
              "callee_expression": "stop()",
              "callee_name_at_call_site": "stop",
              "callee_resolved_key": "_ZN16ecu_infotainment11MediaPlayer4stopEv",
              "callee_resolved_display_name": "ecu_infotainment::stop",
              "line": 440
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer19simulateTimePassingEv",
      "display_signature": "ecu_infotainment::simulateTimePassing",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 444,
      "end_line": 471,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == PlaybackStatus::PLAYING &&         (current_source_ == MediaSource::USB || current_source_ == MediaSource::BLUETOOTH) &&         current_track_index_ != -1",
          "line": 445,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "elapsed_time.count() > 0 && (elapsed_time - last_logged_elapsed_time >= std::chrono::seconds(30))",
              "line": 454,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "DEBUG",
                  "log_format_string": "MediaPlayer: Track '%s' progress: %llds / %llds.",
                  "log_arguments": [
                    "c_str",
                    "count",
                    "count"
                  ],
                  "message_args_str_combined": "\"MediaPlayer: Track '%s' progress: %llds / %llds.\", c_str, count, count",
                  "line": 455,
                  "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MediaPlayer: Track '%s' progress: %llds / %llds.\",                       current_track.title.c_str(), elapsed_time.count(), current_track.duration.count())"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "elapsed_time >= current_track.duration",
              "line": 461,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "handleTrackEnd()",
                  "callee_name_at_call_site": "handleTrackEnd",
                  "callee_resolved_key": "_ZN16ecu_infotainment11MediaPlayer14handleTrackEndEv",
                  "callee_resolved_display_name": "ecu_infotainment::handleTrackEnd",
                  "line": 462
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "DO_WHILE_LOOP",
              "line": 467,
              "body_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_status_ == PlaybackStatus::PLAYING && current_source_ == MediaSource::AUX",
              "line": 468,
              "then_branch_elements": [
                {
                  "type": "DO_WHILE_LOOP",
                  "line": 469,
                  "body_elements": []
                }
              ],
              "else_branch_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer19reportPlaybackErrorENS_14PlaybackStatusERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
      "display_signature": "ecu_infotainment::reportPlaybackError",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 474,
      "end_line": 479,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "ERROR",
          "log_format_string": "MediaPlayer: Playback Error (%s): %s",
          "log_arguments": [
            "playbackStatusToString",
            "c_str"
          ],
          "message_args_str_combined": "\"MediaPlayer: Playback Error (%s): %s\", playbackStatusToString, c_str",
          "line": 476,
          "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"MediaPlayer: Playback Error (%s): %s\",               playbackStatusToString(error_status), details.c_str())"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment11MediaPlayer19updatePlaybackStateEv",
      "display_signature": "ecu_infotainment::updatePlaybackState",
      "file": "ecu_infotainment/media_player.cpp",
      "line": 481,
      "end_line": 503,
      "execution_elements": [
        {
          "type": "DO_WHILE_LOOP",
          "line": 482,
          "body_elements": []
        },
        {
          "type": "CALL",
          "callee_expression": "simulateTimePassing()",
          "callee_name_at_call_site": "simulateTimePassing",
          "callee_resolved_key": "_ZN16ecu_infotainment11MediaPlayer19simulateTimePassingEv",
          "callee_resolved_display_name": "ecu_infotainment::simulateTimePassing",
          "line": 484
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_source_ == MediaSource::USB && current_status_ != PlaybackStatus::ERROR_SOURCE_UNAVAILABLE",
          "line": 493,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "std::uniform_int_distribution<>(1, 1000)(gen) == 1",
              "line": 497,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "stop()",
                  "callee_name_at_call_site": "stop",
                  "callee_resolved_key": "_ZN16ecu_infotainment11MediaPlayer4stopEv",
                  "callee_resolved_display_name": "ecu_infotainment::stop",
                  "line": 499
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 502,
          "body_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment17gpsStatusToStringENS_15GPSSignalStatusE",
      "display_signature": "ecu_infotainment::gpsStatusToString",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 12,
      "end_line": 21,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 13,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "GPSSignalStatus::NO_FIX",
              "line": 14,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "GPSSignalStatus::FIX_2D",
              "line": 15,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "GPSSignalStatus::FIX_3D",
              "line": 16,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "GPSSignalStatus::LOST_TEMPORARILY",
              "line": 17,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "GPSSignalStatus::FAULTY",
              "line": 18,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 19,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment17navStatusToStringENS_16NavigationStatusE",
      "display_signature": "ecu_infotainment::navStatusToString",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 24,
      "end_line": 35,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 25,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "NavigationStatus::IDLE",
              "line": 26,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "NavigationStatus::ROUTE_CALCULATING",
              "line": 27,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "NavigationStatus::GUIDANCE_ACTIVE",
              "line": 28,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "NavigationStatus::RECALCULATING_ROUTE",
              "line": 29,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "NavigationStatus::DESTINATION_REACHED",
              "line": 30,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "NavigationStatus::ERROR_NO_GPS",
              "line": 31,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "NavigationStatus::ERROR_ROUTE_FAILED",
              "line": 32,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 33,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystemC1Ev",
      "display_signature": "ecu_infotainment::NavigationSystem",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 38,
      "end_line": 61,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Initializing...",
          "log_arguments": [],
          "message_args_str_combined": "\"NavigationSystem: Initializing...\"",
          "line": 45,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Initializing...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "std::uniform_int_distribution<>(1, 10)(gen_local_ctor) > 1",
          "line": 52,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "NavigationSystem: Map data loaded successfully.",
              "log_arguments": [],
              "message_args_str_combined": "\"NavigationSystem: Map data loaded successfully.\"",
              "line": 54,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Map data loaded successfully.\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "NavigationSystem: Failed to load map data! Navigation will be unavailable.",
              "log_arguments": [],
              "message_args_str_combined": "\"NavigationSystem: Failed to load map data! Navigation will be unavailable.\"",
              "line": 57,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"NavigationSystem: Failed to load map data! Navigation will be unavailable.\")"
            }
          ]
        },
        {
          "type": "CALL",
          "callee_expression": "simulateGPSFix()",
          "callee_name_at_call_site": "simulateGPSFix",
          "callee_resolved_key": "_ZN16ecu_infotainment16NavigationSystem14simulateGPSFixEv",
          "callee_resolved_display_name": "ecu_infotainment::NavigationSystem::simulateGPSFix",
          "line": 60
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystemD1Ev",
      "display_signature": "ecu_infotainment::~NavigationSystem",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 63,
      "end_line": 66,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Shutting down. Final NavStatus: %s, GPS: %s",
          "log_arguments": [
            "navStatusToString",
            "gpsStatusToString"
          ],
          "message_args_str_combined": "\"NavigationSystem: Shutting down. Final NavStatus: %s, GPS: %s\", navStatusToString, gpsStatusToString",
          "line": 64,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Shutting down. Final NavStatus: %s, GPS: %s\",              navStatusToString(nav_status_), gpsStatusToString(gps_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem14simulateGPSFixEv",
      "display_signature": "ecu_infotainment::simulateGPSFix",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 68,
      "end_line": 116,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "gps_status_ == GPSSignalStatus::FAULTY",
          "line": 74,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "NavigationSystem: GPS module is FAULTY. Attempting reset (simulated)...",
              "log_arguments": [],
              "message_args_str_combined": "\"NavigationSystem: GPS module is FAULTY. Attempting reset (simulated)...\"",
              "line": 75,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"NavigationSystem: GPS module is FAULTY. Attempting reset (simulated)...\")"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "gps_chance > 90",
              "line": 76,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "NavigationSystem: GPS module fault cleared after reset (simulated). Now NO_FIX.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"NavigationSystem: GPS module fault cleared after reset (simulated). Now NO_FIX.\"",
                  "line": 78,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: GPS module fault cleared after reset (simulated). Now NO_FIX.\")"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "NavigationSystem: GPS module remains FAULTY after reset attempt.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"NavigationSystem: GPS module remains FAULTY after reset attempt.\"",
                  "line": 80,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"NavigationSystem: GPS module remains FAULTY after reset attempt.\")"
                }
              ]
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "gps_chance <= 5",
          "line": 86,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "NavigationSystem: GPS module became FAULTY (simulated hardware issue).",
              "log_arguments": [],
              "message_args_str_combined": "\"NavigationSystem: GPS module became FAULTY (simulated hardware issue).\"",
              "line": 88,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"NavigationSystem: GPS module became FAULTY (simulated hardware issue).\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "gps_chance <= 30",
              "line": 91,
              "then_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "old_status == GPSSignalStatus::NO_FIX || old_status == GPSSignalStatus::LOST_TEMPORARILY",
                  "line": 94,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "old_status == GPSSignalStatus::NO_FIX || old_status == GPSSignalStatus::LOST_TEMPORARILY || old_status == GPSSignalStatus::FIX_2D",
                  "line": 99,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                }
              ]
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "old_status != gps_status_",
          "line": 104,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "NavigationSystem: GPS status changed from %s to %s. Current Location (if fix): %.4f, %.4f",
              "log_arguments": [
                "gpsStatusToString",
                "gpsStatusToString",
                "latitude",
                "longitude"
              ],
              "message_args_str_combined": "\"NavigationSystem: GPS status changed from %s to %s. Current Location (if fix): %.4f, %.4f\", gpsStatusToString, gpsStatusToString, latitude, longitude",
              "line": 105,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: GPS status changed from %s to %s. Current Location (if fix): %.4f, %.4f\",                  gpsStatusToString(old_status), gpsStatusToString(gps_status_), current_location_.latitude, current_location_.longitude)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "DO_WHILE_LOOP",
              "line": 108,
              "body_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "gps_status_ == GPSSignalStatus::NO_FIX || gps_status_ == GPSSignalStatus::FAULTY",
          "line": 111,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "nav_status_ == NavigationStatus::GUIDANCE_ACTIVE || nav_status_ == NavigationStatus::ROUTE_CALCULATING",
              "line": 112,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem22findAddressCoordinatesERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
      "display_signature": "ecu_infotainment::findAddressCoordinates",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 118,
      "end_line": 126,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Looking up address: '%s' (simulated).",
          "log_arguments": [
            "c_str"
          ],
          "message_args_str_combined": "\"NavigationSystem: Looking up address: '%s' (simulated).\", c_str",
          "line": 119,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Looking up address: '%s' (simulated).\", address.c_str())"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "address.find(\"Home\") != std::string::npos",
          "line": 121,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "address.find(\"Work\") != std::string::npos",
          "line": 122,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "address.find(\"Paris\") != std::string::npos",
          "line": 123,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "NavigationSystem: Address '%s' not found in dummy database.",
          "log_arguments": [
            "c_str"
          ],
          "message_args_str_combined": "\"NavigationSystem: Address '%s' not found in dummy database.\", c_str",
          "line": 124,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"NavigationSystem: Address '%s' not found in dummy database.\", address.c_str())"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem14setDestinationERKNS_13MapCoordinateERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
      "display_signature": "ecu_infotainment::setDestination",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 128,
      "end_line": 153,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Set destination request. Name: '%s', Lat: %.4f, Lon: %.4f.",
          "log_arguments": [
            "[complex_arg]",
            "latitude",
            "longitude"
          ],
          "message_args_str_combined": "\"NavigationSystem: Set destination request. Name: '%s', Lat: %.4f, Lon: %.4f.\", [complex_arg], latitude, longitude",
          "line": 129,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Set destination request. Name: '%s', Lat: %.4f, Lon: %.4f.\",              dest_name.empty() ? \"N/A\" : dest_name.c_str(), dest.latitude, dest.longitude)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!map_data_loaded_",
          "line": 132,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!dest.isValid()",
          "line": 136,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "gps_status_ == GPSSignalStatus::NO_FIX || gps_status_ == GPSSignalStatus::FAULTY",
          "line": 140,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "callee_expression": "destination_ = dest",
          "callee_name_at_call_site": "operator=",
          "callee_resolved_key": "_ZN16ecu_infotainment13MapCoordinateaSERKS0_",
          "callee_resolved_display_name": "ecu_infotainment::MapCoordinate::operator=",
          "line": 145
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Destination set to '%s'. Calculating route...",
          "log_arguments": [
            "c_str"
          ],
          "message_args_str_combined": "\"NavigationSystem: Destination set to '%s'. Calculating route...\", c_str",
          "line": 148,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Destination set to '%s'. Calculating route...\", destination_name_.c_str())"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem23setDestinationByAddressERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
      "display_signature": "ecu_infotainment::setDestinationByAddress",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 155,
      "end_line": 163,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Set destination by address request: '%s'.",
          "log_arguments": [
            "c_str"
          ],
          "message_args_str_combined": "\"NavigationSystem: Set destination by address request: '%s'.\", c_str",
          "line": 156,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Set destination by address request: '%s'.\", address.c_str())"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!dest_coord.isValid()",
          "line": 158,
          "then_branch_elements": [],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem16cancelNavigationEv",
      "display_signature": "ecu_infotainment::cancelNavigation",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 165,
      "end_line": 179,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Cancel navigation request.",
          "log_arguments": [],
          "message_args_str_combined": "\"NavigationSystem: Cancel navigation request.\"",
          "line": 166,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Cancel navigation request.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "nav_status_ == NavigationStatus::IDLE || nav_status_ == NavigationStatus::DESTINATION_REACHED",
          "line": 167,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "NavigationSystem: No active navigation to cancel.",
              "log_arguments": [],
              "message_args_str_combined": "\"NavigationSystem: No active navigation to cancel.\"",
              "line": 168,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: No active navigation to cancel.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Navigation cancelled. System is IDLE.",
          "log_arguments": [],
          "message_args_str_combined": "\"NavigationSystem: Navigation cancelled. System is IDLE.\"",
          "line": 177,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Navigation cancelled. System is IDLE.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem14calculateRouteEv",
      "display_signature": "ecu_infotainment::calculateRoute",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 182,
      "end_line": 227,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Calculating route from (%.4f, %.4f) to '%s' (%.4f, %.4f)...",
          "log_arguments": [
            "latitude",
            "longitude",
            "c_str",
            "latitude",
            "longitude"
          ],
          "message_args_str_combined": "\"NavigationSystem: Calculating route from (%.4f, %.4f) to '%s' (%.4f, %.4f)...\", latitude, longitude, c_str, latitude, longitude",
          "line": 183,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Calculating route from (%.4f, %.4f) to '%s' (%.4f, %.4f)...\",              current_location_.latitude, current_location_.longitude,              destination_name_.c_str(), destination_.latitude, destination_.longitude)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "gps_status_ == GPSSignalStatus::NO_FIX || gps_status_ == GPSSignalStatus::FAULTY",
          "line": 194,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_location_.distanceTo(destination_) < 0.1",
          "line": 198,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "NavigationSystem: Already at destination '%s'. No route calculated.",
              "log_arguments": [
                "c_str"
              ],
              "message_args_str_combined": "\"NavigationSystem: Already at destination '%s'. No route calculated.\", c_str",
              "line": 199,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Already at destination '%s'. No route calculated.\", destination_name_.c_str())"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_route_.empty()",
          "line": 211,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "FOR_RANGE_LOOP",
          "line": 221,
          "body_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Route calculated successfully to '%s'. %zu segments. Initial ETA: %llds. Guidance ACTIVE.",
          "log_arguments": [
            "c_str",
            "size",
            "count"
          ],
          "message_args_str_combined": "\"NavigationSystem: Route calculated successfully to '%s'. %zu segments. Initial ETA: %llds. Guidance ACTIVE.\", c_str, size, count",
          "line": 224,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Route calculated successfully to '%s'. %zu segments. Initial ETA: %llds. Guidance ACTIVE.\",              destination_name_.c_str(), current_route_.size(), initial_eta_seconds_.count())"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem21provideGuidanceUpdateEd",
      "display_signature": "ecu_infotainment::provideGuidanceUpdate",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 229,
      "end_line": 249,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_route_segment_index_ < 0 || current_route_segment_index_ >= static_cast<int>(current_route_.size())",
          "line": 230,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "NavigationSystem: Guidance update requested but no valid route segment. Index: %d",
              "log_arguments": [
                "current_route_segment_index_"
              ],
              "message_args_str_combined": "\"NavigationSystem: Guidance update requested but no valid route segment. Index: %d\", current_route_segment_index_",
              "line": 231,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"NavigationSystem: Guidance update requested but no valid route segment. Index: %d\", current_route_segment_index_)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "NavigationSystem: Guidance: %s. Next maneuver in %.1f km. Dist to Dest: %.1f km. ETA: %llds.",
          "log_arguments": [
            "c_str",
            "dist_to_maneuver",
            "getDistanceToDestinationKm",
            "count"
          ],
          "message_args_str_combined": "\"NavigationSystem: Guidance: %s. Next maneuver in %.1f km. Dist to Dest: %.1f km. ETA: %llds.\", c_str, dist_to_maneuver, getDistanceToDestinationKm, count",
          "line": 238,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Guidance: %s. Next maneuver in %.1f km. Dist to Dest: %.1f km. ETA: %llds.\",              current_segment.instruction.c_str(),              dist_to_maneuver,              getDistanceToDestinationKm(),              getEstimatedTimeOfArrivalSeconds().count())"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "dist_to_maneuver < 0.05 && speed_kmh > 1.0",
          "line": 245,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "NavigationSystem: Approaching maneuver for segment: '%s'.",
              "log_arguments": [
                "c_str"
              ],
              "message_args_str_combined": "\"NavigationSystem: Approaching maneuver for segment: '%s'.\", c_str",
              "line": 246,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Approaching maneuver for segment: '%s'.\", current_segment.instruction.c_str())"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem13checkOffRouteEd",
      "display_signature": "ecu_infotainment::checkOffRoute",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 251,
      "end_line": 264,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_route_.empty() || current_route_segment_index_ < 0",
          "line": 252,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "dist_from_expected_track > 0.5 && speed_kmh > 5.0",
          "line": 259,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "NavigationSystem: OFF ROUTE detected! Distance from track: %.2f km. Recalculating...",
              "log_arguments": [
                "dist_from_expected_track"
              ],
              "message_args_str_combined": "\"NavigationSystem: OFF ROUTE detected! Distance from track: %.2f km. Recalculating...\", dist_from_expected_track",
              "line": 260,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"NavigationSystem: OFF ROUTE detected! Distance from track: %.2f km. Recalculating...\", dist_from_expected_track)"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem22simulateLocationUpdateEddNSt6chrono8durationIlSt5ratioILl1ELl1EEEE",
      "display_signature": "ecu_infotainment::simulateLocationUpdate",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 266,
      "end_line": 315,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "gps_status_ != GPSSignalStatus::FIX_2D && gps_status_ != GPSSignalStatus::FIX_3D",
          "line": 267,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "NavigationSystem: No GPS fix, cannot simulate location update meaningfully.",
              "log_arguments": [],
              "message_args_str_combined": "\"NavigationSystem: No GPS fix, cannot simulate location update meaningfully.\"",
              "line": 268,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: No GPS fix, cannot simulate location update meaningfully.\")"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "gps_status_ != GPSSignalStatus::FAULTY && gps_status_ != GPSSignalStatus::NO_FIX",
              "line": 270,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "NavigationSystem: GPS signal temporarily lost. Location updates based on dead reckoning (simulated).",
                  "log_arguments": [],
                  "message_args_str_combined": "\"NavigationSystem: GPS signal temporarily lost. Location updates based on dead reckoning (simulated).\"",
                  "line": 272,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"NavigationSystem: GPS signal temporarily lost. Location updates based on dead reckoning (simulated).\")"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "time_delta_s.count() == 0",
          "line": 277,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "std::fabs(std::cos(current_location_.latitude * (M_PI / 180.0))) > 0.001",
          "line": 284,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 292,
          "body_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "nav_status_ == NavigationStatus::GUIDANCE_ACTIVE && !current_route_.empty()",
          "line": 295,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_segment.distance_km <= 0.0",
              "line": 300,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "NavigationSystem: Maneuver '%s' completed.",
                  "log_arguments": [
                    "c_str"
                  ],
                  "message_args_str_combined": "\"NavigationSystem: Maneuver '%s' completed.\", c_str",
                  "line": 301,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Maneuver '%s' completed.\", current_segment.instruction.c_str())"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "current_route_segment_index_ >= static_cast<int>(current_route_.size())",
                  "line": 303,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "NavigationSystem: DESTINATION '%s' REACHED!",
                      "log_arguments": [
                        "c_str"
                      ],
                      "message_args_str_combined": "\"NavigationSystem: DESTINATION '%s' REACHED!\", c_str",
                      "line": 304,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: DESTINATION '%s' REACHED!\", destination_name_.c_str())"
                    }
                  ],
                  "else_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "NavigationSystem: Proceeding to next segment: '%s'.",
                      "log_arguments": [
                        "c_str"
                      ],
                      "message_args_str_combined": "\"NavigationSystem: Proceeding to next segment: '%s'.\", c_str",
                      "line": 309,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Proceeding to next segment: '%s'.\", current_route_[current_route_segment_index_].instruction.c_str())"
                    }
                  ]
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem21updateNavigationStateERK12VehicleState",
      "display_signature": "ecu_infotainment::updateNavigationState",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 318,
      "end_line": 382,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "NavigationSystem: Updating navigation state. NavStatus: %s, GPS: %s, Speed: %.1f km/h",
          "log_arguments": [
            "navStatusToString",
            "gpsStatusToString",
            "speed_kmh"
          ],
          "message_args_str_combined": "\"NavigationSystem: Updating navigation state. NavStatus: %s, GPS: %s, Speed: %.1f km/h\", navStatusToString, gpsStatusToString, speed_kmh",
          "line": 319,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: Updating navigation state. NavStatus: %s, GPS: %s, Speed: %.1f km/h\",               navStatusToString(nav_status_), gpsStatusToString(gps_status_), vehicle_state.speed_kmh)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "std::uniform_int_distribution<>(1, 20)(gen_nav_static_generator) == 1",
          "line": 328,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "simulateGPSFix()",
              "callee_name_at_call_site": "simulateGPSFix",
              "callee_resolved_key": "_ZN16ecu_infotainment16NavigationSystem14simulateGPSFixEv",
              "callee_resolved_display_name": "ecu_infotainment::simulateGPSFix",
              "line": 329
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "vehicle_state.speed_kmh > 1.0",
          "line": 335,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_heading_deg > 360.0",
              "line": 338,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_heading_deg < 0.0",
              "line": 339,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "CALL",
              "callee_expression": "simulateLocationUpdate(vehicle_state.speed_kmh, current_heading_deg, time_delta)",
              "callee_name_at_call_site": "simulateLocationUpdate",
              "callee_resolved_key": "_ZN16ecu_infotainment16NavigationSystem22simulateLocationUpdateEddNSt6chrono8durationIlSt5ratioILl1ELl1EEEE",
              "callee_resolved_display_name": "ecu_infotainment::simulateLocationUpdate",
              "line": 341
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "nav_status_ == NavigationStatus::ROUTE_CALCULATING",
          "line": 346,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "!map_data_loaded_",
              "line": 347,
              "then_branch_elements": [],
              "else_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "calculateRoute()",
                  "callee_name_at_call_site": "calculateRoute",
                  "callee_resolved_key": "_ZN16ecu_infotainment16NavigationSystem14calculateRouteEv",
                  "callee_resolved_display_name": "ecu_infotainment::calculateRoute",
                  "line": 352
                }
              ]
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "NavigationSystem: Attempting to recalculate route due to off-route condition.",
              "log_arguments": [],
              "message_args_str_combined": "\"NavigationSystem: Attempting to recalculate route due to off-route condition.\"",
              "line": 357,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Attempting to recalculate route due to off-route condition.\")"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "calculateRoute()",
              "line": 358,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "NavigationSystem: Route successfully recalculated.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"NavigationSystem: Route successfully recalculated.\"",
                  "line": 359,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Route successfully recalculated.\")"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "NavigationSystem: Failed to recalculate route. Check GPS and map data.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"NavigationSystem: Failed to recalculate route. Check GPS and map data.\"",
                  "line": 361,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"NavigationSystem: Failed to recalculate route. Check GPS and map data.\")"
                }
              ]
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "nav_status_ == NavigationStatus::GUIDANCE_ACTIVE",
              "line": 366,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "provideGuidanceUpdate(vehicle_state.speed_kmh)",
                  "callee_name_at_call_site": "provideGuidanceUpdate",
                  "callee_resolved_key": "_ZN16ecu_infotainment16NavigationSystem21provideGuidanceUpdateEd",
                  "callee_resolved_display_name": "ecu_infotainment::provideGuidanceUpdate",
                  "line": 367
                },
                {
                  "type": "CALL",
                  "callee_expression": "checkOffRoute(vehicle_state.speed_kmh)",
                  "callee_name_at_call_site": "checkOffRoute",
                  "callee_resolved_key": "_ZN16ecu_infotainment16NavigationSystem13checkOffRouteEd",
                  "callee_resolved_display_name": "ecu_infotainment::checkOffRoute",
                  "line": 368
                }
              ],
              "else_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "cycles_at_dest > 10",
                  "line": 374,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "NavigationSystem: Destination reached for some time. Clearing route.",
                      "log_arguments": [],
                      "message_args_str_combined": "\"NavigationSystem: Destination reached for some time. Clearing route.\"",
                      "line": 375,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"NavigationSystem: Destination reached for some time. Clearing route.\")"
                    },
                    {
                      "type": "CALL",
                      "callee_expression": "cancelNavigation()",
                      "callee_name_at_call_site": "cancelNavigation",
                      "callee_resolved_key": "_ZN16ecu_infotainment16NavigationSystem16cancelNavigationEv",
                      "callee_resolved_display_name": "ecu_infotainment::cancelNavigation",
                      "line": 376
                    }
                  ],
                  "else_branch_elements": []
                }
              ]
            }
          ]
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "NavigationSystem: Navigation state update cycle complete. NavStatus: %s",
          "log_arguments": [
            "navStatusToString"
          ],
          "message_args_str_combined": "\"NavigationSystem: Navigation state update cycle complete. NavStatus: %s\", navStatusToString",
          "line": 381,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: Navigation state update cycle complete. NavStatus: %s\", navStatusToString(nav_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment16NavigationSystem26getCurrentNavigationStatusEv",
      "display_signature": "ecu_infotainment::getCurrentNavigationStatus",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 385,
      "end_line": 388,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "NavigationSystem: getCurrentNavigationStatus() -> %s",
          "log_arguments": [
            "navStatusToString"
          ],
          "message_args_str_combined": "\"NavigationSystem: getCurrentNavigationStatus() -> %s\", navStatusToString",
          "line": 386,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: getCurrentNavigationStatus() -> %s\", navStatusToString(nav_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment16NavigationSystem29getCurrentGuidanceInstructionEv",
      "display_signature": "ecu_infotainment::getCurrentGuidanceInstruction",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 390,
      "end_line": 400,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "nav_status_ == NavigationStatus::GUIDANCE_ACTIVE &&         current_route_segment_index_ >= 0 &&         current_route_segment_index_ < static_cast<int>(current_route_.size())",
          "line": 391,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "NavigationSystem: getCurrentGuidanceInstruction() -> '%s' (%.1f km)",
              "log_arguments": [
                "c_str",
                "distance_km"
              ],
              "message_args_str_combined": "\"NavigationSystem: getCurrentGuidanceInstruction() -> '%s' (%.1f km)\", c_str, distance_km",
              "line": 395,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: getCurrentGuidanceInstruction() -> '%s' (%.1f km)\", seg.instruction.c_str(), seg.distance_km)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "NavigationSystem: getCurrentGuidanceInstruction() -> No active guidance.",
          "log_arguments": [],
          "message_args_str_combined": "\"NavigationSystem: getCurrentGuidanceInstruction() -> No active guidance.\"",
          "line": 398,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: getCurrentGuidanceInstruction() -> No active guidance.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment16NavigationSystem27getDistanceToNextManeuverKmEv",
      "display_signature": "ecu_infotainment::getDistanceToNextManeuverKm",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 402,
      "end_line": 412,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "nav_status_ == NavigationStatus::GUIDANCE_ACTIVE &&         current_route_segment_index_ >= 0 &&         current_route_segment_index_ < static_cast<int>(current_route_.size())",
          "line": 403,
          "then_branch_elements": [
            {
              "type": "DO_WHILE_LOOP",
              "line": 408,
              "body_elements": []
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment16NavigationSystem26getDistanceToDestinationKmEv",
      "display_signature": "ecu_infotainment::getDistanceToDestinationKm",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 414,
      "end_line": 432,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "nav_status_ == NavigationStatus::GUIDANCE_ACTIVE && !current_route_.empty()",
          "line": 415,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_route_segment_index_ >= 0 && current_route_segment_index_ < static_cast<int>(current_route_.size())",
              "line": 418,
              "then_branch_elements": [
                {
                  "type": "FOR_LOOP",
                  "line": 420,
                  "body_elements": []
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "DO_WHILE_LOOP",
              "line": 424,
              "body_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "destination_.isValid() && current_location_.isValid()",
          "line": 428,
          "then_branch_elements": [],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment16NavigationSystem32getEstimatedTimeOfArrivalSecondsEv",
      "display_signature": "ecu_infotainment::getEstimatedTimeOfArrivalSeconds",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 434,
      "end_line": 445,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "nav_status_ == NavigationStatus::GUIDANCE_ACTIVE",
          "line": 435,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_eta.count() < 0",
              "line": 440,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "DO_WHILE_LOOP",
              "line": 441,
              "body_elements": []
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment16NavigationSystem18getGPSSignalStatusEv",
      "display_signature": "ecu_infotainment::getGPSSignalStatus",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 447,
      "end_line": 450,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "NavigationSystem: getGPSSignalStatus() -> %s",
          "log_arguments": [
            "gpsStatusToString"
          ],
          "message_args_str_combined": "\"NavigationSystem: getGPSSignalStatus() -> %s\", gpsStatusToString",
          "line": 448,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: getGPSSignalStatus() -> %s\", gpsStatusToString(gps_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment16NavigationSystem18getCurrentLocationEv",
      "display_signature": "ecu_infotainment::getCurrentLocation",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 452,
      "end_line": 456,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "NavigationSystem: getCurrentLocation() -> Lat: %.4f, Lon: %.4f (%s)",
          "log_arguments": [
            "latitude",
            "longitude",
            "gpsStatusToString"
          ],
          "message_args_str_combined": "\"NavigationSystem: getCurrentLocation() -> Lat: %.4f, Lon: %.4f (%s)\", latitude, longitude, gpsStatusToString",
          "line": 453,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: getCurrentLocation() -> Lat: %.4f, Lon: %.4f (%s)\",               current_location_.latitude, current_location_.longitude, gpsStatusToString(gps_status_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment16NavigationSystem18isMapDataAvailableEv",
      "display_signature": "ecu_infotainment::isMapDataAvailable",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 458,
      "end_line": 461,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "NavigationSystem: isMapDataAvailable() -> %s",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"NavigationSystem: isMapDataAvailable() -> %s\", [complex_arg]",
          "line": 459,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"NavigationSystem: isMapDataAvailable() -> %s\", map_data_loaded_ ? \"YES\" : \"NO\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16ecu_infotainment16NavigationSystem21reportNavigationErrorENS_16NavigationStatusERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
      "display_signature": "ecu_infotainment::reportNavigationError",
      "file": "ecu_infotainment/navigation_system.cpp",
      "line": 463,
      "end_line": 470,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "ERROR",
          "log_format_string": "NavigationSystem: Navigation Error (%s): %s",
          "log_arguments": [
            "navStatusToString",
            "c_str"
          ],
          "message_args_str_combined": "\"NavigationSystem: Navigation Error (%s): %s\", navStatusToString, c_str",
          "line": 465,
          "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"NavigationSystem: Navigation Error (%s): %s\",               navStatusToString(error_status), details.c_str())"
        }
      ]
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment13MapCoordinate7isValidEv",
      "display_signature": "ecu_infotainment::MapCoordinate::isValid",
      "file": "ecu_infotainment/navigation_system.h",
      "line": 21,
      "end_line": 24,
      "execution_elements": []
    },
    {
      "function_id_key": "_ZNK16ecu_infotainment13MapCoordinate10distanceToERKS0_",
      "display_signature": "ecu_infotainment::MapCoordinate::distanceTo",
      "file": "ecu_infotainment/navigation_system.h",
      "line": 26,
      "end_line": 31,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "!isValid() || !other.isValid()",
          "line": 27,
          "then_branch_elements": [],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN20ecu_power_management12PowerMonitorC1Ev",
      "display_signature": "ecu_power_management::PowerMonitor",
      "file": "ecu_power_management/power_monitor.cpp",
      "line": 9,
      "end_line": 16,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "PowerMonitor: Initializing. Battery Voltage: %.2fV. System Stable: %s",
          "log_arguments": [
            "current_battery_voltage_V_",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"PowerMonitor: Initializing. Battery Voltage: %.2fV. System Stable: %s\", current_battery_voltage_V_, [complex_arg]",
          "line": 14,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"PowerMonitor: Initializing. Battery Voltage: %.2fV. System Stable: %s\",              current_battery_voltage_V_, system_stable_ ? \"true\" : \"false\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN20ecu_power_management12PowerMonitorD1Ev",
      "display_signature": "ecu_power_management::~PowerMonitor",
      "file": "ecu_power_management/power_monitor.cpp",
      "line": 18,
      "end_line": 20,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "PowerMonitor: Shutting down. Final Battery Voltage: %.2fV",
          "log_arguments": [
            "current_battery_voltage_V_"
          ],
          "message_args_str_combined": "\"PowerMonitor: Shutting down. Final Battery Voltage: %.2fV\", current_battery_voltage_V_",
          "line": 19,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"PowerMonitor: Shutting down. Final Battery Voltage: %.2fV\", current_battery_voltage_V_)"
        }
      ]
    },
    {
      "function_id_key": "_ZNK20ecu_power_management12PowerMonitor13isPowerStableEv",
      "display_signature": "ecu_power_management::isPowerStable",
      "file": "ecu_power_management/power_monitor.cpp",
      "line": 22,
      "end_line": 29,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "PowerMonitor: isPowerStable() called. Current stability: %s",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"PowerMonitor: isPowerStable() called. Current stability: %s\", [complex_arg]",
          "line": 24,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"PowerMonitor: isPowerStable() called. Current stability: %s\", system_stable_ ? \"true\" : \"false\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!system_stable_",
          "line": 25,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "PowerMonitor: Reporting system power as UNSTABLE.",
              "log_arguments": [],
              "message_args_str_combined": "\"PowerMonitor: Reporting system power as UNSTABLE.\"",
              "line": 26,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"PowerMonitor: Reporting system power as UNSTABLE.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZNK20ecu_power_management12PowerMonitor17getBatteryVoltageEv",
      "display_signature": "ecu_power_management::getBatteryVoltage",
      "file": "ecu_power_management/power_monitor.cpp",
      "line": 31,
      "end_line": 34,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "PowerMonitor: getBatteryVoltage() called. Voltage: %.2fV",
          "log_arguments": [
            "current_battery_voltage_V_"
          ],
          "message_args_str_combined": "\"PowerMonitor: getBatteryVoltage() called. Voltage: %.2fV\", current_battery_voltage_V_",
          "line": 32,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"PowerMonitor: getBatteryVoltage() called. Voltage: %.2fV\", current_battery_voltage_V_)"
        }
      ]
    },
    {
      "function_id_key": "_ZN20ecu_power_management12PowerMonitor18checkVoltageLevelsEv",
      "display_signature": "ecu_power_management::checkVoltageLevels",
      "file": "ecu_power_management/power_monitor.cpp",
      "line": 36,
      "end_line": 59,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "PowerMonitor: Checking voltage levels. Current: %.2fV",
          "log_arguments": [
            "current_battery_voltage_V_"
          ],
          "message_args_str_combined": "\"PowerMonitor: Checking voltage levels. Current: %.2fV\", current_battery_voltage_V_",
          "line": 37,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"PowerMonitor: Checking voltage levels. Current: %.2fV\", current_battery_voltage_V_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_battery_voltage_V_ > 14.8",
          "line": 46,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_battery_voltage_V_ < 9.0",
          "line": 47,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_battery_voltage_V_ < 10.5",
          "line": 49,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "PowerMonitor: Battery voltage critically low: %.2fV!",
              "log_arguments": [
                "current_battery_voltage_V_"
              ],
              "message_args_str_combined": "\"PowerMonitor: Battery voltage critically low: %.2fV!\", current_battery_voltage_V_",
              "line": 50,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"PowerMonitor: Battery voltage critically low: %.2fV!\", current_battery_voltage_V_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "PowerMonitor: Battery voltage low: %.2fV. Consider charging.",
              "log_arguments": [
                "current_battery_voltage_V_"
              ],
              "message_args_str_combined": "\"PowerMonitor: Battery voltage low: %.2fV. Consider charging.\", current_battery_voltage_V_",
              "line": 53,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"PowerMonitor: Battery voltage low: %.2fV. Consider charging.\", current_battery_voltage_V_)"
            },
            {
              "type": "DO_WHILE_LOOP",
              "line": 56,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN20ecu_power_management12PowerMonitor21assessSystemStabilityEv",
      "display_signature": "ecu_power_management::assessSystemStability",
      "file": "ecu_power_management/power_monitor.cpp",
      "line": 61,
      "end_line": 78,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "PowerMonitor: Assessing overall system stability.",
          "log_arguments": [],
          "message_args_str_combined": "\"PowerMonitor: Assessing overall system stability.\"",
          "line": 62,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"PowerMonitor: Assessing overall system stability.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "critical_load_events_count_ > 2",
          "line": 64,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "PowerMonitor: Multiple consecutive high load events detected. System declared UNSTABLE.",
              "log_arguments": [],
              "message_args_str_combined": "\"PowerMonitor: Multiple consecutive high load events detected. System declared UNSTABLE.\"",
              "line": 65,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"PowerMonitor: Multiple consecutive high load events detected. System declared UNSTABLE.\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "PowerMonitor: System unstable due to critically low voltage (%.2fV).",
              "log_arguments": [
                "current_battery_voltage_V_"
              ],
              "message_args_str_combined": "\"PowerMonitor: System unstable due to critically low voltage (%.2fV).\", current_battery_voltage_V_",
              "line": 69,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"PowerMonitor: System unstable due to critically low voltage (%.2fV).\", current_battery_voltage_V_)"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "!system_stable_ && current_battery_voltage_V_ >= 11.8",
              "line": 73,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "PowerMonitor: System stability RESTORED. Voltage: %.2fV",
                  "log_arguments": [
                    "current_battery_voltage_V_"
                  ],
                  "message_args_str_combined": "\"PowerMonitor: System stability RESTORED. Voltage: %.2fV\", current_battery_voltage_V_",
                  "line": 74,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"PowerMonitor: System stability RESTORED. Voltage: %.2fV\", current_battery_voltage_V_)"
                }
              ],
              "else_branch_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN20ecu_power_management12PowerMonitor17updatePowerStatusEv",
      "display_signature": "ecu_power_management::updatePowerStatus",
      "file": "ecu_power_management/power_monitor.cpp",
      "line": 80,
      "end_line": 95,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "PowerMonitor: Updating power status cycle.",
          "log_arguments": [],
          "message_args_str_combined": "\"PowerMonitor: Updating power status cycle.\"",
          "line": 81,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"PowerMonitor: Updating power status cycle.\")"
        },
        {
          "type": "CALL",
          "callee_expression": "checkVoltageLevels()",
          "callee_name_at_call_site": "checkVoltageLevels",
          "callee_resolved_key": "_ZN20ecu_power_management12PowerMonitor18checkVoltageLevelsEv",
          "callee_resolved_display_name": "ecu_power_management::checkVoltageLevels",
          "line": 82
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "PowerMonitor: Performing peripheral power checks (simulated).",
          "log_arguments": [],
          "message_args_str_combined": "\"PowerMonitor: Performing peripheral power checks (simulated).\"",
          "line": 86,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"PowerMonitor: Performing peripheral power checks (simulated).\")"
        },
        {
          "type": "CALL",
          "callee_expression": "assessSystemStability()",
          "callee_name_at_call_site": "assessSystemStability",
          "callee_resolved_key": "_ZN20ecu_power_management12PowerMonitor21assessSystemStabilityEv",
          "callee_resolved_display_name": "ecu_power_management::assessSystemStability",
          "line": 88
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "system_stable_",
          "line": 90,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "PowerMonitor: Power status update complete. System is STABLE. Voltage: %.2fV",
              "log_arguments": [
                "current_battery_voltage_V_"
              ],
              "message_args_str_combined": "\"PowerMonitor: Power status update complete. System is STABLE. Voltage: %.2fV\", current_battery_voltage_V_",
              "line": 91,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"PowerMonitor: Power status update complete. System is STABLE. Voltage: %.2fV\", current_battery_voltage_V_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "PowerMonitor: Power status update complete. System is UNSTABLE. Voltage: %.2fV",
              "log_arguments": [
                "current_battery_voltage_V_"
              ],
              "message_args_str_combined": "\"PowerMonitor: Power status update complete. System is UNSTABLE. Voltage: %.2fV\", current_battery_voltage_V_",
              "line": 93,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"PowerMonitor: Power status update complete. System is UNSTABLE. Voltage: %.2fV\", current_battery_voltage_V_)"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN20ecu_power_management12PowerMonitor21simulateHighLoadEventEb",
      "display_signature": "ecu_power_management::simulateHighLoadEvent",
      "file": "ecu_power_management/power_monitor.cpp",
      "line": 97,
      "end_line": 115,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "start_event",
          "line": 98,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "PowerMonitor: High electrical load event STARTED (e.g., AC compressor, multiple window motors).",
              "log_arguments": [],
              "message_args_str_combined": "\"PowerMonitor: High electrical load event STARTED (e.g., AC compressor, multiple window motors).\"",
              "line": 99,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"PowerMonitor: High electrical load event STARTED (e.g., AC compressor, multiple window motors).\")"
            },
            {
              "type": "CALL",
              "callee_expression": "checkVoltageLevels()",
              "callee_name_at_call_site": "checkVoltageLevels",
              "callee_resolved_key": "_ZN20ecu_power_management12PowerMonitor18checkVoltageLevelsEv",
              "callee_resolved_display_name": "ecu_power_management::checkVoltageLevels",
              "line": 102
            },
            {
              "type": "CALL",
              "callee_expression": "assessSystemStability()",
              "callee_name_at_call_site": "assessSystemStability",
              "callee_resolved_key": "_ZN20ecu_power_management12PowerMonitor21assessSystemStabilityEv",
              "callee_resolved_display_name": "ecu_power_management::assessSystemStability",
              "line": 103
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "!system_stable_",
              "line": 104,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "PowerMonitor: System became UNSTABLE during high load event!",
                  "log_arguments": [],
                  "message_args_str_combined": "\"PowerMonitor: System became UNSTABLE during high load event!\"",
                  "line": 105,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"PowerMonitor: System became UNSTABLE during high load event!\")"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "PowerMonitor: High electrical load event ENDED.",
              "log_arguments": [],
              "message_args_str_combined": "\"PowerMonitor: High electrical load event ENDED.\"",
              "line": 108,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"PowerMonitor: High electrical load event ENDED.\")"
            },
            {
              "type": "CALL",
              "callee_expression": "checkVoltageLevels()",
              "callee_name_at_call_site": "checkVoltageLevels",
              "callee_resolved_key": "_ZN20ecu_power_management12PowerMonitor18checkVoltageLevelsEv",
              "callee_resolved_display_name": "ecu_power_management::checkVoltageLevels",
              "line": 112
            },
            {
              "type": "CALL",
              "callee_expression": "assessSystemStability()",
              "callee_name_at_call_site": "assessSystemStability",
              "callee_resolved_key": "_ZN20ecu_power_management12PowerMonitor21assessSystemStabilityEv",
              "callee_resolved_display_name": "ecu_power_management::assessSystemStability",
              "line": 113
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManagerC1Ev",
      "display_signature": "ecu_powertrain_control::EngineManager",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 19,
      "end_line": 33,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Initializing. Engine status: STOPPED.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Initializing. Engine status: STOPPED.\"",
          "line": 27,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Initializing. Engine status: STOPPED.\")"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: PowerMonitor service acquired.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: PowerMonitor service acquired.\"",
          "line": 32,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: PowerMonitor service acquired.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManagerD1Ev",
      "display_signature": "ecu_powertrain_control::~EngineManager",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 35,
      "end_line": 43,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Shutting down. Current RPM: %d",
          "log_arguments": [
            "current_rpm_"
          ],
          "message_args_str_combined": "\"EngineManager: Shutting down. Current RPM: %d\", current_rpm_",
          "line": 36,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Shutting down. Current RPM: %d\", current_rpm_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == EngineStatus::RUNNING",
          "line": 37,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "EngineManager: Engine was still running during shutdown. Forcing stop.",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: Engine was still running during shutdown. Forcing stop.\"",
              "line": 38,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Engine was still running during shutdown. Forcing stop.\")"
            },
            {
              "type": "CALL",
              "callee_expression": "stopEngine()",
              "callee_name_at_call_site": "stopEngine",
              "callee_resolved_key": "_ZN22ecu_powertrain_control13EngineManager10stopEngineEv",
              "callee_resolved_display_name": "ecu_powertrain_control::EngineManager::stopEngine",
              "line": 39
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: PowerMonitor service released.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: PowerMonitor service released.\"",
          "line": 42,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: PowerMonitor service released.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManager16checkSystemPowerEv",
      "display_signature": "ecu_powertrain_control::checkSystemPower",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 45,
      "end_line": 59,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Checking system power status via PowerMonitor service.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Checking system power status via PowerMonitor service.\"",
          "line": 46,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Checking system power status via PowerMonitor service.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!power_monitor_service_",
          "line": 47,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "EngineManager: PowerMonitor service not available!",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: PowerMonitor service not available!\"",
              "line": 48,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"EngineManager: PowerMonitor service not available!\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "power_ok",
          "line": 53,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "EngineManager: System power is stable.",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: System power is stable.\"",
              "line": 54,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: System power is stable.\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "EngineManager: System power is UNSTABLE. This might affect engine operations.",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: System power is UNSTABLE. This might affect engine operations.\"",
              "line": 56,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: System power is UNSTABLE. This might affect engine operations.\")"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManager23performIgnitionSequenceEv",
      "display_signature": "ecu_powertrain_control::performIgnitionSequence",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 62,
      "end_line": 92,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Starting ignition sequence.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Starting ignition sequence.\"",
          "line": 63,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Starting ignition sequence.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!fuel_system_.checkFuelPressure()",
          "line": 66,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "EngineManager: Ignition aborted. Low fuel pressure.",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: Ignition aborted. Low fuel pressure.\"",
              "line": 67,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"EngineManager: Ignition aborted. Low fuel pressure.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: Fuel pressure OK for ignition.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Fuel pressure OK for ignition.\"",
          "line": 71,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Fuel pressure OK for ignition.\")"
        },
        {
          "type": "FOR_LOOP",
          "line": 73,
          "body_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "EngineManager: Ignition attempt %d...",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"EngineManager: Ignition attempt %d...\", [complex_arg]",
              "line": 74,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Ignition attempt %d...\", i + 1)"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_rpm_ > 250",
              "line": 78,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "EngineManager: Engine crank detected. RPM: %d",
                  "log_arguments": [
                    "current_rpm_"
                  ],
                  "message_args_str_combined": "\"EngineManager: Engine crank detected. RPM: %d\", current_rpm_",
                  "line": 79,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Engine crank detected. RPM: %d\", current_rpm_)"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "fuel_system_.injectFuel(1, 5.0)",
                  "line": 80,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "EngineManager: Initial fuel injected. Engine should start.",
                      "log_arguments": [],
                      "message_args_str_combined": "\"EngineManager: Initial fuel injected. Engine should start.\"",
                      "line": 81,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Initial fuel injected. Engine should start.\")"
                    }
                  ],
                  "else_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "WARNING",
                      "log_format_string": "EngineManager: Initial fuel injection failed during ignition. Attempt %d",
                      "log_arguments": [
                        "[complex_arg]"
                      ],
                      "message_args_str_combined": "\"EngineManager: Initial fuel injection failed during ignition. Attempt %d\", [complex_arg]",
                      "line": 84,
                      "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Initial fuel injection failed during ignition. Attempt %d\", i+1)"
                    }
                  ]
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "LOG",
          "level": "ERROR",
          "log_format_string": "EngineManager: Ignition sequence failed after 3 attempts.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Ignition sequence failed after 3 attempts.\"",
          "line": 88,
          "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"EngineManager: Ignition sequence failed after 3 attempts.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManager16checkOilPressureEv",
      "display_signature": "ecu_powertrain_control::checkOilPressure",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 94,
      "end_line": 104,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: Checking oil pressure.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Checking oil pressure.\"",
          "line": 95,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Checking oil pressure.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!oil_ok",
          "line": 98,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "EngineManager: Low oil pressure detected!",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: Low oil pressure detected!\"",
              "line": 99,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Low oil pressure detected!\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "DO_WHILE_LOOP",
              "line": 101,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManager11startEngineEv",
      "display_signature": "ecu_powertrain_control::startEngine",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 106,
      "end_line": 154,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Received start engine request.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Received start engine request.\"",
          "line": 107,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Received start engine request.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == EngineStatus::RUNNING",
          "line": 108,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "EngineManager: Engine is already running. RPM: %d",
              "log_arguments": [
                "current_rpm_"
              ],
              "message_args_str_combined": "\"EngineManager: Engine is already running. RPM: %d\", current_rpm_",
              "line": 109,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Engine is already running. RPM: %d\", current_rpm_)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == EngineStatus::STARTING",
          "line": 112,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "EngineManager: Engine is already in starting sequence.",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: Engine is already in starting sequence.\"",
              "line": 113,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Engine is already in starting sequence.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: Current engine temperature: %.1f C",
          "log_arguments": [
            "engine_temperature_celsius_"
          ],
          "message_args_str_combined": "\"EngineManager: Current engine temperature: %.1f C\", engine_temperature_celsius_",
          "line": 117,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Current engine temperature: %.1f C\", engine_temperature_celsius_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_temperature_celsius_ > 110.0",
          "line": 118,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "EngineManager: Cannot start engine. Overheated! Temp: %.1f C",
              "log_arguments": [
                "engine_temperature_celsius_"
              ],
              "message_args_str_combined": "\"EngineManager: Cannot start engine. Overheated! Temp: %.1f C\", engine_temperature_celsius_",
              "line": 119,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"EngineManager: Cannot start engine. Overheated! Temp: %.1f C\", engine_temperature_celsius_)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!checkSystemPower()",
          "line": 126,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "EngineManager: Cannot start engine due to system power issues.",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: Cannot start engine due to system power issues.\"",
              "line": 127,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"EngineManager: Cannot start engine due to system power issues.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "callee_expression": "fuel_system_.primePump()",
          "callee_name_at_call_site": "primePump",
          "callee_resolved_key": "_ZN22ecu_powertrain_control10FuelSystem9primePumpEv",
          "callee_resolved_display_name": "ecu_powertrain_control::FuelSystem::primePump",
          "line": 132
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "performIgnitionSequence()",
          "line": 134,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "EngineManager: Engine started successfully. Idling at %d RPM.",
              "log_arguments": [
                "current_rpm_"
              ],
              "message_args_str_combined": "\"EngineManager: Engine started successfully. Idling at %d RPM.\", current_rpm_",
              "line": 138,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Engine started successfully. Idling at %d RPM.\", current_rpm_)"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "!checkOilPressure()",
              "line": 141,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "EngineManager: Engine started but low oil pressure detected! Risk of damage.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"EngineManager: Engine started but low oil pressure detected! Risk of damage.\"",
                  "line": 142,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"EngineManager: Engine started but low oil pressure detected! Risk of damage.\")"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "EngineManager: Failed to start engine.",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: Failed to start engine.\"",
              "line": 150,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"EngineManager: Failed to start engine.\")"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManager10stopEngineEv",
      "display_signature": "ecu_powertrain_control::stopEngine",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 156,
      "end_line": 188,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Received stop engine request.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Received stop engine request.\"",
          "line": 157,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Received stop engine request.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == EngineStatus::STOPPED",
          "line": 158,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "EngineManager: Engine is already stopped.",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: Engine is already stopped.\"",
              "line": 159,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Engine is already stopped.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == EngineStatus::STOPPING",
          "line": 162,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "EngineManager: Engine is already in stopping sequence.",
              "log_arguments": [],
              "message_args_str_combined": "\"EngineManager: Engine is already in stopping sequence.\"",
              "line": 163,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Engine is already in stopping sequence.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Initiating engine shutdown sequence. Current RPM: %d",
          "log_arguments": [
            "current_rpm_"
          ],
          "message_args_str_combined": "\"EngineManager: Initiating engine shutdown sequence. Current RPM: %d\", current_rpm_",
          "line": 168,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Initiating engine shutdown sequence. Current RPM: %d\", current_rpm_)"
        },
        {
          "type": "FOR_LOOP",
          "line": 173,
          "body_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_rpm_ < 0",
              "line": 175,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "EngineManager: Engine decelerating. RPM: %d",
              "log_arguments": [
                "current_rpm_"
              ],
              "message_args_str_combined": "\"EngineManager: Engine decelerating. RPM: %d\", current_rpm_",
              "line": 176,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Engine decelerating. RPM: %d\", current_rpm_)"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "i == 2",
              "line": 178,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "EngineManager: Cutting fuel supply (simulated).",
                  "log_arguments": [],
                  "message_args_str_combined": "\"EngineManager: Cutting fuel supply (simulated).\"",
                  "line": 179,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Cutting fuel supply (simulated).\")"
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Engine stopped successfully.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Engine stopped successfully.\"",
          "line": 186,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Engine stopped successfully.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManager12setTargetRPMEi",
      "display_signature": "ecu_powertrain_control::setTargetRPM",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 190,
      "end_line": 217,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Setting target RPM to %d.",
          "log_arguments": [
            "rpm"
          ],
          "message_args_str_combined": "\"EngineManager: Setting target RPM to %d.\", rpm",
          "line": 191,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Setting target RPM to %d.\", rpm)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ != EngineStatus::RUNNING",
          "line": 192,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "EngineManager: Cannot set target RPM. Engine not running. Status: %d",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"EngineManager: Cannot set target RPM. Engine not running. Status: %d\", [complex_arg]",
              "line": 193,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Cannot set target RPM. Engine not running. Status: %d\", static_cast<int>(current_status_))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "rpm < 0 || rpm > 7000",
          "line": 196,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "EngineManager: Invalid target RPM: %d. Must be between 0 and 7000.",
              "log_arguments": [
                "rpm"
              ],
              "message_args_str_combined": "\"EngineManager: Invalid target RPM: %d. Must be between 0 and 7000.\", rpm",
              "line": 197,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"EngineManager: Invalid target RPM: %d. Must be between 0 and 7000.\", rpm)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: Target RPM updated. Simulating RPM change...",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Target RPM updated. Simulating RPM change...\"",
          "line": 202,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Target RPM updated. Simulating RPM change...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_rpm_ < target_rpm_",
          "line": 206,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: RPM changed from %d to %d (target: %d).",
          "log_arguments": [
            "old_rpm",
            "current_rpm_",
            "target_rpm_"
          ],
          "message_args_str_combined": "\"EngineManager: RPM changed from %d to %d (target: %d).\", old_rpm, current_rpm_, target_rpm_",
          "line": 212,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: RPM changed from %d to %d (target: %d).\", old_rpm, current_rpm_, target_rpm_)"
        },
        {
          "type": "CALL",
          "callee_expression": "updateEngineParameters()",
          "callee_name_at_call_site": "updateEngineParameters",
          "callee_resolved_key": "_ZN22ecu_powertrain_control13EngineManager22updateEngineParametersEv",
          "callee_resolved_display_name": "ecu_powertrain_control::EngineManager::updateEngineParameters",
          "line": 215
        }
      ]
    },
    {
      "function_id_key": "_ZNK22ecu_powertrain_control13EngineManager13getCurrentRPMEv",
      "display_signature": "ecu_powertrain_control::getCurrentRPM",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 219,
      "end_line": 222,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: Current RPM requested: %d",
          "log_arguments": [
            "current_rpm_"
          ],
          "message_args_str_combined": "\"EngineManager: Current RPM requested: %d\", current_rpm_",
          "line": 220,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Current RPM requested: %d\", current_rpm_)"
        }
      ]
    },
    {
      "function_id_key": "_ZNK22ecu_powertrain_control13EngineManager20getEngineTemperatureEv",
      "display_signature": "ecu_powertrain_control::getEngineTemperature",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 224,
      "end_line": 227,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: Engine temperature requested: %.1f C",
          "log_arguments": [
            "engine_temperature_celsius_"
          ],
          "message_args_str_combined": "\"EngineManager: Engine temperature requested: %.1f C\", engine_temperature_celsius_",
          "line": 225,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Engine temperature requested: %.1f C\", engine_temperature_celsius_)"
        }
      ]
    },
    {
      "function_id_key": "_ZNK22ecu_powertrain_control13EngineManager14getEngineStateEv",
      "display_signature": "ecu_powertrain_control::getEngineState",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 229,
      "end_line": 236,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: Engine state requested.",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Engine state requested.\"",
          "line": 230,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Engine state requested.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManager22updateEngineParametersEv",
      "display_signature": "ecu_powertrain_control::updateEngineParameters",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 238,
      "end_line": 275,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "EngineManager: Updating engine parameters based on current RPM and load (simulated).",
          "log_arguments": [],
          "message_args_str_combined": "\"EngineManager: Updating engine parameters based on current RPM and load (simulated).\"",
          "line": 239,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"EngineManager: Updating engine parameters based on current RPM and load (simulated).\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_status_ == EngineStatus::RUNNING",
          "line": 240,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "engine_temperature_celsius_ < 20.0",
              "line": 244,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "engine_temperature_celsius_ > 120.0",
              "line": 245,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "EngineManager: Engine temperature high: %.1f C",
                  "log_arguments": [
                    "engine_temperature_celsius_"
                  ],
                  "message_args_str_combined": "\"EngineManager: Engine temperature high: %.1f C\", engine_temperature_celsius_",
                  "line": 246,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Engine temperature high: %.1f C\", engine_temperature_celsius_)"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "engine_temperature_celsius_ > 130.0",
                  "line": 247,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "FATAL",
                      "log_format_string": "EngineManager: CRITICAL OVERHEAT! %.1f C. Shutting down immediately!",
                      "log_arguments": [
                        "engine_temperature_celsius_"
                      ],
                      "message_args_str_combined": "\"EngineManager: CRITICAL OVERHEAT! %.1f C. Shutting down immediately!\", engine_temperature_celsius_",
                      "line": 249,
                      "raw_log_statement": "[HeuristicLog:FATAL] LOG_FATAL(\"EngineManager: CRITICAL OVERHEAT! %.1f C. Shutting down immediately!\", engine_temperature_celsius_)"
                    }
                  ],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_rpm_ > 500",
              "line": 259,
              "then_branch_elements": [
                {
                  "type": "FOR_LOOP",
                  "line": 262,
                  "body_elements": [
                    {
                      "type": "IF_STMT",
                      "condition_expression_text": "!fuel_system_.injectFuel(cyl, fuel_amount / 4.0)",
                      "line": 263,
                      "then_branch_elements": [
                        {
                          "type": "LOG",
                          "level": "WARNING",
                          "log_format_string": "EngineManager: Fuel injection failed for cylinder %d during update.",
                          "log_arguments": [
                            "cyl"
                          ],
                          "message_args_str_combined": "\"EngineManager: Fuel injection failed for cylinder %d during update.\", cyl",
                          "line": 264,
                          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"EngineManager: Fuel injection failed for cylinder %d during update.\", cyl)"
                        }
                      ],
                      "else_branch_elements": []
                    }
                  ]
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "engine_temperature_celsius_ < 15.0",
              "line": 272,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 274,
          "body_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control13EngineManager19reportCriticalFaultERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE",
      "display_signature": "ecu_powertrain_control::reportCriticalFault",
      "file": "ecu_powertrain_control/engine_manager.cpp",
      "line": 277,
      "end_line": 284,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "ERROR",
          "log_format_string": "EngineManager: CRITICAL FAULT DETECTED: %s. Current RPM: %d, Temp: %.1f C",
          "log_arguments": [
            "c_str",
            "current_rpm_",
            "engine_temperature_celsius_"
          ],
          "message_args_str_combined": "\"EngineManager: CRITICAL FAULT DETECTED: %s. Current RPM: %d, Temp: %.1f C\", c_str, current_rpm_, engine_temperature_celsius_",
          "line": 278,
          "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"EngineManager: CRITICAL FAULT DETECTED: %s. Current RPM: %d, Temp: %.1f C\",         fault_description.c_str(), current_rpm_, engine_temperature_celsius_)"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "EngineManager: Engine status set to FAULT due to: %s",
          "log_arguments": [
            "c_str"
          ],
          "message_args_str_combined": "\"EngineManager: Engine status set to FAULT due to: %s\", c_str",
          "line": 283,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"EngineManager: Engine status set to FAULT due to: %s\", fault_description.c_str())"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control10FuelSystemC1Ev",
      "display_signature": "ecu_powertrain_control::FuelSystem",
      "file": "ecu_powertrain_control/fuel_system.cpp",
      "line": 8,
      "end_line": 10,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "FuelSystem: Initializing. Fuel level: %.1f%%",
          "log_arguments": [
            "current_fuel_level_"
          ],
          "message_args_str_combined": "\"FuelSystem: Initializing. Fuel level: %.1f%%\", current_fuel_level_",
          "line": 9,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"FuelSystem: Initializing. Fuel level: %.1f%%\", current_fuel_level_)"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control10FuelSystemD1Ev",
      "display_signature": "ecu_powertrain_control::~FuelSystem",
      "file": "ecu_powertrain_control/fuel_system.cpp",
      "line": 12,
      "end_line": 14,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "FuelSystem: Shutting down.",
          "log_arguments": [],
          "message_args_str_combined": "\"FuelSystem: Shutting down.\"",
          "line": 13,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"FuelSystem: Shutting down.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control10FuelSystem9primePumpEv",
      "display_signature": "ecu_powertrain_control::primePump",
      "file": "ecu_powertrain_control/fuel_system.cpp",
      "line": 16,
      "end_line": 22,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "FuelSystem: Priming fuel pump...",
          "log_arguments": [],
          "message_args_str_combined": "\"FuelSystem: Priming fuel pump...\"",
          "line": 17,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"FuelSystem: Priming fuel pump...\")"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "FuelSystem: Fuel pump primed.",
          "log_arguments": [],
          "message_args_str_combined": "\"FuelSystem: Fuel pump primed.\"",
          "line": 21,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"FuelSystem: Fuel pump primed.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control10FuelSystem17checkFuelPressureEv",
      "display_signature": "ecu_powertrain_control::checkFuelPressure",
      "file": "ecu_powertrain_control/fuel_system.cpp",
      "line": 24,
      "end_line": 38,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "FuelSystem: Checking fuel pressure.",
          "log_arguments": [],
          "message_args_str_combined": "\"FuelSystem: Checking fuel pressure.\"",
          "line": 25,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"FuelSystem: Checking fuel pressure.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!pump_primed_",
          "line": 26,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "FuelSystem: Fuel pump not primed, cannot check pressure accurately.",
              "log_arguments": [],
              "message_args_str_combined": "\"FuelSystem: Fuel pump not primed, cannot check pressure accurately.\"",
              "line": 27,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"FuelSystem: Fuel pump not primed, cannot check pressure accurately.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_pressure < required_pressure_psi_ * 0.9",
          "line": 32,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "FuelSystem: Low fuel pressure detected: %.2f PSI. Required: %.2f PSI",
              "log_arguments": [
                "current_pressure",
                "required_pressure_psi_"
              ],
              "message_args_str_combined": "\"FuelSystem: Low fuel pressure detected: %.2f PSI. Required: %.2f PSI\", current_pressure, required_pressure_psi_",
              "line": 33,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"FuelSystem: Low fuel pressure detected: %.2f PSI. Required: %.2f PSI\", current_pressure, required_pressure_psi_)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "FuelSystem: Fuel pressure OK: %.2f PSI",
          "log_arguments": [
            "current_pressure"
          ],
          "message_args_str_combined": "\"FuelSystem: Fuel pressure OK: %.2f PSI\", current_pressure",
          "line": 36,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"FuelSystem: Fuel pressure OK: %.2f PSI\", current_pressure)"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control10FuelSystem10injectFuelEid",
      "display_signature": "ecu_powertrain_control::injectFuel",
      "file": "ecu_powertrain_control/fuel_system.cpp",
      "line": 40,
      "end_line": 66,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "FuelSystem: Attempting to inject %.2f ml of fuel into cylinder %d.",
          "log_arguments": [
            "amount_ml",
            "cylinder_id"
          ],
          "message_args_str_combined": "\"FuelSystem: Attempting to inject %.2f ml of fuel into cylinder %d.\", amount_ml, cylinder_id",
          "line": 41,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"FuelSystem: Attempting to inject %.2f ml of fuel into cylinder %d.\", amount_ml, cylinder_id)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_fuel_level_ <= 0",
          "line": 43,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "FuelSystem: Cannot inject fuel. Fuel tank empty!",
              "log_arguments": [],
              "message_args_str_combined": "\"FuelSystem: Cannot inject fuel. Fuel tank empty!\"",
              "line": 44,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"FuelSystem: Cannot inject fuel. Fuel tank empty!\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!pump_primed_",
          "line": 48,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "FuelSystem: Fuel pump not primed. Priming now.",
              "log_arguments": [],
              "message_args_str_combined": "\"FuelSystem: Fuel pump not primed. Priming now.\"",
              "line": 49,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"FuelSystem: Fuel pump not primed. Priming now.\")"
            },
            {
              "type": "CALL",
              "callee_expression": "primePump()",
              "callee_name_at_call_site": "primePump",
              "callee_resolved_key": "_ZN22ecu_powertrain_control10FuelSystem9primePumpEv",
              "callee_resolved_display_name": "ecu_powertrain_control::primePump",
              "line": 50
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "!pump_primed_",
              "line": 51,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "FuelSystem: Failed to prime pump. Cannot inject fuel for cylinder %d.",
                  "log_arguments": [
                    "cylinder_id"
                  ],
                  "message_args_str_combined": "\"FuelSystem: Failed to prime pump. Cannot inject fuel for cylinder %d.\", cylinder_id",
                  "line": 52,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"FuelSystem: Failed to prime pump. Cannot inject fuel for cylinder %d.\", cylinder_id)"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!checkFuelPressure()",
          "line": 57,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "FuelSystem: Fuel injection aborted for cylinder %d due to low pressure.",
              "log_arguments": [
                "cylinder_id"
              ],
              "message_args_str_combined": "\"FuelSystem: Fuel injection aborted for cylinder %d due to low pressure.\", cylinder_id",
              "line": 58,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"FuelSystem: Fuel injection aborted for cylinder %d due to low pressure.\", cylinder_id)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "FuelSystem: Injecting %.2f ml fuel into cylinder %d.",
          "log_arguments": [
            "amount_ml",
            "cylinder_id"
          ],
          "message_args_str_combined": "\"FuelSystem: Injecting %.2f ml fuel into cylinder %d.\", amount_ml, cylinder_id",
          "line": 63,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"FuelSystem: Injecting %.2f ml fuel into cylinder %d.\", amount_ml, cylinder_id)"
        },
        {
          "type": "CALL",
          "callee_expression": "simulateFuelConsumption(amount_ml)",
          "callee_name_at_call_site": "simulateFuelConsumption",
          "callee_resolved_key": "_ZN22ecu_powertrain_control10FuelSystem23simulateFuelConsumptionEd",
          "callee_resolved_display_name": "ecu_powertrain_control::FuelSystem::simulateFuelConsumption",
          "line": 64
        }
      ]
    },
    {
      "function_id_key": "_ZNK22ecu_powertrain_control10FuelSystem12getFuelLevelEv",
      "display_signature": "ecu_powertrain_control::getFuelLevel",
      "file": "ecu_powertrain_control/fuel_system.cpp",
      "line": 68,
      "end_line": 71,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "FuelSystem: Current fuel level requested: %.1f%%",
          "log_arguments": [
            "current_fuel_level_"
          ],
          "message_args_str_combined": "\"FuelSystem: Current fuel level requested: %.1f%%\", current_fuel_level_",
          "line": 69,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"FuelSystem: Current fuel level requested: %.1f%%\", current_fuel_level_)"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control10FuelSystem23simulateFuelConsumptionEd",
      "display_signature": "ecu_powertrain_control::simulateFuelConsumption",
      "file": "ecu_powertrain_control/fuel_system.cpp",
      "line": 73,
      "end_line": 79,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_fuel_level_ < 0",
          "line": 77,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 78,
          "body_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManagerC1EPNS_13EngineManagerE",
      "display_signature": "ecu_powertrain_control::TransmissionManager",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 10,
      "end_line": 25,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Initializing. Mode: PARK, Gear: %d",
          "log_arguments": [
            "current_gear_"
          ],
          "message_args_str_combined": "\"TransmissionManager: Initializing. Mode: PARK, Gear: %d\", current_gear_",
          "line": 20,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Initializing. Mode: PARK, Gear: %d\", current_gear_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!engine_manager_",
          "line": 21,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: EngineManager instance is NULL. Some functionalities might be limited.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: EngineManager instance is NULL. Some functionalities might be limited.\"",
              "line": 22,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: EngineManager instance is NULL. Some functionalities might be limited.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManagerD1Ev",
      "display_signature": "ecu_powertrain_control::~TransmissionManager",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 27,
      "end_line": 30,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Shutting down. Mode: %d, Gear: %d",
          "log_arguments": [
            "[complex_arg]",
            "current_gear_"
          ],
          "message_args_str_combined": "\"TransmissionManager: Shutting down. Mode: %d, Gear: %d\", [complex_arg], current_gear_",
          "line": 28,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Shutting down. Mode: %d, Gear: %d\",              static_cast<int>(current_mode_), current_gear_)"
        }
      ]
    },
    {
      "function_id_key": "_ZNK22ecu_powertrain_control19TransmissionManager14canShiftToModeENS_16TransmissionModeERK12VehicleState",
      "display_signature": "ecu_powertrain_control::canShiftToMode",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 32,
      "end_line": 85,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "TransmissionManager: Checking if can shift from mode %d to %d. Speed: %.1f km/h",
          "log_arguments": [
            "[complex_arg]",
            "[complex_arg]",
            "speed_kmh"
          ],
          "message_args_str_combined": "\"TransmissionManager: Checking if can shift from mode %d to %d. Speed: %.1f km/h\", [complex_arg], [complex_arg], speed_kmh",
          "line": 33,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: Checking if can shift from mode %d to %d. Speed: %.1f km/h\",               static_cast<int>(current_mode_), static_cast<int>(new_mode), vehicle_state.speed_kmh)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_mode_ == new_mode",
          "line": 36,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "TransmissionManager: Already in requested mode %d.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"TransmissionManager: Already in requested mode %d.\", [complex_arg]",
              "line": 37,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Already in requested mode %d.\", static_cast<int>(new_mode))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "SWITCH_BLOCK",
          "line": 42,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::PARK",
              "line": 43,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::REVERSE",
              "line": 50,
              "body_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_mode_ == TransmissionMode::DRIVE && vehicle_state.speed_kmh > 1.0",
              "line": 56,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "TransmissionManager: Cannot shift to REVERSE from DRIVE at %.1f km/h.",
                  "log_arguments": [
                    "speed_kmh"
                  ],
                  "message_args_str_combined": "\"TransmissionManager: Cannot shift to REVERSE from DRIVE at %.1f km/h.\", speed_kmh",
                  "line": 57,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Cannot shift to REVERSE from DRIVE at %.1f km/h.\", vehicle_state.speed_kmh)"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::DRIVE",
              "line": 61,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::NEUTRAL",
              "line": 70,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::MANUAL",
              "line": 73,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 79,
              "body_elements": []
            }
          ]
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Mode shift to %d is permissible.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"TransmissionManager: Mode shift to %d is permissible.\", [complex_arg]",
          "line": 83,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Mode shift to %d is permissible.\", static_cast<int>(new_mode))"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManager19setTransmissionModeENS_16TransmissionModeE",
      "display_signature": "ecu_powertrain_control::setTransmissionMode",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 87,
      "end_line": 143,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Request to set transmission mode to %d.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"TransmissionManager: Request to set transmission mode to %d.\", [complex_arg]",
          "line": 88,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Request to set transmission mode to %d.\", static_cast<int>(mode))"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "shift_in_progress_",
          "line": 89,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: Cannot change mode. Gear shift currently in progress.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: Cannot change mode. Gear shift currently in progress.\"",
              "line": 90,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Cannot change mode. Gear shift currently in progress.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!canShiftToMode(mode, temp_state)",
          "line": 100,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "TransmissionManager: Mode change to %d denied by safety checks.",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"TransmissionManager: Mode change to %d denied by safety checks.\", [complex_arg]",
              "line": 101,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"TransmissionManager: Mode change to %d denied by safety checks.\", static_cast<int>(mode))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Transmission mode change to %d initiated. Will apply on next update cycle.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"TransmissionManager: Transmission mode change to %d initiated. Will apply on next update cycle.\", [complex_arg]",
          "line": 106,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Transmission mode change to %d initiated. Will apply on next update cycle.\", static_cast<int>(requested_mode_))"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Mode changed from %d to %d.",
          "log_arguments": [
            "[complex_arg]",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"TransmissionManager: Mode changed from %d to %d.\", [complex_arg], [complex_arg]",
          "line": 113,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Mode changed from %d to %d.\", static_cast<int>(old_mode), static_cast<int>(current_mode_))"
        },
        {
          "type": "SWITCH_BLOCK",
          "line": 115,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::PARK",
              "line": 116,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "TransmissionManager: Engaged PARK.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: Engaged PARK.\"",
              "line": 118,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Engaged PARK.\")"
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::REVERSE",
              "line": 120,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "TransmissionManager: Engaged REVERSE (Gear %d).",
              "log_arguments": [
                "current_gear_"
              ],
              "message_args_str_combined": "\"TransmissionManager: Engaged REVERSE (Gear %d).\", current_gear_",
              "line": 122,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Engaged REVERSE (Gear %d).\", current_gear_)"
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::NEUTRAL",
              "line": 124,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "TransmissionManager: Engaged NEUTRAL (Gear %d).",
              "log_arguments": [
                "current_gear_"
              ],
              "message_args_str_combined": "\"TransmissionManager: Engaged NEUTRAL (Gear %d).\", current_gear_",
              "line": 126,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Engaged NEUTRAL (Gear %d).\", current_gear_)"
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::DRIVE",
              "line": 128,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "TransmissionManager: Engaged %s mode, starting in Gear %d.",
              "log_arguments": [
                "[complex_arg]",
                "current_gear_"
              ],
              "message_args_str_combined": "\"TransmissionManager: Engaged %s mode, starting in Gear %d.\", [complex_arg], current_gear_",
              "line": 131,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Engaged %s mode, starting in Gear %d.\",                      (current_mode_ == TransmissionMode::DRIVE ? \"DRIVE\" : \"SPORT\"), current_gear_)"
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "TransmissionMode::MANUAL",
              "line": 134,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "TransmissionManager: Engaged MANUAL mode, current Gear %d.",
              "log_arguments": [
                "current_gear_"
              ],
              "message_args_str_combined": "\"TransmissionManager: Engaged MANUAL mode, current Gear %d.\", current_gear_",
              "line": 139,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Engaged MANUAL mode, current Gear %d.\", current_gear_)"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManager16performGearShiftEi",
      "display_signature": "ecu_powertrain_control::performGearShift",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 145,
      "end_line": 198,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Attempting to shift from gear %d to gear %d.",
          "log_arguments": [
            "current_gear_",
            "to_gear"
          ],
          "message_args_str_combined": "\"TransmissionManager: Attempting to shift from gear %d to gear %d.\", current_gear_, to_gear",
          "line": 146,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Attempting to shift from gear %d to gear %d.\", current_gear_, to_gear)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_",
          "line": 151,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "TransmissionManager: Requesting torque reduction from EngineManager for gear shift.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: Requesting torque reduction from EngineManager for gear shift.\"",
              "line": 152,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: Requesting torque reduction from EngineManager for gear shift.\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: EngineManager not available. Cannot request torque reduction for shift.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: EngineManager not available. Cannot request torque reduction for shift.\"",
              "line": 158,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: EngineManager not available. Cannot request torque reduction for shift.\")"
            }
          ]
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "TransmissionManager: Shifting to gear %d...",
          "log_arguments": [
            "target_gear_"
          ],
          "message_args_str_combined": "\"TransmissionManager: Shifting to gear %d...\", target_gear_",
          "line": 162,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: Shifting to gear %d...\", target_gear_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "shift_outcome <= 80",
          "line": 171,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "TransmissionManager: Shift to gear %d successful and SMOOTH.",
              "log_arguments": [
                "current_gear_"
              ],
              "message_args_str_combined": "\"TransmissionManager: Shift to gear %d successful and SMOOTH.\", current_gear_",
              "line": 174,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Shift to gear %d successful and SMOOTH.\", current_gear_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: Shift to gear %d complete but %s.",
              "log_arguments": [
                "current_gear_",
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"TransmissionManager: Shift to gear %d complete but %s.\", current_gear_, [complex_arg]",
              "line": 178,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Shift to gear %d complete but %s.\",                     current_gear_, (quality == GearShiftQuality::ACCEPTABLE ? \"ACCEPTABLE\" : \"ROUGH\"))"
            },
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "TransmissionManager: FAILED to shift to gear %d! Staying in gear %d.",
              "log_arguments": [
                "target_gear_",
                "current_gear_"
              ],
              "message_args_str_combined": "\"TransmissionManager: FAILED to shift to gear %d! Staying in gear %d.\", target_gear_, current_gear_",
              "line": 182,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"TransmissionManager: FAILED to shift to gear %d! Staying in gear %d.\", target_gear_, current_gear_)"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "engine_manager_",
              "line": 184,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_",
          "line": 190,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "TransmissionManager: Signaling EngineManager to restore torque.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: Signaling EngineManager to restore torque.\"",
              "line": 191,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: Signaling EngineManager to restore torque.\")"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZNK22ecu_powertrain_control19TransmissionManager12canShiftGearEbRK12VehicleState",
      "display_signature": "ecu_powertrain_control::canShiftGear",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 200,
      "end_line": 236,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_mode_ != TransmissionMode::DRIVE &&         current_mode_ != TransmissionMode::SPORT &&         current_mode_ != TransmissionMode::MANUAL",
          "line": 201,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: Cannot shift gears. Not in DRIVE, SPORT, or MANUAL mode. Current mode: %d",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"TransmissionManager: Cannot shift gears. Not in DRIVE, SPORT, or MANUAL mode. Current mode: %d\", [complex_arg]",
              "line": 204,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Cannot shift gears. Not in DRIVE, SPORT, or MANUAL mode. Current mode: %d\",                     static_cast<int>(current_mode_))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "up_shift",
          "line": 211,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_gear_ >= max_gears_",
              "line": 212,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "TransmissionManager: Already in highest gear (%d). Cannot upshift.",
                  "log_arguments": [
                    "current_gear_"
                  ],
                  "message_args_str_combined": "\"TransmissionManager: Already in highest gear (%d). Cannot upshift.\", current_gear_",
                  "line": 213,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Already in highest gear (%d). Cannot upshift.\", current_gear_)"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "engine_manager_ && engine_manager_->getCurrentRPM() < 1500 && current_gear_ > 1",
              "line": 217,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_gear_ <= 1",
              "line": 222,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "TransmissionManager: Already in lowest gear (1). Cannot downshift further.",
                  "log_arguments": [
                    "current_gear_"
                  ],
                  "message_args_str_combined": "\"TransmissionManager: Already in lowest gear (1). Cannot downshift further.\", current_gear_",
                  "line": 223,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Already in lowest gear (1). Cannot downshift further.\", current_gear_)"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "engine_manager_ && engine_manager_->getCurrentRPM() > 5000 && next_gear > 0",
              "line": 227,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "TransmissionManager: Gear shift to %d is permissible.",
          "log_arguments": [
            "next_gear"
          ],
          "message_args_str_combined": "\"TransmissionManager: Gear shift to %d is permissible.\", next_gear",
          "line": 234,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: Gear shift to %d is permissible.\", next_gear)"
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManager7shiftUpEv",
      "display_signature": "ecu_powertrain_control::shiftUp",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 238,
      "end_line": 257,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Request to SHIFT UP from gear %d.",
          "log_arguments": [
            "current_gear_"
          ],
          "message_args_str_combined": "\"TransmissionManager: Request to SHIFT UP from gear %d.\", current_gear_",
          "line": 239,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Request to SHIFT UP from gear %d.\", current_gear_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "shift_in_progress_",
          "line": 240,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: Cannot SHIFT UP. Another shift is already in progress.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: Cannot SHIFT UP. Another shift is already in progress.\"",
              "line": 241,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Cannot SHIFT UP. Another shift is already in progress.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_mode_ != TransmissionMode::MANUAL && current_mode_ != TransmissionMode::SPORT",
          "line": 244,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: Manual SHIFT UP ignored. Not in MANUAL or SPORT mode.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: Manual SHIFT UP ignored. Not in MANUAL or SPORT mode.\"",
              "line": 245,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Manual SHIFT UP ignored. Not in MANUAL or SPORT mode.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_",
          "line": 250,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "canShiftGear(true, temp_state)",
          "line": 252,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "performGearShift(current_gear_ + 1)",
              "callee_name_at_call_site": "performGearShift",
              "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager16performGearShiftEi",
              "callee_resolved_display_name": "ecu_powertrain_control::performGearShift",
              "line": 253
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManager9shiftDownEv",
      "display_signature": "ecu_powertrain_control::shiftDown",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 259,
      "end_line": 278,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Request to SHIFT DOWN from gear %d.",
          "log_arguments": [
            "current_gear_"
          ],
          "message_args_str_combined": "\"TransmissionManager: Request to SHIFT DOWN from gear %d.\", current_gear_",
          "line": 260,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Request to SHIFT DOWN from gear %d.\", current_gear_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "shift_in_progress_",
          "line": 261,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: Cannot SHIFT DOWN. Another shift is already in progress.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: Cannot SHIFT DOWN. Another shift is already in progress.\"",
              "line": 262,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Cannot SHIFT DOWN. Another shift is already in progress.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_mode_ != TransmissionMode::MANUAL && current_mode_ != TransmissionMode::SPORT",
          "line": 265,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: Manual SHIFT DOWN ignored. Not in MANUAL or SPORT mode.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: Manual SHIFT DOWN ignored. Not in MANUAL or SPORT mode.\"",
              "line": 266,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Manual SHIFT DOWN ignored. Not in MANUAL or SPORT mode.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_",
          "line": 271,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "canShiftGear(false, temp_state)",
          "line": 273,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "performGearShift(current_gear_ - 1)",
              "callee_name_at_call_site": "performGearShift",
              "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager16performGearShiftEi",
              "callee_resolved_display_name": "ecu_powertrain_control::performGearShift",
              "line": 274
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManager14requestNeutralEv",
      "display_signature": "ecu_powertrain_control::requestNeutral",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 280,
      "end_line": 290,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "TransmissionManager: Neutral requested explicitly.",
          "log_arguments": [],
          "message_args_str_combined": "\"TransmissionManager: Neutral requested explicitly.\"",
          "line": 281,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Neutral requested explicitly.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_",
          "line": 283,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "canShiftToMode(TransmissionMode::NEUTRAL, temp_state)",
          "line": 285,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "TransmissionManager: Explicit request for NEUTRAL denied by safety checks.",
          "log_arguments": [],
          "message_args_str_combined": "\"TransmissionManager: Explicit request for NEUTRAL denied by safety checks.\"",
          "line": 288,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Explicit request for NEUTRAL denied by safety checks.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZNK22ecu_powertrain_control19TransmissionManager14getCurrentModeEv",
      "display_signature": "ecu_powertrain_control::getCurrentMode",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 292,
      "end_line": 295,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "TransmissionManager: getCurrentMode() called. Mode: %d",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"TransmissionManager: getCurrentMode() called. Mode: %d\", [complex_arg]",
          "line": 293,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: getCurrentMode() called. Mode: %d\", static_cast<int>(current_mode_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK22ecu_powertrain_control19TransmissionManager14getCurrentGearEv",
      "display_signature": "ecu_powertrain_control::getCurrentGear",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 297,
      "end_line": 300,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "TransmissionManager: getCurrentGear() called. Gear: %d",
          "log_arguments": [
            "current_gear_"
          ],
          "message_args_str_combined": "\"TransmissionManager: getCurrentGear() called. Gear: %d\", current_gear_",
          "line": 298,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: getCurrentGear() called. Gear: %d\", current_gear_)"
        }
      ]
    },
    {
      "function_id_key": "_ZNK22ecu_powertrain_control19TransmissionManager17isShiftInProgressEv",
      "display_signature": "ecu_powertrain_control::isShiftInProgress",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 302,
      "end_line": 304,
      "execution_elements": []
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManager23manageAutomaticShiftingERK12VehicleStatei",
      "display_signature": "ecu_powertrain_control::manageAutomaticShifting",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 306,
      "end_line": 340,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "shift_in_progress_ || (current_mode_ != TransmissionMode::DRIVE && current_mode_ != TransmissionMode::SPORT)",
          "line": 307,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "TransmissionManager: Auto-shift logic. Speed: %.1f km/h, RPM: %d, Gear: %d, Mode: %d",
          "log_arguments": [
            "speed_kmh",
            "engine_rpm",
            "current_gear_",
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"TransmissionManager: Auto-shift logic. Speed: %.1f km/h, RPM: %d, Gear: %d, Mode: %d\", speed_kmh, engine_rpm, current_gear_, [complex_arg]",
          "line": 311,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: Auto-shift logic. Speed: %.1f km/h, RPM: %d, Gear: %d, Mode: %d\",               vehicle_state.speed_kmh, engine_rpm, current_gear_, static_cast<int>(current_mode_))"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_rpm > upshift_rpm && current_gear_ < max_gears_",
          "line": 317,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "canShiftGear(true, vehicle_state)",
              "line": 318,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "TransmissionManager: Auto UP-SHIFTING from %d. RPM: %d, Speed: %.1f km/h",
                  "log_arguments": [
                    "current_gear_",
                    "engine_rpm",
                    "speed_kmh"
                  ],
                  "message_args_str_combined": "\"TransmissionManager: Auto UP-SHIFTING from %d. RPM: %d, Speed: %.1f km/h\", current_gear_, engine_rpm, speed_kmh",
                  "line": 319,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Auto UP-SHIFTING from %d. RPM: %d, Speed: %.1f km/h\",                      current_gear_, engine_rpm, vehicle_state.speed_kmh)"
                },
                {
                  "type": "CALL",
                  "callee_expression": "performGearShift(current_gear_ + 1)",
                  "callee_name_at_call_site": "performGearShift",
                  "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager16performGearShiftEi",
                  "callee_resolved_display_name": "ecu_powertrain_control::performGearShift",
                  "line": 321
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_rpm < downshift_rpm && current_gear_ > 1",
          "line": 326,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "vehicle_state.speed_kmh > (current_gear_ - 1) * 15.0",
              "line": 328,
              "then_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "canShiftGear(false, vehicle_state)",
                  "line": 329,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "TransmissionManager: Auto DOWN-SHIFTING from %d. RPM: %d, Speed: %.1f km/h",
                      "log_arguments": [
                        "current_gear_",
                        "engine_rpm",
                        "speed_kmh"
                      ],
                      "message_args_str_combined": "\"TransmissionManager: Auto DOWN-SHIFTING from %d. RPM: %d, Speed: %.1f km/h\", current_gear_, engine_rpm, speed_kmh",
                      "line": 330,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Auto DOWN-SHIFTING from %d. RPM: %d, Speed: %.1f km/h\",                          current_gear_, engine_rpm, vehicle_state.speed_kmh)"
                    },
                    {
                      "type": "CALL",
                      "callee_expression": "performGearShift(current_gear_ - 1)",
                      "callee_name_at_call_site": "performGearShift",
                      "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager16performGearShiftEi",
                      "callee_resolved_display_name": "ecu_powertrain_control::performGearShift",
                      "line": 332
                    }
                  ],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "DEBUG",
                  "log_format_string": "TransmissionManager: RPM low for downshift, but speed %.1f km/h is also low for current gear %d. Holding gear.",
                  "log_arguments": [
                    "speed_kmh",
                    "current_gear_"
                  ],
                  "message_args_str_combined": "\"TransmissionManager: RPM low for downshift, but speed %.1f km/h is also low for current gear %d. Holding gear.\", speed_kmh, current_gear_",
                  "line": 335,
                  "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: RPM low for downshift, but speed %.1f km/h is also low for current gear %d. Holding gear.\",                 vehicle_state.speed_kmh, current_gear_)"
                }
              ]
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManager29updateTransmissionTemperatureERK12VehicleState",
      "display_signature": "ecu_powertrain_control::updateTransmissionTemperature",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 342,
      "end_line": 370,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_gear_ != 0",
          "line": 345,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "shift_in_progress_",
              "line": 347,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "transmission_oil_temp_celsius_ < 20.0",
          "line": 353,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "transmission_oil_temp_celsius_ > 120.0",
          "line": 355,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "TransmissionManager: Oil temperature HIGH: %.1f C",
              "log_arguments": [
                "transmission_oil_temp_celsius_"
              ],
              "message_args_str_combined": "\"TransmissionManager: Oil temperature HIGH: %.1f C\", transmission_oil_temp_celsius_",
              "line": 356,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"TransmissionManager: Oil temperature HIGH: %.1f C\", transmission_oil_temp_celsius_)"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "transmission_oil_temp_celsius_ > 135.0",
              "line": 357,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "TransmissionManager: Oil temperature CRITICAL: %.1f C! Risk of damage. Limiting performance.",
                  "log_arguments": [
                    "transmission_oil_temp_celsius_"
                  ],
                  "message_args_str_combined": "\"TransmissionManager: Oil temperature CRITICAL: %.1f C! Risk of damage. Limiting performance.\", transmission_oil_temp_celsius_",
                  "line": 358,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"TransmissionManager: Oil temperature CRITICAL: %.1f C! Risk of damage. Limiting performance.\", transmission_oil_temp_celsius_)"
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "engine_manager_",
                  "line": 361,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "TransmissionManager: Oil temperature elevated: %.1f C",
              "log_arguments": [
                "transmission_oil_temp_celsius_"
              ],
              "message_args_str_combined": "\"TransmissionManager: Oil temperature elevated: %.1f C\", transmission_oil_temp_celsius_",
              "line": 366,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Oil temperature elevated: %.1f C\", transmission_oil_temp_celsius_)"
            },
            {
              "type": "DO_WHILE_LOOP",
              "line": 368,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManager23checkTransmissionHealthEv",
      "display_signature": "ecu_powertrain_control::checkTransmissionHealth",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 373,
      "end_line": 390,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "TransmissionManager: Performing transmission health check.",
          "log_arguments": [],
          "message_args_str_combined": "\"TransmissionManager: Performing transmission health check.\"",
          "line": 374,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: Performing transmission health check.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "distrib(gen) == 1",
          "line": 380,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "TransmissionManager: DIAGNOSTIC FAULT DETECTED! Code: DTC_TRN_%03d. Possible clutch slip or solenoid issue.",
              "log_arguments": [
                "fault_code"
              ],
              "message_args_str_combined": "\"TransmissionManager: DIAGNOSTIC FAULT DETECTED! Code: DTC_TRN_%03d. Possible clutch slip or solenoid issue.\", fault_code",
              "line": 382,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"TransmissionManager: DIAGNOSTIC FAULT DETECTED! Code: DTC_TRN_%03d. Possible clutch slip or solenoid issue.\", fault_code)"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "engine_manager_",
              "line": 384,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "DO_WHILE_LOOP",
              "line": 388,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN22ecu_powertrain_control19TransmissionManager11updateStateERK12VehicleStatei",
      "display_signature": "ecu_powertrain_control::updateState",
      "file": "ecu_powertrain_control/transmission_manager.cpp",
      "line": 393,
      "end_line": 422,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "TransmissionManager: Updating state. Mode: %d, Gear: %d, Speed: %.1f km/h, RPM: %d",
          "log_arguments": [
            "[complex_arg]",
            "current_gear_",
            "speed_kmh",
            "engine_rpm"
          ],
          "message_args_str_combined": "\"TransmissionManager: Updating state. Mode: %d, Gear: %d, Speed: %.1f km/h, RPM: %d\", [complex_arg], current_gear_, speed_kmh, engine_rpm",
          "line": 394,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: Updating state. Mode: %d, Gear: %d, Speed: %.1f km/h, RPM: %d\",               static_cast<int>(current_mode_), current_gear_, vehicle_state.speed_kmh, engine_rpm)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "requested_mode_ != current_mode_",
          "line": 398,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "TransmissionManager: Processing pending mode change from %d to %d.",
              "log_arguments": [
                "[complex_arg]",
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"TransmissionManager: Processing pending mode change from %d to %d.\", [complex_arg], [complex_arg]",
              "line": 399,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"TransmissionManager: Processing pending mode change from %d to %d.\",                  static_cast<int>(current_mode_), static_cast<int>(requested_mode_))"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!shift_in_progress_",
          "line": 407,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "manageAutomaticShifting(vehicle_state, engine_rpm)",
              "callee_name_at_call_site": "manageAutomaticShifting",
              "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager23manageAutomaticShiftingERK12VehicleStatei",
              "callee_resolved_display_name": "ecu_powertrain_control::manageAutomaticShifting",
              "line": 408
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "TransmissionManager: Skipping auto-shift logic as a shift is already in progress.",
              "log_arguments": [],
              "message_args_str_combined": "\"TransmissionManager: Skipping auto-shift logic as a shift is already in progress.\"",
              "line": 410,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: Skipping auto-shift logic as a shift is already in progress.\")"
            }
          ]
        },
        {
          "type": "CALL",
          "callee_expression": "updateTransmissionTemperature(vehicle_state)",
          "callee_name_at_call_site": "updateTransmissionTemperature",
          "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager29updateTransmissionTemperatureERK12VehicleState",
          "callee_resolved_display_name": "ecu_powertrain_control::updateTransmissionTemperature",
          "line": 413
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "++update_cycle_count % 15 == 0",
          "line": 417,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "checkTransmissionHealth()",
              "callee_name_at_call_site": "checkTransmissionHealth",
              "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager23checkTransmissionHealthEv",
              "callee_resolved_display_name": "ecu_powertrain_control::checkTransmissionHealth",
              "line": 418
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "TransmissionManager: State update cycle complete.",
          "log_arguments": [],
          "message_args_str_combined": "\"TransmissionManager: State update cycle complete.\"",
          "line": 421,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"TransmissionManager: State update cycle complete.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems16absStateToStringENS_8ABSStateE",
      "display_signature": "ecu_safety_systems::absStateToString",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 11,
      "end_line": 20,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 12,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ABSState::INACTIVE",
              "line": 13,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ABSState::MONITORING",
              "line": 14,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ABSState::INTERVENING",
              "line": 15,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ABSState::FAULT_DETECTED",
              "line": 16,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "ABSState::INITIALIZING",
              "line": 17,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 18,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControlC1Ev",
      "display_signature": "ecu_safety_systems::ABSControl",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 23,
      "end_line": 37,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ABSControl: Initializing...",
          "log_arguments": [],
          "message_args_str_combined": "\"ABSControl: Initializing...\"",
          "line": 30,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: Initializing...\")"
        },
        {
          "type": "CALL",
          "callee_expression": "initialize()",
          "callee_name_at_call_site": "initialize",
          "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl10initializeEv",
          "callee_resolved_display_name": "ecu_safety_systems::ABSControl::initialize",
          "line": 36
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControlD1Ev",
      "display_signature": "ecu_safety_systems::~ABSControl",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 39,
      "end_line": 41,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ABSControl: Shutting down. Final state: %s.",
          "log_arguments": [
            "absStateToString"
          ],
          "message_args_str_combined": "\"ABSControl: Shutting down. Final state: %s.\", absStateToString",
          "line": 40,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: Shutting down. Final state: %s.\", absStateToString(current_abs_state_))"
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl10initializeEv",
      "display_signature": "ecu_safety_systems::initialize",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 43,
      "end_line": 61,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ABSControl: Performing system initialization and self-checks.",
          "log_arguments": [],
          "message_args_str_combined": "\"ABSControl: Performing system initialization and self-checks.\"",
          "line": 44,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: Performing system initialization and self-checks.\")"
        },
        {
          "type": "FOR_LOOP",
          "line": 47,
          "body_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ABSControl: Initialized data for wheel %d.",
              "log_arguments": [
                "i"
              ],
              "message_args_str_combined": "\"ABSControl: Initialized data for wheel %d.\", i",
              "line": 49,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Initialized data for wheel %d.\", i)"
            }
          ]
        },
        {
          "type": "CALL",
          "callee_expression": "runDiagnostics()",
          "callee_name_at_call_site": "runDiagnostics",
          "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl14runDiagnosticsEv",
          "callee_resolved_display_name": "ecu_safety_systems::ABSControl::runDiagnostics",
          "line": 53
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_abs_state_ != ABSState::FAULT_DETECTED",
          "line": 55,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ABSControl: Initialization complete. System INACTIVE.",
              "log_arguments": [],
              "message_args_str_combined": "\"ABSControl: Initialization complete. System INACTIVE.\"",
              "line": 57,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: Initialization complete. System INACTIVE.\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "ABSControl: Initialization failed due to fault %d found during diagnostics. System in FAULT_DETECTED state.",
              "log_arguments": [
                "fault_code_"
              ],
              "message_args_str_combined": "\"ABSControl: Initialization failed due to fault %d found during diagnostics. System in FAULT_DETECTED state.\", fault_code_",
              "line": 59,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"ABSControl: Initialization failed due to fault %d found during diagnostics. System in FAULT_DETECTED state.\", fault_code_)"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl27updateVehicleReferenceSpeedERKSt6vectorI10SensorDataSaIS2_EEd",
      "display_signature": "ecu_safety_systems::updateVehicleReferenceSpeed",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 64,
      "end_line": 110,
      "execution_elements": [
        {
          "type": "FOR_LOOP",
          "line": 73,
          "body_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "wheel_speed_sensors[i].value >= 0",
              "line": 76,
              "then_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "wheel_speed_sensors[i].value > max_wheel_speed",
                  "line": 79,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "ABSControl: Invalid speed reading (%.2f km/h) for wheel %d.",
                  "log_arguments": [
                    "value",
                    "[complex_arg]"
                  ],
                  "message_args_str_combined": "\"ABSControl: Invalid speed reading (%.2f km/h) for wheel %d.\", value, [complex_arg]",
                  "line": 83,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ABSControl: Invalid speed reading (%.2f km/h) for wheel %d.\", wheel_speed_sensors[i].value, static_cast<int>(i))"
                }
              ]
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "valid_sensors > 0",
          "line": 88,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_vehicle_speed_from_state > 0 && fabs(current_vehicle_speed_from_state - avg_wheel_speed) < 20.0",
              "line": 91,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "max_wheel_speed > vehicle_reference_speed_kmh_ && vehicle_reference_speed_kmh_ > 5.0",
              "line": 97,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "ABSControl: No valid wheel speed sensors to calculate reference speed. Using last known or zero.",
              "log_arguments": [],
              "message_args_str_combined": "\"ABSControl: No valid wheel speed sensors to calculate reference speed. Using last known or zero.\"",
              "line": 102,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ABSControl: No valid wheel speed sensors to calculate reference speed. Using last known or zero.\")"
            }
          ]
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 109,
          "body_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl17detectWheelLockupERKNS_15WheelSensorDataEd",
      "display_signature": "ecu_safety_systems::detectWheelLockup",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 113,
      "end_line": 148,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "vehicle_reference_speed_kmh_ < 5.0",
          "line": 114,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "vehicle_reference_speed_kmh_ > 1.0",
          "line": 120,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "slip_ratio > 0.20 && wheel.speed_kmh < vehicle_reference_speed_kmh_ * 0.85",
          "line": 130,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ABSControl: Wheel %d potential lockup. Speed: %.1f, RefSpeed: %.1f, Slip: %.2f",
              "log_arguments": [
                "wheel_id",
                "speed_kmh",
                "vehicle_reference_speed_kmh_",
                "slip_ratio"
              ],
              "message_args_str_combined": "\"ABSControl: Wheel %d potential lockup. Speed: %.1f, RefSpeed: %.1f, Slip: %.2f\", wheel_id, speed_kmh, vehicle_reference_speed_kmh_, slip_ratio",
              "line": 132,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Wheel %d potential lockup. Speed: %.1f, RefSpeed: %.1f, Slip: %.2f\",                   wheel.wheel_id, wheel.speed_kmh, vehicle_reference_speed_kmh_, slip_ratio)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "is_locking",
          "line": 143,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "ABSControl: LOCKUP DETECTED for wheel %d! Speed: %.1f km/h, Ref: %.1f km/h, Slip: %.2f.",
              "log_arguments": [
                "wheel_id",
                "speed_kmh",
                "vehicle_reference_speed_kmh_",
                "slip_ratio"
              ],
              "message_args_str_combined": "\"ABSControl: LOCKUP DETECTED for wheel %d! Speed: %.1f km/h, Ref: %.1f km/h, Slip: %.2f.\", wheel_id, speed_kmh, vehicle_reference_speed_kmh_, slip_ratio",
              "line": 144,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ABSControl: LOCKUP DETECTED for wheel %d! Speed: %.1f km/h, Ref: %.1f km/h, Slip: %.2f.\",                     wheel.wheel_id, wheel.speed_kmh, vehicle_reference_speed_kmh_, slip_ratio)"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl15releasePressureERNS_15WheelSensorDataE",
      "display_signature": "ecu_safety_systems::releasePressure",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 150,
      "end_line": 157,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ABSControl: INTERVENTION - Releasing brake pressure for wheel %d.",
          "log_arguments": [
            "wheel_id"
          ],
          "message_args_str_combined": "\"ABSControl: INTERVENTION - Releasing brake pressure for wheel %d.\", wheel_id",
          "line": 151,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: INTERVENTION - Releasing brake pressure for wheel %d.\", wheel.wheel_id)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "wheel.applied_brake_pressure_bar < 0",
          "line": 155,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ABSControl: Wheel %d pressure reduced to %.1f bar.",
          "log_arguments": [
            "wheel_id",
            "applied_brake_pressure_bar"
          ],
          "message_args_str_combined": "\"ABSControl: Wheel %d pressure reduced to %.1f bar.\", wheel_id, applied_brake_pressure_bar",
          "line": 156,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Wheel %d pressure reduced to %.1f bar.\", wheel.wheel_id, wheel.applied_brake_pressure_bar)"
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl12holdPressureERNS_15WheelSensorDataE",
      "display_signature": "ecu_safety_systems::holdPressure",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 159,
      "end_line": 163,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ABSControl: INTERVENTION - Holding brake pressure for wheel %d at %.1f bar.",
          "log_arguments": [
            "wheel_id",
            "applied_brake_pressure_bar"
          ],
          "message_args_str_combined": "\"ABSControl: INTERVENTION - Holding brake pressure for wheel %d at %.1f bar.\", wheel_id, applied_brake_pressure_bar",
          "line": 160,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: INTERVENTION - Holding brake pressure for wheel %d at %.1f bar.\",              wheel.wheel_id, wheel.applied_brake_pressure_bar)"
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl15reapplyPressureERNS_15WheelSensorDataE",
      "display_signature": "ecu_safety_systems::reapplyPressure",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 165,
      "end_line": 173,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ABSControl: INTERVENTION - Reapplying brake pressure for wheel %d.",
          "log_arguments": [
            "wheel_id"
          ],
          "message_args_str_combined": "\"ABSControl: INTERVENTION - Reapplying brake pressure for wheel %d.\", wheel_id",
          "line": 166,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: INTERVENTION - Reapplying brake pressure for wheel %d.\", wheel.wheel_id)"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ABSControl: Wheel %d pressure increased to %.1f bar.",
          "log_arguments": [
            "wheel_id",
            "applied_brake_pressure_bar"
          ],
          "message_args_str_combined": "\"ABSControl: Wheel %d pressure increased to %.1f bar.\", wheel_id, applied_brake_pressure_bar",
          "line": 172,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Wheel %d pressure increased to %.1f bar.\", wheel.wheel_id, wheel.applied_brake_pressure_bar)"
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl21modulateBrakePressureERNS_15WheelSensorDataE",
      "display_signature": "ecu_safety_systems::modulateBrakePressure",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 176,
      "end_line": 201,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ABSControl: Modulating pressure for wheel %d. Current speed: %.1f, Lock: %s, Pressure: %.1f",
          "log_arguments": [
            "wheel_id",
            "speed_kmh",
            "[complex_arg]",
            "applied_brake_pressure_bar"
          ],
          "message_args_str_combined": "\"ABSControl: Modulating pressure for wheel %d. Current speed: %.1f, Lock: %s, Pressure: %.1f\", wheel_id, speed_kmh, [complex_arg], applied_brake_pressure_bar",
          "line": 178,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Modulating pressure for wheel %d. Current speed: %.1f, Lock: %s, Pressure: %.1f\",               wheel_to_modulate.wheel_id, wheel_to_modulate.speed_kmh,               wheel_to_modulate.is_locking ? \"YES\" : \"NO\",               wheel_to_modulate.applied_brake_pressure_bar)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "wheel_to_modulate.is_locking",
          "line": 183,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "releasePressure(wheel_to_modulate)",
              "callee_name_at_call_site": "releasePressure",
              "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl15releasePressureERNS_15WheelSensorDataE",
              "callee_resolved_display_name": "ecu_safety_systems::releasePressure",
              "line": 185
            }
          ],
          "else_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "wheel_to_modulate.speed_kmh < vehicle_reference_speed_kmh_ * 0.95",
              "line": 191,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "holdPressure(wheel_to_modulate)",
                  "callee_name_at_call_site": "holdPressure",
                  "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl12holdPressureERNS_15WheelSensorDataE",
                  "callee_resolved_display_name": "ecu_safety_systems::holdPressure",
                  "line": 193
                }
              ],
              "else_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "reapplyPressure(wheel_to_modulate)",
                  "callee_name_at_call_site": "reapplyPressure",
                  "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl15reapplyPressureERNS_15WheelSensorDataE",
                  "callee_resolved_display_name": "ecu_safety_systems::reapplyPressure",
                  "line": 196
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl20checkForSystemFaultsERKSt6vectorI10SensorDataSaIS2_EE",
      "display_signature": "ecu_safety_systems::checkForSystemFaults",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 204,
      "end_line": 251,
      "execution_elements": [
        {
          "type": "FOR_LOOP",
          "line": 211,
          "body_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "wheel_speed_sensors[i].id != static_cast<int>(i)",
              "line": 212,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "ABSControl: FAULT - Wheel speed sensor ID mismatch or data error for sensor %d. Expected ID %d.",
                  "log_arguments": [
                    "id",
                    "[complex_arg]"
                  ],
                  "message_args_str_combined": "\"ABSControl: FAULT - Wheel speed sensor ID mismatch or data error for sensor %d. Expected ID %d.\", id, [complex_arg]",
                  "line": 213,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"ABSControl: FAULT - Wheel speed sensor ID mismatch or data error for sensor %d. Expected ID %d.\",                       wheel_speed_sensors[i].id, static_cast<int>(i))"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "wheel_speed_sensors[i].value < -10.0 || wheel_speed_sensors[i].value > 350.0",
              "line": 219,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "log_format_string": "ABSControl: FAULT - Irrational speed value (%.1f km/h) from wheel sensor %d.",
                  "log_arguments": [
                    "value",
                    "[complex_arg]"
                  ],
                  "message_args_str_combined": "\"ABSControl: FAULT - Irrational speed value (%.1f km/h) from wheel sensor %d.\", value, [complex_arg]",
                  "line": 220,
                  "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"ABSControl: FAULT - Irrational speed value (%.1f km/h) from wheel sensor %d.\",                        wheel_speed_sensors[i].value, static_cast<int>(i))"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "wheel_speed_sensors[i].value >= -1.0",
              "line": 226,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "valid_sensor_count < wheel_speed_sensors.size() && vehicle_reference_speed_kmh_ > 10.0",
          "line": 231,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "ABSControl: One or more wheel speed sensors may be providing invalid data or no data. Valid: %d/%zu",
              "log_arguments": [
                "valid_sensor_count",
                "size"
              ],
              "message_args_str_combined": "\"ABSControl: One or more wheel speed sensors may be providing invalid data or no data. Valid: %d/%zu\", valid_sensor_count, size",
              "line": 232,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ABSControl: One or more wheel speed sensors may be providing invalid data or no data. Valid: %d/%zu\",             valid_sensor_count, wheel_speed_sensors.size())"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "valid_sensor_count == 0 && wheel_speed_sensors.size() > 0",
              "line": 236,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "FATAL",
                  "log_format_string": "ABSControl: FAULT - All wheel speed sensors are providing invalid data or no data! ABS disabled.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"ABSControl: FAULT - All wheel speed sensors are providing invalid data or no data! ABS disabled.\"",
                  "line": 237,
                  "raw_log_statement": "[HeuristicLog:FATAL] LOG_FATAL(\"ABSControl: FAULT - All wheel speed sensors are providing invalid data or no data! ABS disabled.\")"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 250,
          "body_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl14processBrakingERK12VehicleStateRKSt6vectorI10SensorDataSaIS5_EEd",
      "display_signature": "ecu_safety_systems::processBraking",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 254,
      "end_line": 378,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ABSControl: Processing braking cycle. Vehicle Speed: %.1f km/h, Pedal Pressure: %.1f bar.",
          "log_arguments": [
            "speed_kmh",
            "brake_pedal_pressure_input"
          ],
          "message_args_str_combined": "\"ABSControl: Processing braking cycle. Vehicle Speed: %.1f km/h, Pedal Pressure: %.1f bar.\", speed_kmh, brake_pedal_pressure_input",
          "line": 258,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Processing braking cycle. Vehicle Speed: %.1f km/h, Pedal Pressure: %.1f bar.\",               vehicle_state.speed_kmh, brake_pedal_pressure_input)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_abs_state_ == ABSState::FAULT_DETECTED",
          "line": 261,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "ABSControl: System in FAULT state. ABS intervention disabled. Pedal Pressure: %.1f",
              "log_arguments": [
                "brake_pedal_pressure_input"
              ],
              "message_args_str_combined": "\"ABSControl: System in FAULT state. ABS intervention disabled. Pedal Pressure: %.1f\", brake_pedal_pressure_input",
              "line": 262,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ABSControl: System in FAULT state. ABS intervention disabled. Pedal Pressure: %.1f\", brake_pedal_pressure_input)"
            },
            {
              "type": "FOR_RANGE_LOOP",
              "line": 265,
              "body_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_abs_state_ == ABSState::INITIALIZING",
          "line": 270,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ABSControl: System still initializing. Braking commands ignored for this cycle.",
              "log_arguments": [],
              "message_args_str_combined": "\"ABSControl: System still initializing. Braking commands ignored for this cycle.\"",
              "line": 271,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: System still initializing. Braking commands ignored for this cycle.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "callee_expression": "updateVehicleReferenceSpeed(wheel_speed_sensors, vehicle_state.speed_kmh)",
          "callee_name_at_call_site": "updateVehicleReferenceSpeed",
          "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl27updateVehicleReferenceSpeedERKSt6vectorI10SensorDataSaIS2_EEd",
          "callee_resolved_display_name": "ecu_safety_systems::updateVehicleReferenceSpeed",
          "line": 277
        },
        {
          "type": "CALL",
          "callee_expression": "checkForSystemFaults(wheel_speed_sensors)",
          "callee_name_at_call_site": "checkForSystemFaults",
          "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl20checkForSystemFaultsERKSt6vectorI10SensorDataSaIS2_EE",
          "callee_resolved_display_name": "ecu_safety_systems::checkForSystemFaults",
          "line": 280
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_abs_state_ == ABSState::FAULT_DETECTED",
          "line": 281,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "ABSControl: FAULT detected during cycle. Aborting ABS logic for this cycle. Fault code: %d",
              "log_arguments": [
                "fault_code_"
              ],
              "message_args_str_combined": "\"ABSControl: FAULT detected during cycle. Aborting ABS logic for this cycle. Fault code: %d\", fault_code_",
              "line": 282,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"ABSControl: FAULT detected during cycle. Aborting ABS logic for this cycle. Fault code: %d\", fault_code_)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!potential_intervention_needed && current_abs_state_ == ABSState::INTERVENING",
          "line": 290,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ABSControl: Conditions no longer require ABS intervention (speed or pressure too low). Transitioning to INACTIVE.",
              "log_arguments": [],
              "message_args_str_combined": "\"ABSControl: Conditions no longer require ABS intervention (speed or pressure too low). Transitioning to INACTIVE.\"",
              "line": 291,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: Conditions no longer require ABS intervention (speed or pressure too low). Transitioning to INACTIVE.\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ABSControl: Conditions (Speed: %.1f, Pedal: %.1f) warrant ABS MONITORING.",
              "log_arguments": [
                "vehicle_reference_speed_kmh_",
                "brake_pedal_pressure_input"
              ],
              "message_args_str_combined": "\"ABSControl: Conditions (Speed: %.1f, Pedal: %.1f) warrant ABS MONITORING.\", vehicle_reference_speed_kmh_, brake_pedal_pressure_input",
              "line": 295,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: Conditions (Speed: %.1f, Pedal: %.1f) warrant ABS MONITORING.\", vehicle_reference_speed_kmh_, brake_pedal_pressure_input)"
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_abs_state_ == ABSState::MONITORING || current_abs_state_ == ABSState::INTERVENING",
          "line": 302,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ABSControl: State is %s. Analyzing wheel speeds for lockup.",
              "log_arguments": [
                "absStateToString"
              ],
              "message_args_str_combined": "\"ABSControl: State is %s. Analyzing wheel speeds for lockup.\", absStateToString",
              "line": 303,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: State is %s. Analyzing wheel speeds for lockup.\", absStateToString(current_abs_state_))"
            },
            {
              "type": "FOR_LOOP",
              "line": 304,
              "body_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "current_abs_state_ != ABSState::INTERVENING || !wheel_data_[i].is_locking",
                  "line": 307,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "wheel_data_[i].is_locking",
                  "line": 312,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                }
              ]
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "any_wheel_locking",
              "line": 317,
              "then_branch_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "current_abs_state_ != ABSState::INTERVENING",
                  "line": 318,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "WARNING",
                      "log_format_string": "ABSControl: Transitioning to INTERVENING state due to wheel lockup!",
                      "log_arguments": [],
                      "message_args_str_combined": "\"ABSControl: Transitioning to INTERVENING state due to wheel lockup!\"",
                      "line": 319,
                      "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ABSControl: Transitioning to INTERVENING state due to wheel lockup!\")"
                    }
                  ],
                  "else_branch_elements": []
                },
                {
                  "type": "FOR_RANGE_LOOP",
                  "line": 323,
                  "body_elements": [
                    {
                      "type": "IF_STMT",
                      "condition_expression_text": "wd.is_locking || (vehicle_reference_speed_kmh_ - wd.speed_kmh) > vehicle_reference_speed_kmh_ * 0.15",
                      "line": 324,
                      "then_branch_elements": [
                        {
                          "type": "CALL",
                          "callee_expression": "modulateBrakePressure(wd)",
                          "callee_name_at_call_site": "modulateBrakePressure",
                          "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl21modulateBrakePressureERNS_15WheelSensorDataE",
                          "callee_resolved_display_name": "ecu_safety_systems::modulateBrakePressure",
                          "line": 325
                        }
                      ],
                      "else_branch_elements": [
                        {
                          "type": "DO_WHILE_LOOP",
                          "line": 330,
                          "body_elements": []
                        }
                      ]
                    }
                  ]
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "ABSControl: No wheel lockup detected in INTERVENING state. Cycle: %d",
                  "log_arguments": [
                    "cycles_since_last_intervention_"
                  ],
                  "message_args_str_combined": "\"ABSControl: No wheel lockup detected in INTERVENING state. Cycle: %d\", cycles_since_last_intervention_",
                  "line": 336,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: No wheel lockup detected in INTERVENING state. Cycle: %d\", cycles_since_last_intervention_)"
                },
                {
                  "type": "FOR_RANGE_LOOP",
                  "line": 338,
                  "body_elements": [
                    {
                      "type": "IF_STMT",
                      "condition_expression_text": "wd.applied_brake_pressure_bar < brake_pedal_pressure_input",
                      "line": 340,
                      "then_branch_elements": [
                        {
                          "type": "CALL",
                          "callee_expression": "reapplyPressure(wd)",
                          "callee_name_at_call_site": "reapplyPressure",
                          "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl15reapplyPressureERNS_15WheelSensorDataE",
                          "callee_resolved_display_name": "ecu_safety_systems::reapplyPressure",
                          "line": 341
                        }
                      ],
                      "else_branch_elements": []
                    },
                    {
                      "type": "LOG",
                      "level": "DEBUG",
                      "log_format_string": "ABSControl: Wheel %d (no lock), pressure adjusted to %.1f bar (pedal: %.1f).",
                      "log_arguments": [
                        "wheel_id",
                        "applied_brake_pressure_bar",
                        "brake_pedal_pressure_input"
                      ],
                      "message_args_str_combined": "\"ABSControl: Wheel %d (no lock), pressure adjusted to %.1f bar (pedal: %.1f).\", wheel_id, applied_brake_pressure_bar, brake_pedal_pressure_input",
                      "line": 347,
                      "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Wheel %d (no lock), pressure adjusted to %.1f bar (pedal: %.1f).\",                            wd.wheel_id, wd.applied_brake_pressure_bar, brake_pedal_pressure_input)"
                    }
                  ]
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "cycles_since_last_intervention_ > 10",
                  "line": 351,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "INFO",
                      "log_format_string": "ABSControl: INTERVENTION complete after %d cycles. Transitioning to MONITORING/INACTIVE.",
                      "log_arguments": [
                        "cycles_since_last_intervention_"
                      ],
                      "message_args_str_combined": "\"ABSControl: INTERVENTION complete after %d cycles. Transitioning to MONITORING/INACTIVE.\", cycles_since_last_intervention_",
                      "line": 352,
                      "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: INTERVENTION complete after %d cycles. Transitioning to MONITORING/INACTIVE.\", cycles_since_last_intervention_)"
                    }
                  ],
                  "else_branch_elements": []
                },
                {
                  "type": "FOR_RANGE_LOOP",
                  "line": 359,
                  "body_elements": []
                },
                {
                  "type": "DO_WHILE_LOOP",
                  "line": 362,
                  "body_elements": []
                }
              ]
            }
          ],
          "else_branch_elements": [
            {
              "type": "FOR_RANGE_LOOP",
              "line": 366,
              "body_elements": []
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ABSControl: System INACTIVE. Applying pedal pressure %.1f bar to all wheels.",
              "log_arguments": [
                "brake_pedal_pressure_input"
              ],
              "message_args_str_combined": "\"ABSControl: System INACTIVE. Applying pedal pressure %.1f bar to all wheels.\", brake_pedal_pressure_input",
              "line": 369,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: System INACTIVE. Applying pedal pressure %.1f bar to all wheels.\", brake_pedal_pressure_input)"
            }
          ]
        },
        {
          "type": "FOR_RANGE_LOOP",
          "line": 373,
          "body_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ABSControl: Braking cycle processing complete. Final ABS State: %s.",
          "log_arguments": [
            "absStateToString"
          ],
          "message_args_str_combined": "\"ABSControl: Braking cycle processing complete. Final ABS State: %s.\", absStateToString",
          "line": 377,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Braking cycle processing complete. Final ABS State: %s.\", absStateToString(current_abs_state_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK18ecu_safety_systems10ABSControl15getCurrentStateEv",
      "display_signature": "ecu_safety_systems::getCurrentState",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 381,
      "end_line": 384,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ABSControl: getCurrentState() -> %s.",
          "log_arguments": [
            "absStateToString"
          ],
          "message_args_str_combined": "\"ABSControl: getCurrentState() -> %s.\", absStateToString",
          "line": 382,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: getCurrentState() -> %s.\", absStateToString(current_abs_state_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK18ecu_safety_systems10ABSControl23isABSInterventionActiveEv",
      "display_signature": "ecu_safety_systems::isABSInterventionActive",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 386,
      "end_line": 390,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "ABSControl: isABSInterventionActive() -> %s.",
          "log_arguments": [
            "[complex_arg]"
          ],
          "message_args_str_combined": "\"ABSControl: isABSInterventionActive() -> %s.\", [complex_arg]",
          "line": 388,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: isABSInterventionActive() -> %s.\", active ? \"YES\" : \"NO\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems10ABSControl14runDiagnosticsEv",
      "display_signature": "ecu_safety_systems::runDiagnostics",
      "file": "ecu_safety_systems/abs_control.cpp",
      "line": 392,
      "end_line": 440,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "ABSControl: Running system diagnostics...",
          "log_arguments": [],
          "message_args_str_combined": "\"ABSControl: Running system diagnostics...\"",
          "line": 393,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: Running system diagnostics...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!sensor_conn_ok",
          "line": 401,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "ABSControl: DIAGNOSTIC FAULT - Wheel speed sensor connectivity check failed. Sensor_ID: %d",
              "log_arguments": [
                "[complex_arg]"
              ],
              "message_args_str_combined": "\"ABSControl: DIAGNOSTIC FAULT - Wheel speed sensor connectivity check failed. Sensor_ID: %d\", [complex_arg]",
              "line": 402,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"ABSControl: DIAGNOSTIC FAULT - Wheel speed sensor connectivity check failed. Sensor_ID: %d\", (rand()%4))"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ABSControl: Wheel speed sensor connectivity OK.",
              "log_arguments": [],
              "message_args_str_combined": "\"ABSControl: Wheel speed sensor connectivity OK.\"",
              "line": 406,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Wheel speed sensor connectivity OK.\")"
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!actuator_ok && current_abs_state_ != ABSState::FAULT_DETECTED",
          "line": 425,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "ABSControl: DIAGNOSTIC FAULT - ABS hydraulic unit/valve check failed (simulated).",
              "log_arguments": [],
              "message_args_str_combined": "\"ABSControl: DIAGNOSTIC FAULT - ABS hydraulic unit/valve check failed (simulated).\"",
              "line": 426,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"ABSControl: DIAGNOSTIC FAULT - ABS hydraulic unit/valve check failed (simulated).\")"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "log_format_string": "ABSControl: Actuator checks PASSED (simulated).",
              "log_arguments": [],
              "message_args_str_combined": "\"ABSControl: Actuator checks PASSED (simulated).\"",
              "line": 430,
              "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"ABSControl: Actuator checks PASSED (simulated).\")"
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "current_abs_state_ == ABSState::FAULT_DETECTED",
          "line": 434,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "ABSControl: Diagnostics complete. FAULT DETECTED. Code: %d. System remains in FAULT_DETECTED state.",
              "log_arguments": [
                "fault_code_"
              ],
              "message_args_str_combined": "\"ABSControl: Diagnostics complete. FAULT DETECTED. Code: %d. System remains in FAULT_DETECTED state.\", fault_code_",
              "line": 435,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"ABSControl: Diagnostics complete. FAULT DETECTED. Code: %d. System remains in FAULT_DETECTED state.\", fault_code_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "ABSControl: Diagnostics complete. All systems nominal. System is INACTIVE.",
              "log_arguments": [],
              "message_args_str_combined": "\"ABSControl: Diagnostics complete. All systems nominal. System is INACTIVE.\"",
              "line": 438,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"ABSControl: Diagnostics complete. All systems nominal. System is INACTIVE.\")"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems22airbagSysStateToStringENS_17AirbagSystemStateE",
      "display_signature": "ecu_safety_systems::airbagSysStateToString",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 10,
      "end_line": 22,
      "execution_elements": [
        {
          "type": "SWITCH_BLOCK",
          "line": 11,
          "body_elements": [
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirbagSystemState::SYSTEM_OFF",
              "line": 12,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirbagSystemState::SYSTEM_READY",
              "line": 13,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirbagSystemState::CRASH_DETECTED",
              "line": 14,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirbagSystemState::DEPLOYMENT_TRIGGERED",
              "line": 15,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirbagSystemState::POST_CRASH_SAFE",
              "line": 16,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirbagSystemState::FAULT_SYSTEM_INOPERATIVE",
              "line": 17,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirbagSystemState::FAULT_SENSOR_ISSUE",
              "line": 18,
              "body_elements": []
            },
            {
              "type": "CASE_LABEL",
              "case_expression_text": "AirbagSystemState::FAULT_DEPLOYMENT_CIRCUIT",
              "line": 19,
              "body_elements": []
            },
            {
              "type": "DEFAULT_LABEL",
              "line": 20,
              "body_elements": []
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems16airbagIdToStringB5cxx11ENS_8AirbagIDE",
      "display_signature": "ecu_safety_systems::airbagIdToString",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 25,
      "end_line": 38,
      "execution_elements": []
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControlC1Ev",
      "display_signature": "ecu_safety_systems::AirbagControl",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 41,
      "end_line": 52,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "AirbagControl: Initializing Airbag Control Unit (ACU)...",
          "log_arguments": [],
          "message_args_str_combined": "\"AirbagControl: Initializing Airbag Control Unit (ACU)...\"",
          "line": 46,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Initializing Airbag Control Unit (ACU)...\")"
        },
        {
          "type": "CALL",
          "callee_expression": "initializeSystem()",
          "callee_name_at_call_site": "initializeSystem",
          "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl16initializeSystemEv",
          "callee_resolved_display_name": "ecu_safety_systems::AirbagControl::initializeSystem",
          "line": 51
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControlD1Ev",
      "display_signature": "ecu_safety_systems::~AirbagControl",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 54,
      "end_line": 56,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "AirbagControl: Shutting down ACU. Final system state: %s.",
          "log_arguments": [
            "airbagSysStateToString"
          ],
          "message_args_str_combined": "\"AirbagControl: Shutting down ACU. Final system state: %s.\", airbagSysStateToString",
          "line": 55,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Shutting down ACU. Final system state: %s.\", airbagSysStateToString(system_state_))"
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControl16initializeSystemEv",
      "display_signature": "ecu_safety_systems::initializeSystem",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 58,
      "end_line": 75,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "AirbagControl: Performing ACU power-on self-test (POST)...",
          "log_arguments": [],
          "message_args_str_combined": "\"AirbagControl: Performing ACU power-on self-test (POST)...\"",
          "line": 59,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Performing ACU power-on self-test (POST)...\")"
        },
        {
          "type": "CALL",
          "callee_expression": "runSystemCheck()",
          "callee_name_at_call_site": "runSystemCheck",
          "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl14runSystemCheckEv",
          "callee_resolved_display_name": "ecu_safety_systems::AirbagControl::runSystemCheck",
          "line": 65
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "system_state_ == AirbagSystemState::FAULT_SYSTEM_INOPERATIVE ||         system_state_ == AirbagSystemState::FAULT_SENSOR_ISSUE ||         system_state_ == AirbagSystemState::FAULT_DEPLOYMENT_CIRCUIT",
          "line": 67,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "FATAL",
              "log_format_string": "AirbagControl: ACU POST FAILED. Fault Code: %d. Airbag system is INOPERATIVE.",
              "log_arguments": [
                "fault_code_"
              ],
              "message_args_str_combined": "\"AirbagControl: ACU POST FAILED. Fault Code: %d. Airbag system is INOPERATIVE.\", fault_code_",
              "line": 70,
              "raw_log_statement": "[HeuristicLog:FATAL] LOG_FATAL(\"AirbagControl: ACU POST FAILED. Fault Code: %d. Airbag system is INOPERATIVE.\", fault_code_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "AirbagControl: ACU POST successful. System is READY and ARMED.",
              "log_arguments": [],
              "message_args_str_combined": "\"AirbagControl: ACU POST successful. System is READY and ARMED.\"",
              "line": 73,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: ACU POST successful. System is READY and ARMED.\")"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControl18detectSystemFaultsERKNS_16CrashSensorInputE",
      "display_signature": "ecu_safety_systems::detectSystemFaults",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 77,
      "end_line": 114,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "system_state_ == AirbagSystemState::FAULT_SYSTEM_INOPERATIVE ||         system_state_ == AirbagSystemState::FAULT_SENSOR_ISSUE ||         system_state_ == AirbagSystemState::FAULT_DEPLOYMENT_CIRCUIT",
          "line": 83,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "std::uniform_int_distribution<>(1, 100)(gen) == 1",
              "line": 87,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "AirbagControl: System remains in FAULT state. Code: %d. State: %s",
                  "log_arguments": [
                    "fault_code_",
                    "airbagSysStateToString"
                  ],
                  "message_args_str_combined": "\"AirbagControl: System remains in FAULT state. Code: %d. State: %s\", fault_code_, airbagSysStateToString",
                  "line": 88,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"AirbagControl: System remains in FAULT state. Code: %d. State: %s\",                         fault_code_, airbagSysStateToString(system_state_))"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "std::uniform_int_distribution<>(1, 500)(gen) == 1",
          "line": 95,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "AirbagControl: FAULT DETECTED - Sensor issue (e.g., accelerometer G-sensor %d failure). Fault Code: %d. System degraded.",
              "log_arguments": [
                "[complex_arg]",
                "fault_code_"
              ],
              "message_args_str_combined": "\"AirbagControl: FAULT DETECTED - Sensor issue (e.g., accelerometer G-sensor %d failure). Fault Code: %d. System degraded.\", [complex_arg], fault_code_",
              "line": 98,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"AirbagControl: FAULT DETECTED - Sensor issue (e.g., accelerometer G-sensor %d failure). Fault Code: %d. System degraded.\",                   (rand()%3 + 1), fault_code_)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "std::uniform_int_distribution<>(1, 1000)(gen) == 1",
          "line": 105,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "AirbagControl: FAULT DETECTED - Deployment circuit issue for airbag %s. Fault Code: %d. Specific airbag may not deploy.",
              "log_arguments": [
                "c_str",
                "fault_code_"
              ],
              "message_args_str_combined": "\"AirbagControl: FAULT DETECTED - Deployment circuit issue for airbag %s. Fault Code: %d. Specific airbag may not deploy.\", c_str, fault_code_",
              "line": 109,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"AirbagControl: FAULT DETECTED - Deployment circuit issue for airbag %s. Fault Code: %d. Specific airbag may not deploy.\",                   airbagIdToString(faulty_airbag).c_str(), fault_code_)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 113,
          "body_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControl21evaluateCrashSeverityERKNS_16CrashSensorInputERK12VehicleState",
      "display_signature": "ecu_safety_systems::evaluateCrashSeverity",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 117,
      "end_line": 160,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "impact_data.longitudinal_g < -20.0 && vehicle_state.speed_kmh > 20.0",
          "line": 129,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "AirbagControl: CRITERIA MET - Potential severe frontal impact. G-long: %.1f, Speed: %.1f km/h",
              "log_arguments": [
                "longitudinal_g",
                "speed_kmh"
              ],
              "message_args_str_combined": "\"AirbagControl: CRITERIA MET - Potential severe frontal impact. G-long: %.1f, Speed: %.1f km/h\", longitudinal_g, speed_kmh",
              "line": 132,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"AirbagControl: CRITERIA MET - Potential severe frontal impact. G-long: %.1f, Speed: %.1f km/h\",                     impact_data.longitudinal_g, vehicle_state.speed_kmh)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "AirbagControl: CRITERIA MET - Potential severe side impact. G-lat: %.1f, Speed: %.1f km/h",
              "log_arguments": [
                "lateral_g",
                "speed_kmh"
              ],
              "message_args_str_combined": "\"AirbagControl: CRITERIA MET - Potential severe side impact. G-lat: %.1f, Speed: %.1f km/h\", lateral_g, speed_kmh",
              "line": 139,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"AirbagControl: CRITERIA MET - Potential severe side impact. G-lat: %.1f, Speed: %.1f km/h\",                     impact_data.lateral_g, vehicle_state.speed_kmh)"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "fabs(impact_data.roll_rate_deg_s) > 100.0 && fabs(impact_data.vertical_g) > 2.0",
              "line": 143,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "AirbagControl: CRITERIA MET - Potential rollover. RollRate: %.1f deg/s, G-vert: %.1f",
                  "log_arguments": [
                    "roll_rate_deg_s",
                    "vertical_g"
                  ],
                  "message_args_str_combined": "\"AirbagControl: CRITERIA MET - Potential rollover. RollRate: %.1f deg/s, G-vert: %.1f\", roll_rate_deg_s, vertical_g",
                  "line": 146,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"AirbagControl: CRITERIA MET - Potential rollover. RollRate: %.1f deg/s, G-vert: %.1f\",                     impact_data.roll_rate_deg_s, impact_data.vertical_g)"
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "deploy_criteria_met",
          "line": 150,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "FATAL",
              "log_format_string": "AirbagControl: Event ID %d: CRASH EVENT DETECTED! Type: %s. Preparing for airbag deployment.",
              "log_arguments": [
                "crash_event_id_counter_",
                "c_str"
              ],
              "message_args_str_combined": "\"AirbagControl: Event ID %d: CRASH EVENT DETECTED! Type: %s. Preparing for airbag deployment.\", crash_event_id_counter_, c_str",
              "line": 152,
              "raw_log_statement": "[HeuristicLog:FATAL] LOG_FATAL(\"AirbagControl: Event ID %d: CRASH EVENT DETECTED! Type: %s. Preparing for airbag deployment.\",                   crash_event_id_counter_, crash_type_desc.c_str())"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 157,
          "body_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
      "display_signature": "ecu_safety_systems::fireAirbag",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 162,
      "end_line": 189,
      "execution_elements": [
        {
          "type": "IF_STMT",
          "condition_expression_text": "airbag_idx < 0 || airbag_idx >= static_cast<int>(airbag_deployed_status_.size())",
          "line": 164,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "AirbagControl: Event ID %d: Invalid AirbagID %d specified for firing.",
              "log_arguments": [
                "event_id",
                "airbag_idx"
              ],
              "message_args_str_combined": "\"AirbagControl: Event ID %d: Invalid AirbagID %d specified for firing.\", event_id, airbag_idx",
              "line": 165,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"AirbagControl: Event ID %d: Invalid AirbagID %d specified for firing.\", event_id, airbag_idx)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "system_state_ == AirbagSystemState::FAULT_DEPLOYMENT_CIRCUIT && fault_code_ == 200 + airbag_idx",
          "line": 169,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "AirbagControl: Event ID %d: CANNOT DEPLOY AIRBAG %s. Fault detected in its deployment circuit (Code: %d).",
              "log_arguments": [
                "event_id",
                "c_str",
                "fault_code_"
              ],
              "message_args_str_combined": "\"AirbagControl: Event ID %d: CANNOT DEPLOY AIRBAG %s. Fault detected in its deployment circuit (Code: %d).\", event_id, c_str, fault_code_",
              "line": 170,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"AirbagControl: Event ID %d: CANNOT DEPLOY AIRBAG %s. Fault detected in its deployment circuit (Code: %d).\",                    event_id, airbagIdToString(airbag_to_fire).c_str(), fault_code_)"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!airbag_deployed_status_[airbag_idx]",
          "line": 176,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "FATAL",
              "log_format_string": "AirbagControl: Event ID %d: FIRING AIRBAG %s!",
              "log_arguments": [
                "event_id",
                "c_str"
              ],
              "message_args_str_combined": "\"AirbagControl: Event ID %d: FIRING AIRBAG %s!\", event_id, c_str",
              "line": 181,
              "raw_log_statement": "[HeuristicLog:FATAL] LOG_FATAL(\"AirbagControl: Event ID %d: FIRING AIRBAG %s!\",                   event_id, airbagIdToString(airbag_to_fire).c_str())"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "AirbagControl: Event ID %d: Airbag %s already deployed or commanded.",
              "log_arguments": [
                "event_id",
                "c_str"
              ],
              "message_args_str_combined": "\"AirbagControl: Event ID %d: Airbag %s already deployed or commanded.\", event_id, c_str",
              "line": 186,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"AirbagControl: Event ID %d: Airbag %s already deployed or commanded.\",                     event_id, airbagIdToString(airbag_to_fire).c_str())"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControl25triggerDeploymentSequenceERKNS_16CrashSensorInputE",
      "display_signature": "ecu_safety_systems::triggerDeploymentSequence",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 191,
      "end_line": 238,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "AirbagControl: Event ID %d: Initiating airbag deployment sequence based on impact data.",
          "log_arguments": [
            "crash_event_id_counter_"
          ],
          "message_args_str_combined": "\"AirbagControl: Event ID %d: Initiating airbag deployment sequence based on impact data.\", crash_event_id_counter_",
          "line": 192,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Event ID %d: Initiating airbag deployment sequence based on impact data.\", crash_event_id_counter_)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "impact_data.longitudinal_g < -15.0",
          "line": 199,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "fireAirbag(AirbagID::DRIVER_FRONT, crash_event_id_counter_)",
              "callee_name_at_call_site": "fireAirbag",
              "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
              "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
              "line": 200
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "impact_data.passenger_seat_occupied && impact_data.seatbelt_fastened_passenger",
              "line": 201,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "fireAirbag(AirbagID::PASSENGER_FRONT, crash_event_id_counter_)",
                  "callee_name_at_call_site": "fireAirbag",
                  "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
                  "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
                  "line": 202
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "AirbagControl: Event ID %d: Passenger front airbag NOT deployed (passenger unbelted - simplified rule).",
                  "log_arguments": [
                    "crash_event_id_counter_"
                  ],
                  "message_args_str_combined": "\"AirbagControl: Event ID %d: Passenger front airbag NOT deployed (passenger unbelted - simplified rule).\", crash_event_id_counter_",
                  "line": 204,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"AirbagControl: Event ID %d: Passenger front airbag NOT deployed (passenger unbelted - simplified rule).\", crash_event_id_counter_)"
                },
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "AirbagControl: Event ID %d: Passenger front airbag NOT deployed (passenger seat unoccupied).",
                  "log_arguments": [
                    "crash_event_id_counter_"
                  ],
                  "message_args_str_combined": "\"AirbagControl: Event ID %d: Passenger front airbag NOT deployed (passenger seat unoccupied).\", crash_event_id_counter_",
                  "line": 206,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Event ID %d: Passenger front airbag NOT deployed (passenger seat unoccupied).\", crash_event_id_counter_)"
                }
              ]
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "impact_data.longitudinal_g < -25.0",
              "line": 209,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "fireAirbag(AirbagID::DRIVER_KNEE, crash_event_id_counter_)",
                  "callee_name_at_call_site": "fireAirbag",
                  "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
                  "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
                  "line": 210
                },
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "impact_data.passenger_seat_occupied",
                  "line": 211,
                  "then_branch_elements": [
                    {
                      "type": "CALL",
                      "callee_expression": "fireAirbag(AirbagID::PASSENGER_KNEE, crash_event_id_counter_)",
                      "callee_name_at_call_site": "fireAirbag",
                      "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
                      "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
                      "line": 212
                    }
                  ],
                  "else_branch_elements": []
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "fabs(impact_data.lateral_g) > 10.0",
          "line": 218,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "impact_data.lateral_g > 10.0",
              "line": 219,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "fireAirbag(AirbagID::DRIVER_SIDE_THORAX, crash_event_id_counter_)",
                  "callee_name_at_call_site": "fireAirbag",
                  "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
                  "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
                  "line": 220
                },
                {
                  "type": "CALL",
                  "callee_expression": "fireAirbag(AirbagID::DRIVER_SIDE_CURTAIN, crash_event_id_counter_)",
                  "callee_name_at_call_site": "fireAirbag",
                  "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
                  "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
                  "line": 221
                }
              ],
              "else_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "fireAirbag(AirbagID::PASSENGER_SIDE_THORAX, crash_event_id_counter_)",
                  "callee_name_at_call_site": "fireAirbag",
                  "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
                  "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
                  "line": 223
                },
                {
                  "type": "CALL",
                  "callee_expression": "fireAirbag(AirbagID::PASSENGER_SIDE_CURTAIN, crash_event_id_counter_)",
                  "callee_name_at_call_site": "fireAirbag",
                  "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
                  "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
                  "line": 224
                }
              ]
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "fabs(impact_data.roll_rate_deg_s) > 90.0",
          "line": 229,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "AirbagControl: Event ID %d: Rollover detected, deploying curtain airbags.",
              "log_arguments": [
                "crash_event_id_counter_"
              ],
              "message_args_str_combined": "\"AirbagControl: Event ID %d: Rollover detected, deploying curtain airbags.\", crash_event_id_counter_",
              "line": 230,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Event ID %d: Rollover detected, deploying curtain airbags.\", crash_event_id_counter_)"
            },
            {
              "type": "CALL",
              "callee_expression": "fireAirbag(AirbagID::DRIVER_SIDE_CURTAIN, crash_event_id_counter_)",
              "callee_name_at_call_site": "fireAirbag",
              "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
              "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
              "line": 231
            },
            {
              "type": "CALL",
              "callee_expression": "fireAirbag(AirbagID::PASSENGER_SIDE_CURTAIN, crash_event_id_counter_)",
              "callee_name_at_call_site": "fireAirbag",
              "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl10fireAirbagENS_8AirbagIDEi",
              "callee_resolved_display_name": "ecu_safety_systems::fireAirbag",
              "line": 232
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "AirbagControl: Event ID %d: Airbag deployment sequence commands issued.",
          "log_arguments": [
            "crash_event_id_counter_"
          ],
          "message_args_str_combined": "\"AirbagControl: Event ID %d: Airbag deployment sequence commands issued.\", crash_event_id_counter_",
          "line": 236,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Event ID %d: Airbag deployment sequence commands issued.\", crash_event_id_counter_)"
        },
        {
          "type": "CALL",
          "callee_expression": "enterPostCrashSafeMode(crash_event_id_counter_)",
          "callee_name_at_call_site": "enterPostCrashSafeMode",
          "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl22enterPostCrashSafeModeEi",
          "callee_resolved_display_name": "ecu_safety_systems::AirbagControl::enterPostCrashSafeMode",
          "line": 237
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControl22enterPostCrashSafeModeEi",
      "display_signature": "ecu_safety_systems::enterPostCrashSafeMode",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 240,
      "end_line": 263,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "WARNING",
          "log_format_string": "AirbagControl: Event ID %d: Entering POST-CRASH SAFE MODE.",
          "log_arguments": [
            "event_id"
          ],
          "message_args_str_combined": "\"AirbagControl: Event ID %d: Entering POST-CRASH SAFE MODE.\", event_id",
          "line": 241,
          "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"AirbagControl: Event ID %d: Entering POST-CRASH SAFE MODE.\", event_id)"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "AirbagControl: Event ID %d: Simulating post-crash actions: Doors unlocked, Hazards ON, Fuel pump OFF, eCall initiated.",
          "log_arguments": [
            "event_id"
          ],
          "message_args_str_combined": "\"AirbagControl: Event ID %d: Simulating post-crash actions: Doors unlocked, Hazards ON, Fuel pump OFF, eCall initiated.\", event_id",
          "line": 249,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Event ID %d: Simulating post-crash actions: Doors unlocked, Hazards ON, Fuel pump OFF, eCall initiated.\", event_id)"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "deployed_airbags_list_.empty()",
          "line": 254,
          "then_branch_elements": [],
          "else_branch_elements": [
            {
              "type": "FOR_LOOP",
              "line": 257,
              "body_elements": [
                {
                  "type": "IF_STMT",
                  "condition_expression_text": "i < deployed_airbags_list_.size() - 1",
                  "line": 259,
                  "then_branch_elements": [],
                  "else_branch_elements": []
                }
              ]
            }
          ]
        },
        {
          "type": "LOG",
          "level": "FATAL",
          "log_format_string": "AirbagControl: %s",
          "log_arguments": [
            "c_str"
          ],
          "message_args_str_combined": "\"AirbagControl: %s\", c_str",
          "line": 262,
          "raw_log_statement": "[HeuristicLog:FATAL] LOG_FATAL(\"AirbagControl: %s\", deployed_summary.c_str())"
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControl17processImpactDataERKNS_16CrashSensorInputERK12VehicleState",
      "display_signature": "ecu_safety_systems::processImpactData",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 266,
      "end_line": 304,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "AirbagControl: Processing impact data. G-long: %.2f, G-lat: %.2f, G-vert: %.2f, Roll: %.2f, Speed: %.1f",
          "log_arguments": [
            "longitudinal_g",
            "lateral_g",
            "vertical_g",
            "roll_rate_deg_s",
            "speed_kmh"
          ],
          "message_args_str_combined": "\"AirbagControl: Processing impact data. G-long: %.2f, G-lat: %.2f, G-vert: %.2f, Roll: %.2f, Speed: %.1f\", longitudinal_g, lateral_g, vertical_g, roll_rate_deg_s, speed_kmh",
          "line": 267,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"AirbagControl: Processing impact data. G-long: %.2f, G-lat: %.2f, G-vert: %.2f, Roll: %.2f, Speed: %.1f\",               impact_data.longitudinal_g, impact_data.lateral_g, impact_data.vertical_g,               impact_data.roll_rate_deg_s, vehicle_state.speed_kmh)"
        },
        {
          "type": "CALL",
          "callee_expression": "detectSystemFaults(impact_data)",
          "callee_name_at_call_site": "detectSystemFaults",
          "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl18detectSystemFaultsERKNS_16CrashSensorInputE",
          "callee_resolved_display_name": "ecu_safety_systems::detectSystemFaults",
          "line": 272
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "system_state_ == AirbagSystemState::SYSTEM_OFF ||         system_state_ == AirbagSystemState::FAULT_SYSTEM_INOPERATIVE",
          "line": 276,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "AirbagControl: System is OFF or Inoperative. Impact data processing skipped.",
              "log_arguments": [],
              "message_args_str_combined": "\"AirbagControl: System is OFF or Inoperative. Impact data processing skipped.\"",
              "line": 278,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: System is OFF or Inoperative. Impact data processing skipped.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "vehicle_state.speed_kmh < 5.0 && system_state_ == AirbagSystemState::SYSTEM_READY",
          "line": 281,
          "then_branch_elements": [
            {
              "type": "DO_WHILE_LOOP",
              "line": 282,
              "body_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "system_state_ == AirbagSystemState::SYSTEM_READY || system_state_ == AirbagSystemState::FAULT_SENSOR_ISSUE || system_state_ == AirbagSystemState::FAULT_DEPLOYMENT_CIRCUIT",
          "line": 289,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "evaluateCrashSeverity(impact_data, vehicle_state)",
              "line": 291,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "triggerDeploymentSequence(impact_data)",
                  "callee_name_at_call_site": "triggerDeploymentSequence",
                  "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl25triggerDeploymentSequenceERKNS_16CrashSensorInputE",
                  "callee_resolved_display_name": "ecu_safety_systems::triggerDeploymentSequence",
                  "line": 292
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "AirbagControl: Currently in crash/deployment state (%s). Monitoring for stability or secondary events (not fully simulated).",
              "log_arguments": [
                "airbagSysStateToString"
              ],
              "message_args_str_combined": "\"AirbagControl: Currently in crash/deployment state (%s). Monitoring for stability or secondary events (not fully simulated).\", airbagSysStateToString",
              "line": 297,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Currently in crash/deployment state (%s). Monitoring for stability or secondary events (not fully simulated).\",                  airbagSysStateToString(system_state_))"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "system_state_ == AirbagSystemState::POST_CRASH_SAFE",
              "line": 299,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "AirbagControl: System in POST_CRASH_SAFE mode. No further impact processing for this event.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"AirbagControl: System in POST_CRASH_SAFE mode. No further impact processing for this event.\"",
                  "line": 300,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: System in POST_CRASH_SAFE mode. No further impact processing for this event.\")"
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "AirbagControl: Impact data processing cycle complete. System state: %s",
          "log_arguments": [
            "airbagSysStateToString"
          ],
          "message_args_str_combined": "\"AirbagControl: Impact data processing cycle complete. System state: %s\", airbagSysStateToString",
          "line": 303,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"AirbagControl: Impact data processing cycle complete. System state: %s\", airbagSysStateToString(system_state_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK18ecu_safety_systems13AirbagControl14getSystemStateEv",
      "display_signature": "ecu_safety_systems::getSystemState",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 306,
      "end_line": 309,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "AirbagControl: getSystemState() -> %s",
          "log_arguments": [
            "airbagSysStateToString"
          ],
          "message_args_str_combined": "\"AirbagControl: getSystemState() -> %s\", airbagSysStateToString",
          "line": 307,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"AirbagControl: getSystemState() -> %s\", airbagSysStateToString(system_state_))"
        }
      ]
    },
    {
      "function_id_key": "_ZNK18ecu_safety_systems13AirbagControl18getDeployedAirbagsEv",
      "display_signature": "ecu_safety_systems::getDeployedAirbags",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 311,
      "end_line": 314,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "AirbagControl: getDeployedAirbags() called. Count: %zu",
          "log_arguments": [
            "size"
          ],
          "message_args_str_combined": "\"AirbagControl: getDeployedAirbags() called. Count: %zu\", size",
          "line": 312,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"AirbagControl: getDeployedAirbags() called. Count: %zu\", deployed_airbags_list_.size())"
        }
      ]
    },
    {
      "function_id_key": "_ZN18ecu_safety_systems13AirbagControl14runSystemCheckEv",
      "display_signature": "ecu_safety_systems::runSystemCheck",
      "file": "ecu_safety_systems/airbag_control.cpp",
      "line": 316,
      "end_line": 352,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "AirbagControl: Performing ACU ad-hoc system check...",
          "log_arguments": [],
          "message_args_str_combined": "\"AirbagControl: Performing ACU ad-hoc system check...\"",
          "line": 317,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Performing ACU ad-hoc system check...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "std::uniform_int_distribution<>(1, 50)(gen) == 1",
          "line": 326,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "AirbagControl: AD-HOC CHECK FAULT: Main G-Sensor unresponsive. Code: %d",
              "log_arguments": [
                "fault_code_"
              ],
              "message_args_str_combined": "\"AirbagControl: AD-HOC CHECK FAULT: Main G-Sensor unresponsive. Code: %d\", fault_code_",
              "line": 329,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"AirbagControl: AD-HOC CHECK FAULT: Main G-Sensor unresponsive. Code: %d\", fault_code_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "AirbagControl: AD-HOC CHECK: G-Sensors OK.",
              "log_arguments": [],
              "message_args_str_combined": "\"AirbagControl: AD-HOC CHECK: G-Sensors OK.\"",
              "line": 331,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: AD-HOC CHECK: G-Sensors OK.\")"
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "std::uniform_int_distribution<>(1, 20)(gen) == 1 && system_state_ != AirbagSystemState::FAULT_SENSOR_ISSUE",
          "line": 335,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "AirbagControl: AD-HOC CHECK FAULT: Open circuit detected for airbag %s. Code: %d",
              "log_arguments": [
                "c_str",
                "fault_code_"
              ],
              "message_args_str_combined": "\"AirbagControl: AD-HOC CHECK FAULT: Open circuit detected for airbag %s. Code: %d\", c_str, fault_code_",
              "line": 339,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"AirbagControl: AD-HOC CHECK FAULT: Open circuit detected for airbag %s. Code: %d\",                   airbagIdToString(faulty_airbag).c_str(), fault_code_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "AirbagControl: AD-HOC CHECK: Squib circuits OK.",
              "log_arguments": [],
              "message_args_str_combined": "\"AirbagControl: AD-HOC CHECK: Squib circuits OK.\"",
              "line": 342,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: AD-HOC CHECK: Squib circuits OK.\")"
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "system_state_ == AirbagSystemState::FAULT_SENSOR_ISSUE || system_state_ == AirbagSystemState::FAULT_DEPLOYMENT_CIRCUIT",
          "line": 345,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "AirbagControl: Ad-hoc system check complete. NEW FAULT(s) DETECTED. System state: %s, Code: %d",
              "log_arguments": [
                "airbagSysStateToString",
                "fault_code_"
              ],
              "message_args_str_combined": "\"AirbagControl: Ad-hoc system check complete. NEW FAULT(s) DETECTED. System state: %s, Code: %d\", airbagSysStateToString, fault_code_",
              "line": 346,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"AirbagControl: Ad-hoc system check complete. NEW FAULT(s) DETECTED. System state: %s, Code: %d\",                     airbagSysStateToString(system_state_), fault_code_)"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "AirbagControl: Ad-hoc system check complete. No new faults. System state: %s",
              "log_arguments": [
                "airbagSysStateToString"
              ],
              "message_args_str_combined": "\"AirbagControl: Ad-hoc system check complete. No new faults. System state: %s\", airbagSysStateToString",
              "line": 350,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"AirbagControl: Ad-hoc system check complete. No new faults. System state: %s\", airbagSysStateToString(system_state_))"
            }
          ]
        }
      ]
    },
    {
      "function_id_key": "main",
      "display_signature": "main",
      "file": "main_application/main.cpp",
      "line": 8,
      "end_line": 31,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "main: Application Entry Point.",
          "log_arguments": [],
          "message_args_str_combined": "\"main: Application Entry Point.\"",
          "line": 13,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"main: Application Entry Point.\")"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "main: Initializing all vehicle systems via MainVehicleController...",
          "log_arguments": [],
          "message_args_str_combined": "\"main: Initializing all vehicle systems via MainVehicleController...\"",
          "line": 17,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"main: Initializing all vehicle systems via MainVehicleController...\")"
        },
        {
          "type": "CALL",
          "callee_expression": "vehicle_controller.initializeAllSystems()",
          "callee_name_at_call_site": "initializeAllSystems",
          "callee_resolved_key": "_ZN16main_application21MainVehicleController20initializeAllSystemsEv",
          "callee_resolved_display_name": "main_application::MainVehicleController::initializeAllSystems",
          "line": 18
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "main: All systems initialized.",
          "log_arguments": [],
          "message_args_str_combined": "\"main: All systems initialized.\"",
          "line": 19,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"main: All systems initialized.\")"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "main: Starting simulated driving cycle...",
          "log_arguments": [],
          "message_args_str_combined": "\"main: Starting simulated driving cycle...\"",
          "line": 22,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"main: Starting simulated driving cycle...\")"
        },
        {
          "type": "CALL",
          "callee_expression": "vehicle_controller.simulateDrivingCycle()",
          "callee_name_at_call_site": "simulateDrivingCycle",
          "callee_resolved_key": "_ZN16main_application21MainVehicleController20simulateDrivingCycleEv",
          "callee_resolved_display_name": "main_application::MainVehicleController::simulateDrivingCycle",
          "line": 23
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "main: Simulated driving cycle finished.",
          "log_arguments": [],
          "message_args_str_combined": "\"main: Simulated driving cycle finished.\"",
          "line": 24,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"main: Simulated driving cycle finished.\")"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "main: Application will now exit.",
          "log_arguments": [],
          "message_args_str_combined": "\"main: Application will now exit.\"",
          "line": 28,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"main: Application will now exit.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleControllerC1Ev",
      "display_signature": "main_application::MainVehicleController",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 11,
      "end_line": 52,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Initializing...",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Initializing...\"",
          "line": 16,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Initializing...\")"
        },
        {
          "type": "FOR_LOOP",
          "line": 47,
          "body_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: All core ECU instances created.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: All core ECU instances created.\"",
          "line": 51,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: All core ECU instances created.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleControllerD1Ev",
      "display_signature": "main_application::~MainVehicleController",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 54,
      "end_line": 74,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Shutting down...",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Shutting down...\"",
          "line": 55,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Shutting down...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "ignition_on_",
          "line": 56,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "handleIgnitionOff()",
              "callee_name_at_call_site": "handleIgnitionOff",
              "callee_resolved_key": "_ZN16main_application21MainVehicleController17handleIgnitionOffEv",
              "callee_resolved_display_name": "main_application::MainVehicleController::handleIgnitionOff",
              "line": 57
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "callee_expression": "shutdownAllSystems()",
          "callee_name_at_call_site": "shutdownAllSystems",
          "callee_resolved_key": "_ZN16main_application21MainVehicleController18shutdownAllSystemsEv",
          "callee_resolved_display_name": "main_application::MainVehicleController::shutdownAllSystems",
          "line": 59
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Shutdown complete. All ECU instances deleted.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Shutdown complete. All ECU instances deleted.\"",
          "line": 73,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Shutdown complete. All ECU instances deleted.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleController20initializeAllSystemsEv",
      "display_signature": "main_application::initializeAllSystems",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 76,
      "end_line": 91,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Initializing all vehicle systems...",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Initializing all vehicle systems...\"",
          "line": 77,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Initializing all vehicle systems...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "abs_control_",
          "line": 86,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "airbag_control_",
          "line": 87,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: All vehicle systems initialized.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: All vehicle systems initialized.\"",
          "line": 90,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: All vehicle systems initialized.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleController24updateVehicleStateInputsEv",
      "display_signature": "main_application::updateVehicleStateInputs",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 93,
      "end_line": 147,
      "execution_elements": [
        {
          "type": "DO_WHILE_LOOP",
          "line": 94,
          "body_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_",
          "line": 97,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "transmission_manager_ && transmission_manager_->getCurrentGear() > 0 && current_vehicle_state_.engine_rpm > 0",
              "line": 100,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "current_vehicle_state_.speed_kmh < -30.0",
              "line": 110,
              "then_branch_elements": [],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "FOR_LOOP",
          "line": 124,
          "body_elements": []
        },
        {
          "type": "DO_WHILE_LOOP",
          "line": 145,
          "body_elements": []
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleController18periodicECUUpdatesEv",
      "display_signature": "main_application::periodicECUUpdates",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 150,
      "end_line": 186,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MainVehicleController: Performing periodic ECU updates...",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Performing periodic ECU updates...\"",
          "line": 151,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MainVehicleController: Performing periodic ECU updates...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "power_monitor_",
          "line": 153,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_",
          "line": 156,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "transmission_manager_ && engine_manager_",
          "line": 157,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "transmission_manager_->updateState(current_vehicle_state_, engine_manager_->getCurrentRPM())",
              "callee_name_at_call_site": "updateState",
              "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager11updateStateERK12VehicleStatei",
              "callee_resolved_display_name": "ecu_powertrain_control::TransmissionManager::updateState",
              "line": 158
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "climate_control_",
          "line": 162,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "climate_control_->updateClimateState(current_vehicle_state_, int_temp, ext_temp)",
              "callee_name_at_call_site": "updateClimateState",
              "callee_resolved_key": "_ZN23ecu_body_control_module14ClimateControl18updateClimateStateERK12VehicleStateRK10SensorDataS6_",
              "callee_resolved_display_name": "ecu_body_control_module::ClimateControl::updateClimateState",
              "line": 165
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "lighting_control_",
          "line": 167,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "window_control_",
          "line": 168,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "media_player_",
          "line": 171,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "navigation_system_",
          "line": 172,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "abs_control_",
          "line": 175,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "abs_control_->processBraking(current_vehicle_state_, current_wheel_speed_sensors_, current_brake_pedal_pressure_)",
              "callee_name_at_call_site": "processBraking",
              "callee_resolved_key": "_ZN18ecu_safety_systems10ABSControl14processBrakingERK12VehicleStateRKSt6vectorI10SensorDataSaIS5_EEd",
              "callee_resolved_display_name": "ecu_safety_systems::ABSControl::processBraking",
              "line": 176
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "airbag_control_",
          "line": 178,
          "then_branch_elements": [
            {
              "type": "CALL",
              "callee_expression": "airbag_control_->processImpactData(current_crash_sensors_input_, current_vehicle_state_)",
              "callee_name_at_call_site": "processImpactData",
              "callee_resolved_key": "_ZN18ecu_safety_systems13AirbagControl17processImpactDataERKNS_16CrashSensorInputERK12VehicleState",
              "callee_resolved_display_name": "ecu_safety_systems::AirbagControl::processImpactData",
              "line": 183
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MainVehicleController: Periodic ECU updates complete.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Periodic ECU updates complete.\"",
          "line": 185,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MainVehicleController: Periodic ECU updates complete.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleController17checkSystemHealthEv",
      "display_signature": "main_application::checkSystemHealth",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 188,
      "end_line": 211,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MainVehicleController: Performing periodic system health checks...",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Performing periodic system health checks...\"",
          "line": 189,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MainVehicleController: Performing periodic system health checks...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_",
          "line": 190,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "engine_manager_->getCurrentRPM() == 0 && ignition_on_ && engine_manager_->getEngineState().status_message.find(\"FAULT\") != std::string::npos",
              "line": 192,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "MainVehicleController: Health Check: Engine is off but reported FAULT while ignition is ON.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"MainVehicleController: Health Check: Engine is off but reported FAULT while ignition is ON.\"",
                  "line": 193,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MainVehicleController: Health Check: Engine is off but reported FAULT while ignition is ON.\")"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "abs_control_",
          "line": 196,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "abs_control_->getCurrentState() == ecu_safety_systems::ABSState::FAULT_DETECTED",
              "line": 197,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "MainVehicleController: Health Check: ABS System reports FAULT_DETECTED.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"MainVehicleController: Health Check: ABS System reports FAULT_DETECTED.\"",
                  "line": 198,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MainVehicleController: Health Check: ABS System reports FAULT_DETECTED.\")"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "airbag_control_",
          "line": 201,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "condition_expression_text": "airbag_state == ecu_safety_systems::AirbagSystemState::FAULT_SYSTEM_INOPERATIVE ||             airbag_state == ecu_safety_systems::AirbagSystemState::FAULT_SENSOR_ISSUE ||             airbag_state == ecu_safety_systems::AirbagSystemState::FAULT_DEPLOYMENT_CIRCUIT",
              "line": 203,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARNING",
                  "log_format_string": "MainVehicleController: Health Check: Airbag System reports FAULT (%s).",
                  "log_arguments": [
                    "airbagSysStateToString"
                  ],
                  "message_args_str_combined": "\"MainVehicleController: Health Check: Airbag System reports FAULT (%s).\", airbagSysStateToString",
                  "line": 206,
                  "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MainVehicleController: Health Check: Airbag System reports FAULT (%s).\", ecu_safety_systems::airbagSysStateToString(airbag_state))"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: System health checks complete.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: System health checks complete.\"",
          "line": 210,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: System health checks complete.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleController11runMainLoopEv",
      "display_signature": "main_application::runMainLoop",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 214,
      "end_line": 255,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Starting main vehicle operation loop...",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Starting main vehicle operation loop...\"",
          "line": 215,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Starting main vehicle operation loop...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!ignition_on_",
          "line": 216,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MainVehicleController: Cannot run main loop. Ignition is OFF.",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: Cannot run main loop. Ignition is OFF.\"",
              "line": 217,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MainVehicleController: Cannot run main loop. Ignition is OFF.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "WHILE_LOOP",
          "line": 226,
          "body_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: Main Loop Cycle %d/%d",
              "log_arguments": [
                "main_loop_cycles_",
                "max_cycles"
              ],
              "message_args_str_combined": "\"MainVehicleController: Main Loop Cycle %d/%d\", main_loop_cycles_, max_cycles",
              "line": 228,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Main Loop Cycle %d/%d\", main_loop_cycles_, max_cycles)"
            },
            {
              "type": "CALL",
              "callee_expression": "updateVehicleStateInputs()",
              "callee_name_at_call_site": "updateVehicleStateInputs",
              "callee_resolved_key": "_ZN16main_application21MainVehicleController24updateVehicleStateInputsEv",
              "callee_resolved_display_name": "main_application::updateVehicleStateInputs",
              "line": 233
            },
            {
              "type": "CALL",
              "callee_expression": "periodicECUUpdates()",
              "callee_name_at_call_site": "periodicECUUpdates",
              "callee_resolved_key": "_ZN16main_application21MainVehicleController18periodicECUUpdatesEv",
              "callee_resolved_display_name": "main_application::periodicECUUpdates",
              "line": 236
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "main_loop_cycles_ % 5 == 0",
              "line": 239,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "callee_expression": "checkSystemHealth()",
                  "callee_name_at_call_site": "checkSystemHealth",
                  "callee_resolved_key": "_ZN16main_application21MainVehicleController17checkSystemHealthEv",
                  "callee_resolved_display_name": "main_application::checkSystemHealth",
                  "line": 240
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: End of Main Loop Cycle %d",
              "log_arguments": [
                "main_loop_cycles_"
              ],
              "message_args_str_combined": "\"MainVehicleController: End of Main Loop Cycle %d\", main_loop_cycles_",
              "line": 245,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: End of Main Loop Cycle %d\", main_loop_cycles_)"
            }
          ]
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "main_loop_cycles_ >= max_cycles",
          "line": 251,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: Reached max simulation cycles for main loop.",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: Reached max simulation cycles for main loop.\"",
              "line": 252,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Reached max simulation cycles for main loop.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Exiting main vehicle operation loop.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Exiting main vehicle operation loop.\"",
          "line": 254,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Exiting main vehicle operation loop.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleController16handleIgnitionOnEv",
      "display_signature": "main_application::handleIgnitionOn",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 257,
      "end_line": 276,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "FATAL",
          "log_format_string": "MainVehicleController: IGNITION ON sequence started.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: IGNITION ON sequence started.\"",
          "line": 258,
          "raw_log_statement": "[HeuristicLog:FATAL] LOG_FATAL(\"MainVehicleController: IGNITION ON sequence started.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "power_monitor_",
          "line": 261,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_",
          "line": 264,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "airbag_control_",
          "line": 267,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "abs_control_",
          "line": 268,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "media_player_",
          "line": 271,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "climate_control_",
          "line": 272,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Ignition ON sequence complete. Vehicle systems ready.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Ignition ON sequence complete. Vehicle systems ready.\"",
          "line": 275,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Ignition ON sequence complete. Vehicle systems ready.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleController17handleIgnitionOffEv",
      "display_signature": "main_application::handleIgnitionOff",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 278,
      "end_line": 294,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "FATAL",
          "log_format_string": "MainVehicleController: IGNITION OFF sequence started.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: IGNITION OFF sequence started.\"",
          "line": 279,
          "raw_log_statement": "[HeuristicLog:FATAL] LOG_FATAL(\"MainVehicleController: IGNITION OFF sequence started.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_ && engine_manager_->getCurrentRPM() > 0",
          "line": 283,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: Engine is running. Requesting engine stop.",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: Engine is running. Requesting engine stop.\"",
              "line": 284,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Engine is running. Requesting engine stop.\")"
            },
            {
              "type": "CALL",
              "callee_expression": "engine_manager_->stopEngine()",
              "callee_name_at_call_site": "stopEngine",
              "callee_resolved_key": "_ZN22ecu_powertrain_control13EngineManager10stopEngineEv",
              "callee_resolved_display_name": "ecu_powertrain_control::EngineManager::stopEngine",
              "line": 285
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "media_player_",
          "line": 287,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "navigation_system_",
          "line": 288,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "climate_control_",
          "line": 289,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Ignition OFF sequence complete. Systems shutting down.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Ignition OFF sequence complete. Systems shutting down.\"",
          "line": 292,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Ignition OFF sequence complete. Systems shutting down.\")"
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleController20simulateDrivingCycleEv",
      "display_signature": "main_application::simulateDrivingCycle",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 296,
      "end_line": 365,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Starting SIMULATED DRIVING CYCLE.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Starting SIMULATED DRIVING CYCLE.\"",
          "line": 297,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Starting SIMULATED DRIVING CYCLE.\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!ignition_on_",
          "line": 298,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARNING",
              "log_format_string": "MainVehicleController: Cannot start driving cycle, ignition is OFF. Turning ignition ON.",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: Cannot start driving cycle, ignition is OFF. Turning ignition ON.\"",
              "line": 299,
              "raw_log_statement": "[HeuristicLog:WARNING] LOG_WARNING(\"MainVehicleController: Cannot start driving cycle, ignition is OFF. Turning ignition ON.\")"
            },
            {
              "type": "CALL",
              "callee_expression": "handleIgnitionOn()",
              "callee_name_at_call_site": "handleIgnitionOn",
              "callee_resolved_key": "_ZN16main_application21MainVehicleController16handleIgnitionOnEv",
              "callee_resolved_display_name": "main_application::handleIgnitionOn",
              "line": 300
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "!engine_manager_",
          "line": 302,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "MainVehicleController: EngineManager not available. Cannot simulate driving cycle.",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: EngineManager not available. Cannot simulate driving cycle.\"",
              "line": 303,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"MainVehicleController: EngineManager not available. Cannot simulate driving cycle.\")"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: DRIVING_CYCLE: Starting engine...",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Starting engine...\"",
          "line": 308,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Starting engine...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "engine_manager_->startEngine()",
          "line": 309,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: DRIVING_CYCLE: Engine started.",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Engine started.\"",
              "line": 310,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Engine started.\")"
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "transmission_manager_",
              "line": 313,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "MainVehicleController: DRIVING_CYCLE: Setting transmission to DRIVE.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Setting transmission to DRIVE.\"",
                  "line": 314,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Setting transmission to DRIVE.\")"
                },
                {
                  "type": "CALL",
                  "callee_expression": "transmission_manager_->setTransmissionMode(ecu_powertrain_control::TransmissionMode::DRIVE)",
                  "callee_name_at_call_site": "setTransmissionMode",
                  "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager19setTransmissionModeENS_16TransmissionModeE",
                  "callee_resolved_display_name": "ecu_powertrain_control::TransmissionManager::setTransmissionMode",
                  "line": 315
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: DRIVING_CYCLE: Accelerating...",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Accelerating...\"",
              "line": 320,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Accelerating...\")"
            },
            {
              "type": "CALL",
              "callee_expression": "engine_manager_->setTargetRPM(2500)",
              "callee_name_at_call_site": "setTargetRPM",
              "callee_resolved_key": "_ZN22ecu_powertrain_control13EngineManager12setTargetRPMEi",
              "callee_resolved_display_name": "ecu_powertrain_control::EngineManager::setTargetRPM",
              "line": 321
            },
            {
              "type": "CALL",
              "callee_expression": "runMainLoop()",
              "callee_name_at_call_site": "runMainLoop",
              "callee_resolved_key": "_ZN16main_application21MainVehicleController11runMainLoopEv",
              "callee_resolved_display_name": "main_application::runMainLoop",
              "line": 322
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: DRIVING_CYCLE: Cruising...",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Cruising...\"",
              "line": 324,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Cruising...\")"
            },
            {
              "type": "CALL",
              "callee_expression": "engine_manager_->setTargetRPM(2000)",
              "callee_name_at_call_site": "setTargetRPM",
              "callee_resolved_key": "_ZN22ecu_powertrain_control13EngineManager12setTargetRPMEi",
              "callee_resolved_display_name": "ecu_powertrain_control::EngineManager::setTargetRPM",
              "line": 325
            },
            {
              "type": "CALL",
              "callee_expression": "runMainLoop()",
              "callee_name_at_call_site": "runMainLoop",
              "callee_resolved_key": "_ZN16main_application21MainVehicleController11runMainLoopEv",
              "callee_resolved_display_name": "main_application::runMainLoop",
              "line": 326
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: DRIVING_CYCLE: Hard braking simulation (for ABS test)...",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Hard braking simulation (for ABS test)...\"",
              "line": 328,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Hard braking simulation (for ABS test)...\")"
            },
            {
              "type": "CALL",
              "callee_expression": "runMainLoop()",
              "callee_name_at_call_site": "runMainLoop",
              "callee_resolved_key": "_ZN16main_application21MainVehicleController11runMainLoopEv",
              "callee_resolved_display_name": "main_application::runMainLoop",
              "line": 331
            },
            {
              "type": "LOG",
              "level": "FATAL",
              "log_format_string": "MainVehicleController: DRIVING_CYCLE: !!! SIMULATING CRASH EVENT !!!",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: !!! SIMULATING CRASH EVENT !!!\"",
              "line": 335,
              "raw_log_statement": "[HeuristicLog:FATAL] LOG_FATAL(\"MainVehicleController: DRIVING_CYCLE: !!! SIMULATING CRASH EVENT !!!\")"
            },
            {
              "type": "CALL",
              "callee_expression": "runMainLoop()",
              "callee_name_at_call_site": "runMainLoop",
              "callee_resolved_key": "_ZN16main_application21MainVehicleController11runMainLoopEv",
              "callee_resolved_display_name": "main_application::runMainLoop",
              "line": 338
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: DRIVING_CYCLE: Crash event processed. System may be in post-crash mode.",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Crash event processed. System may be in post-crash mode.\"",
              "line": 341,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Crash event processed. System may be in post-crash mode.\")"
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: DRIVING_CYCLE: Coming to a stop...",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Coming to a stop...\"",
              "line": 344,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Coming to a stop...\")"
            },
            {
              "type": "CALL",
              "callee_expression": "engine_manager_->setTargetRPM(800)",
              "callee_name_at_call_site": "setTargetRPM",
              "callee_resolved_key": "_ZN22ecu_powertrain_control13EngineManager12setTargetRPMEi",
              "callee_resolved_display_name": "ecu_powertrain_control::EngineManager::setTargetRPM",
              "line": 345
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "transmission_manager_",
              "line": 346,
              "then_branch_elements": [],
              "else_branch_elements": []
            },
            {
              "type": "CALL",
              "callee_expression": "runMainLoop()",
              "callee_name_at_call_site": "runMainLoop",
              "callee_resolved_key": "_ZN16main_application21MainVehicleController11runMainLoopEv",
              "callee_resolved_display_name": "main_application::runMainLoop",
              "line": 349
            },
            {
              "type": "IF_STMT",
              "condition_expression_text": "transmission_manager_",
              "line": 352,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "log_format_string": "MainVehicleController: DRIVING_CYCLE: Setting transmission to PARK.",
                  "log_arguments": [],
                  "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Setting transmission to PARK.\"",
                  "line": 353,
                  "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Setting transmission to PARK.\")"
                },
                {
                  "type": "CALL",
                  "callee_expression": "transmission_manager_->setTransmissionMode(ecu_powertrain_control::TransmissionMode::PARK)",
                  "callee_name_at_call_site": "setTransmissionMode",
                  "callee_resolved_key": "_ZN22ecu_powertrain_control19TransmissionManager19setTransmissionModeENS_16TransmissionModeE",
                  "callee_resolved_display_name": "ecu_powertrain_control::TransmissionManager::setTransmissionMode",
                  "line": 354
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "LOG",
              "level": "INFO",
              "log_format_string": "MainVehicleController: DRIVING_CYCLE: Stopping engine...",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Stopping engine...\"",
              "line": 356,
              "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: DRIVING_CYCLE: Stopping engine...\")"
            },
            {
              "type": "CALL",
              "callee_expression": "engine_manager_->stopEngine()",
              "callee_name_at_call_site": "stopEngine",
              "callee_resolved_key": "_ZN22ecu_powertrain_control13EngineManager10stopEngineEv",
              "callee_resolved_display_name": "ecu_powertrain_control::EngineManager::stopEngine",
              "line": 357
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "log_format_string": "MainVehicleController: DRIVING_CYCLE: Engine failed to start. Aborting cycle.",
              "log_arguments": [],
              "message_args_str_combined": "\"MainVehicleController: DRIVING_CYCLE: Engine failed to start. Aborting cycle.\"",
              "line": 360,
              "raw_log_statement": "[HeuristicLog:ERROR] LOG_ERROR(\"MainVehicleController: DRIVING_CYCLE: Engine failed to start. Aborting cycle.\")"
            }
          ]
        },
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: SIMULATED DRIVING CYCLE complete.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: SIMULATED DRIVING CYCLE complete.\"",
          "line": 363,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: SIMULATED DRIVING CYCLE complete.\")"
        },
        {
          "type": "CALL",
          "callee_expression": "handleIgnitionOff()",
          "callee_name_at_call_site": "handleIgnitionOff",
          "callee_resolved_key": "_ZN16main_application21MainVehicleController17handleIgnitionOffEv",
          "callee_resolved_display_name": "main_application::handleIgnitionOff",
          "line": 364
        }
      ]
    },
    {
      "function_id_key": "_ZN16main_application21MainVehicleController18shutdownAllSystemsEv",
      "display_signature": "main_application::shutdownAllSystems",
      "file": "main_application/main_vehicle_controller.cpp",
      "line": 368,
      "end_line": 376,
      "execution_elements": [
        {
          "type": "LOG",
          "level": "INFO",
          "log_format_string": "MainVehicleController: Explicitly shutting down all ECU functionalities if applicable...",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: Explicitly shutting down all ECU functionalities if applicable...\"",
          "line": 369,
          "raw_log_statement": "[HeuristicLog:INFO] LOG_INFO(\"MainVehicleController: Explicitly shutting down all ECU functionalities if applicable...\")"
        },
        {
          "type": "IF_STMT",
          "condition_expression_text": "media_player_",
          "line": 373,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "log_format_string": "MainVehicleController: System shutdown commands issued.",
          "log_arguments": [],
          "message_args_str_combined": "\"MainVehicleController: System shutdown commands issued.\"",
          "line": 375,
          "raw_log_statement": "[HeuristicLog:DEBUG] LOG_DEBUG(\"MainVehicleController: System shutdown commands issued.\")"
        }
      ]
    }
  ],
  "clang_diagnostics": {
    "ecu_powertrain_control/transmission_manager.cpp": [
      {
        "severity": "WARNING",
        "line": 223,
        "column": 13,
        "message": "data argument not used by format string"
      }
    ],
    "ecu_infotainment/navigation_system.cpp": [
      {
        "severity": "WARNING",
        "line": 224,
        "column": 5,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 238,
        "column": 5,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 441,
        "column": 9,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      }
    ],
    "ecu_infotainment/media_player.cpp": [
      {
        "severity": "WARNING",
        "line": 146,
        "column": 5,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 209,
        "column": 9,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 281,
        "column": 5,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 297,
        "column": 9,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 297,
        "column": 9,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 306,
        "column": 5,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 374,
        "column": 9,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 377,
        "column": 9,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 455,
        "column": 13,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      },
      {
        "severity": "WARNING",
        "line": 455,
        "column": 13,
        "message": "format specifies type 'long long' but the argument has type 'std::chrono::duration<long, std::ratio<1, 1> >::rep' (aka 'long')"
      }
    ]
  }
}