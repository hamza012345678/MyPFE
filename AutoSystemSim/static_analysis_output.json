{
  "functions": {
    "Automotive::ECUs::InfotainmentModule": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 8,
      "line_end": 15,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "IHU",
          "ctId": "INIT",
          "message_template": "InfotainmentModule constructor. Lang: EN_US, Vol: 50, NowPlaying: FM Radio - 98.5 MHz.",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 14,
          "function": "Automotive::ECUs::InfotainmentModule"
        }
      ]
    },
    "Automotive::ECUs::~InfotainmentModule": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 17,
      "line_end": 30,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_nowPlaying == \"Bohemian Rhapsody - USB\"",
          "line": 19,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "SHTDWN",
              "message_template": "InfotainmentModule destructor. Last playing: 'Bohemian Rhapsody - USB'.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 20,
              "function": "Automotive::ECUs::~InfotainmentModule::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! logged && m_nowPlaying == \"FM Radio - 98.5 MHz\"",
          "line": 23,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "SHTDWN",
              "message_template": "InfotainmentModule destructor. Last playing: 'FM Radio - 98.5 MHz'.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 24,
              "function": "Automotive::ECUs::~InfotainmentModule::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! logged",
          "line": 27,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "SHTDWN",
              "message_template": "InfotainmentModule destructor. Last playing: [Other Media Source].",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 28,
              "function": "Automotive::ECUs::~InfotainmentModule::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::initialize": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 32,
      "line_end": 70,
      "execution_elements_structured": [
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::InfotainmentModule::initialize",
          "callee": "std::__cxx11::basic_string::operator=",
          "file": "src/InfotainmentModule.cpp",
          "line": 34
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "systemLanguageParam == \"FR_CA\"",
          "line": 36,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "INIT",
              "message_template": "Initializing IHU. Requested Lang: 'FR_CA'. Setting current.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 37,
              "function": "Automotive::ECUs::InfotainmentModule::initialize::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::InfotainmentModule::initialize::if_then",
              "callee": "std::__cxx11::basic_string::operator=",
              "file": "src/InfotainmentModule.cpp",
              "line": 38
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "CONF",
              "message_template": "HMI assets for 'FR_CA'. Load time: 250 ms.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 39,
              "function": "Automotive::ECUs::InfotainmentModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! languageSet && systemLanguageParam == \"EN_US\"",
          "line": 43,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "INIT",
              "message_template": "Initializing IHU. Requested Lang: 'EN_US'. Setting current.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 44,
              "function": "Automotive::ECUs::InfotainmentModule::initialize::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::InfotainmentModule::initialize::if_then",
              "callee": "std::__cxx11::basic_string::operator=",
              "file": "src/InfotainmentModule.cpp",
              "line": 45
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "CONF",
              "message_template": "HMI assets for 'EN_US'. Load time: 220 ms.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 46,
              "function": "Automotive::ECUs::InfotainmentModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! languageSet",
          "line": 50,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "IHU",
              "ctId": "CONF",
              "message_template": "Unsupported language requested. Defaulting to EN_US.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 51,
              "function": "Automotive::ECUs::InfotainmentModule::initialize::if_then"
            },
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "INIT",
              "message_template": "Initializing IHU with default language: 'EN_US'.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 53,
              "function": "Automotive::ECUs::InfotainmentModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "IHU",
          "ctId": "CNCT",
          "message_template": "Bluetooth module status: OK. Paired devices: 0 (initial).",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 56,
          "function": "Automotive::ECUs::InfotainmentModule::initialize"
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::InfotainmentModule::initialize",
          "callee": "Automotive::ECUs::InfotainmentModule::checkMediaSources",
          "file": "src/InfotainmentModule.cpp",
          "line": 57
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "m_currentLanguage == \"FR_CA\"",
          "line": 62,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "INIT",
              "message_template": "IHU Initialized. Active Language is 'FR_CA'.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 63,
              "function": "Automotive::ECUs::InfotainmentModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "! log_init_lang_done && m_currentLanguage == \"EN_US\"",
          "line": 66,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "INIT",
              "message_template": "IHU Initialized. Active Language is 'EN_US'.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 67,
              "function": "Automotive::ECUs::InfotainmentModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::processUserInput": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 72,
      "line_end": 109,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized",
          "line": 73,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "IHU",
              "ctId": "PROC",
              "message_template": "ProcessUserInput: IHU not initialized. Skipping.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 74,
              "function": "Automotive::ECUs::InfotainmentModule::processUserInput::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "inputType == 1 && inputValue == 10",
          "line": 79,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "User input: VolumeKnob UP. Target vol: 60pct.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 80,
              "function": "Automotive::ECUs::InfotainmentModule::processUserInput::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::InfotainmentModule::processUserInput::if_then",
              "callee": "Automotive::ECUs::InfotainmentModule::setVolumeLevel",
              "file": "src/InfotainmentModule.cpp",
              "line": 81
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! inputHandled && inputType == 1 && inputValue == - 10",
          "line": 85,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "User input: VolumeKnob DOWN. Target vol: 40pct.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 86,
              "function": "Automotive::ECUs::InfotainmentModule::processUserInput::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::InfotainmentModule::processUserInput::if_then",
              "callee": "Automotive::ECUs::InfotainmentModule::setVolumeLevel",
              "file": "src/InfotainmentModule.cpp",
              "line": 87
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! inputHandled && inputType == 4 && inputValue == 101",
          "line": 91,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "User input: Button NAV (ID 101). Switching to Nav.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 92,
              "function": "Automotive::ECUs::InfotainmentModule::processUserInput::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "! inputHandled && inputType == 2 && inputValue == 320",
          "line": 97,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "User input: Touchscreen press at X=320, Y=240 (Example values).",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 98,
              "function": "Automotive::ECUs::InfotainmentModule::processUserInput::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_5",
          "condition_expression": "! inputHandled",
          "line": 102,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "User input: Unhandled type/value. Type: %d, Value: %d.",
              "values": [
                "inputType",
                "inputValue"
              ],
              "file": "src/InfotainmentModule.cpp",
              "line": 104,
              "function": "Automotive::ECUs::InfotainmentModule::processUserInput::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::InfotainmentModule::processUserInput",
          "callee": "Automotive::ECUs::InfotainmentModule::updateDisplayContent",
          "file": "src/InfotainmentModule.cpp",
          "line": 107
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "IHU",
          "ctId": "PROC",
          "message_template": "Finished processing user input cycle.",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 108,
          "function": "Automotive::ECUs::InfotainmentModule::processUserInput"
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::runDiagnostics": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 111,
      "line_end": 144,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized && level_param > 0",
          "line": 112,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "IHU",
              "ctId": "DIAG",
              "message_template": "Cannot run IHU diagnostics (L%d req), module not init.",
              "values": [
                "level_param"
              ],
              "file": "src/InfotainmentModule.cpp",
              "line": 113,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "level_param == 0",
          "line": 119,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "DIAG",
              "message_template": "Running basic IHU diagnostics (L0). Display: OK. Touch: OK.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 120,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! level_checked && level_param == 1",
          "line": 124,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "DIAG",
              "message_template": "Running IHU peripheral checks (L1).",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 125,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "CNCT",
              "message_template": "GPS Antenna: -75dBm, Sats: 8 (fixed sim values).",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 126,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "IHU",
              "ctId": "MEDIA",
              "message_template": "USB Port 1: No device. Status: 0xFF (NoPwr, fixed sim).",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 127,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! level_checked && level_param >= 2",
          "line": 131,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "DIAG",
              "message_template": "Running IHU internal component tests (L%d).",
              "values": [
                "level_param"
              ],
              "file": "src/InfotainmentModule.cpp",
              "line": 132,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "AUDIO",
              "message_template": "Audio DSP self-test: PASS. Channels: 4 (fixed sim).",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 133,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "Touchscreen controller calibrate FAILED. Code: 0xE10F. Attempts: 3 (fixed sim).",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 134,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "success",
          "line": 138,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "DIAG",
              "message_template": "IHU Diagnostics (L%d) completed: PASS.",
              "values": [
                "level_param"
              ],
              "file": "src/InfotainmentModule.cpp",
              "line": 139,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "IHU",
              "ctId": "DIAG",
              "message_template": "IHU Diagnostics (L%d) completed: ISSUES FOUND.",
              "values": [
                "level_param"
              ],
              "file": "src/InfotainmentModule.cpp",
              "line": 141,
              "function": "Automotive::ECUs::InfotainmentModule::runDiagnostics::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::shutdownDisplay": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 146,
      "line_end": 148,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "IHU",
          "ctId": "HMI",
          "message_template": "Shutting down main display. Panel power: OFF. Standby mode: ACTIVATED.",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 147,
          "function": "Automotive::ECUs::InfotainmentModule::shutdownDisplay"
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::playAudioTrack": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 150,
      "line_end": 169,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "trackNameParam == \"Bohemian Rhapsody\"",
          "line": 152,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "MEDIA",
              "message_template": "Playing audio: 'Bohemian Rhapsody'. Src: USB. Len: 354s.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 153,
              "function": "Automotive::ECUs::InfotainmentModule::playAudioTrack::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::InfotainmentModule::playAudioTrack::if_then",
              "callee": "std::__cxx11::basic_string::operator=",
              "file": "src/InfotainmentModule.cpp",
              "line": 154
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! trackPlayed && trackNameParam == \"FM Radio - 101.1 MHz\"",
          "line": 158,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "MEDIA",
              "message_template": "Playing radio: 'FM Radio - 101.1 MHz'. RDS: 'Rock Classics'.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 159,
              "function": "Automotive::ECUs::InfotainmentModule::playAudioTrack::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::InfotainmentModule::playAudioTrack::if_then",
              "callee": "std::__cxx11::basic_string::operator=",
              "file": "src/InfotainmentModule.cpp",
              "line": 160
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! trackPlayed",
          "line": 164,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "MEDIA",
              "message_template": "Playing audio: [Dynamic Track from Bluetooth]. Codec: AAC.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 165,
              "function": "Automotive::ECUs::InfotainmentModule::playAudioTrack::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "IHU",
          "ctId": "AUDIO",
          "message_template": "Audio output routed. Current Volume: %d pct.",
          "values": [
            "m_currentVolume"
          ],
          "file": "src/InfotainmentModule.cpp",
          "line": 168,
          "function": "Automotive::ECUs::InfotainmentModule::playAudioTrack"
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::setVolumeLevel": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 171,
      "line_end": 186,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "volume < 0",
          "line": 172,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "volume > 100",
          "line": 173,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "IHU",
          "ctId": "AUDIO",
          "message_template": "Volume level set to: %d pct.",
          "values": [
            "m_currentVolume"
          ],
          "file": "src/InfotainmentModule.cpp",
          "line": 176,
          "function": "Automotive::ECUs::InfotainmentModule::setVolumeLevel"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "m_currentVolume == 0",
          "line": 179,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "AUDIO",
              "message_template": "Audio MUTED (volume is 0).",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 180,
              "function": "Automotive::ECUs::InfotainmentModule::setVolumeLevel::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! volume_log_done && m_currentVolume == 100",
          "line": 183,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "IHU",
              "ctId": "AUDIO",
              "message_template": "Volume at MAX (100pct). Amplifier gain: 0dB (sim).",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 184,
              "function": "Automotive::ECUs::InfotainmentModule::setVolumeLevel::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::displayNavigationRoute": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 188,
      "line_end": 205,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "destinationParam == \"Home\"",
          "line": 190,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "NAV",
              "message_template": "Displaying nav route to: 'Home'. ETA: 15min. Dist: 12.3km.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 191,
              "function": "Automotive::ECUs::InfotainmentModule::displayNavigationRoute::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! routeDisplayed && destinationParam == \"Work\"",
          "line": 195,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "NAV",
              "message_template": "Displaying nav route to: 'Work Office'. ETA: 25min. Dist: 22.7km.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 196,
              "function": "Automotive::ECUs::InfotainmentModule::displayNavigationRoute::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! routeDisplayed",
          "line": 200,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "NAV",
              "message_template": "Displaying nav route to: [User Defined Address]. Calculating... ETA: N/A.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 202,
              "function": "Automotive::ECUs::InfotainmentModule::displayNavigationRoute::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "IHU",
          "ctId": "NAV",
          "message_template": "Map data version: '2024.Q1_EU'. GPS: Strong. Satellites: 9.",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 204,
          "function": "Automotive::ECUs::InfotainmentModule::displayNavigationRoute"
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::showSystemMessage": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 207,
      "line_end": 223,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "messageParam == \"LowFuel\"",
          "line": 209,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "SysMsg: 'Warning: Low Fuel'. Duration: 5000ms (fixed). Prio: HIGH.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 210,
              "function": "Automotive::ECUs::InfotainmentModule::showSystemMessage::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! messageShown && messageParam == \"UpdateComplete\"",
          "line": 214,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "SysMsg: 'Software Update Completed'. Duration: 3000ms (fixed). New Ver: 2.3.1.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 215,
              "function": "Automotive::ECUs::InfotainmentModule::showSystemMessage::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! messageShown",
          "line": 219,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "SysMsg: [User-defined content received]. Duration: 4000ms (fixed). Type: Gen.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 221,
              "function": "Automotive::ECUs::InfotainmentModule::showSystemMessage::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::updateDisplayContent": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 226,
      "line_end": 233,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "IHU",
          "ctId": "HMI",
          "message_template": "Updating display. Screen: 'Main Menu'. Widgets: 3. Brightness: 80pct (sim).",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 227,
          "function": "Automotive::ECUs::InfotainmentModule::updateDisplayContent"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_nowPlaying . find ( \"Radio\" ) != std :: string :: npos",
          "line": 228,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "Display: Radio widget active. Info: Default Station. Signal: -65dBm.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 229,
              "function": "Automotive::ECUs::InfotainmentModule::updateDisplayContent::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "IHU",
              "ctId": "HMI",
              "message_template": "Display: Media player widget active. Info: Default Track. Progress: 35pct.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 231,
              "function": "Automotive::ECUs::InfotainmentModule::updateDisplayContent::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::manageBluetoothConnections": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 235,
      "line_end": 241,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "IHU",
          "ctId": "CNCT",
          "message_template": "BT Mgmt. Connected: 1 ('MyPhone_Pixel8'). Profile: A2DP/HFP. RSSI: -55dBm.",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 236,
          "function": "Automotive::ECUs::InfotainmentModule::manageBluetoothConnections"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "new_device_pairing_attempt",
          "line": 238,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "IHU",
              "ctId": "CNCT",
              "message_template": "New BT pair req from 'UnknownDev_BT5.2'. PIN: 1234. Status: PendingUserAuth.",
              "values": [],
              "file": "src/InfotainmentModule.cpp",
              "line": 239,
              "function": "Automotive::ECUs::InfotainmentModule::manageBluetoothConnections::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::InfotainmentModule::checkMediaSources": {
      "file": "src/InfotainmentModule.cpp",
      "line_start": 243,
      "line_end": 248,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "IHU",
          "ctId": "MEDIA",
          "message_template": "Checking media sources (USB/SD/AUX).",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 244,
          "function": "Automotive::ECUs::InfotainmentModule::checkMediaSources"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "IHU",
          "ctId": "MEDIA",
          "message_template": "USB1: 'SanDisk_32GB' (exFAT). Tracks: 250. Status: Mounted,Readable.",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 245,
          "function": "Automotive::ECUs::InfotainmentModule::checkMediaSources"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "IHU",
          "ctId": "MEDIA",
          "message_template": "SDCard: No card inserted. Slot Status: Empty,Ready.",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 246,
          "function": "Automotive::ECUs::InfotainmentModule::checkMediaSources"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "IHU",
          "ctId": "MEDIA",
          "message_template": "AUX: No signal detected. Line input level: 0.0V (checked).",
          "values": [],
          "file": "src/InfotainmentModule.cpp",
          "line": 247,
          "function": "Automotive::ECUs::InfotainmentModule::checkMediaSources"
        }
      ]
    },
    "Automotive::ECUs::BrakingSystemModule": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 8,
      "line_end": 15,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ABS",
          "ctId": "INIT",
          "message_template": "BrakingSystemModule constructor. State: Not Initialized. ABS/ESP Inactive.",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 14,
          "function": "Automotive::ECUs::BrakingSystemModule"
        }
      ]
    },
    "Automotive::ECUs::~BrakingSystemModule": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 17,
      "line_end": 24,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_absActive || m_espActive",
          "line": 19,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ABS",
              "ctId": "SHTDWN",
              "message_template": "BrakingSystemModule destructor. WARNING: ABS/ESP potentially active at exit!",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 20,
              "function": "Automotive::ECUs::~BrakingSystemModule::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ABS",
              "ctId": "SHTDWN",
              "message_template": "BrakingSystemModule destructor. ABS/ESP Inactive at exit (Nominal).",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 22,
              "function": "Automotive::ECUs::~BrakingSystemModule::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::BrakingSystemModule::initialize": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 26,
      "line_end": 34,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ABS",
          "ctId": "INIT",
          "message_template": "Initializing Braking Systems (ABS/ESP).",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 27,
          "function": "Automotive::ECUs::BrakingSystemModule::initialize"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ABS",
          "ctId": "CONF",
          "message_template": "Hydraulic pump motor check: OK. Pressure: 0.0 bar (standby).",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 28,
          "function": "Automotive::ECUs::BrakingSystemModule::initialize"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ABS",
          "ctId": "CONF",
          "message_template": "Wheel speed sensor calibration: Offsets FL:0.01, FR:-0.02, RL:0.00, RR:0.03.",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 29,
          "function": "Automotive::ECUs::BrakingSystemModule::initialize"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ABS",
          "ctId": "INIT",
          "message_template": "Braking Systems Initialized Successfully.",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 32,
          "function": "Automotive::ECUs::BrakingSystemModule::initialize"
        }
      ]
    },
    "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 36,
      "line_end": 77,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized",
          "line": 37,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ABS",
              "ctId": "PROC",
              "message_template": "MonitorWheelSpeeds: Module not initialized. Skipping.",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 38,
              "function": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ABS",
          "ctId": "WHEEL",
          "message_template": "Wheel Speeds (km/h): FL=50.2, FR=50.1, RL=49.8, RR=25.5 (Simulated).",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 49,
          "function": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "m_wheelSpeedRR < ( averageSpeedFront * 0.7f ) && averageSpeedFront > 10.0f",
          "line": 53,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ABS",
              "ctId": "WHEEL",
              "message_template": "Significant speed diff for RR wheel (25.5 km/h vs avg 50.1 km/h). Possible slippage/sensor issue.",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 54,
              "function": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds::if_then",
              "callee": "Automotive::ECUs::BrakingSystemModule::applyAntiLockBraking",
              "file": "src/BrakingSystemModule.cpp",
              "line": 55
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! abs_logic_triggered && m_absActive",
          "line": 59,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ABS",
              "ctId": "WHEEL",
              "message_template": "Wheel speeds stabilized. ABS deactivated.",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 60,
              "function": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "m_wheelSpeedFL > 55.0f && m_wheelSpeedFR < 45.0f && ! m_espActive",
          "line": 65,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ABS",
              "ctId": "STABIL",
              "message_template": "ESP intervention: Understeer detected. Applying brake to FR wheel (20 bar sim).",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 66,
              "function": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds::if_then",
              "callee": "Automotive::ECUs::BrakingSystemModule::manageStabilityControl",
              "file": "src/BrakingSystemModule.cpp",
              "line": 67
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "! esp_logic_triggered && m_espActive && ( m_wheelSpeedFL - m_wheelSpeedFR < 5.0f )",
          "line": 71,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ABS",
              "ctId": "STABIL",
              "message_template": "ESP intervention ended. Vehicle stable.",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 72,
              "function": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ABS",
          "ctId": "PROC",
          "message_template": "Finished monitoring wheel speeds for this cycle.",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 76,
          "function": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds"
        }
      ]
    },
    "Automotive::ECUs::BrakingSystemModule::runDiagnostics": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 79,
      "line_end": 116,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized && level_param > 0",
          "line": 80,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "ABS",
              "ctId": "DIAG",
              "message_template": "Cannot run ABS/ESP diagnostics (Level %d req), module not init.",
              "values": [
                "level_param"
              ],
              "file": "src/BrakingSystemModule.cpp",
              "line": 81,
              "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "level_param == 0",
          "line": 87,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ABS",
              "ctId": "DIAG",
              "message_template": "Running basic ABS/ESP diagnostics (L0). System Status: Nominal.",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 88,
              "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! level_checked && level_param == 1",
          "line": 92,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ABS",
              "ctId": "DIAG",
              "message_template": "Running ABS/ESP sensor checks (L1).",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 93,
              "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ABS",
              "ctId": "DIAG",
              "message_template": "Wheel speed sensor FL resistance: 1.2 kOhm (OK).",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 94,
              "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ABS",
              "ctId": "DIAG",
              "message_template": "Wheel speed sensor RR signal intermittent. Last val: 22.0 km/h. Check conn.",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 95,
              "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! level_checked && level_param >= 2",
          "line": 99,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "id_in_function": "if_4",
              "condition_expression": "level_param == 2",
              "line": 100,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "ABS",
                  "ctId": "DIAG",
                  "message_template": "Running ABS/ESP actuator tests (L2).",
                  "values": [],
                  "file": "src/BrakingSystemModule.cpp",
                  "line": 101,
                  "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "ABS",
                  "ctId": "DIAG",
                  "message_template": "Running ABS/ESP actuator tests (L%d, extended).",
                  "values": [
                    "level_param"
                  ],
                  "file": "src/BrakingSystemModule.cpp",
                  "line": 103,
                  "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then::if_else"
                }
              ]
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ABS",
              "ctId": "DIAG",
              "message_template": "ABS pump motor test. Current draw: 5.5A (OK).",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 105,
              "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "ABS",
              "ctId": "DIAG",
              "message_template": "ESP hydraulic modulator valve (RL wheel) FAILED. Code: 0xCF03.",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 106,
              "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_5",
          "condition_expression": "success",
          "line": 110,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ABS",
              "ctId": "DIAG",
              "message_template": "ABS/ESP Diagnostics (L%d) completed: PASS.",
              "values": [
                "level_param"
              ],
              "file": "src/BrakingSystemModule.cpp",
              "line": 111,
              "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ABS",
              "ctId": "DIAG",
              "message_template": "ABS/ESP Diagnostics (L%d) completed: ISSUES FOUND.",
              "values": [
                "level_param"
              ],
              "file": "src/BrakingSystemModule.cpp",
              "line": 113,
              "function": "Automotive::ECUs::BrakingSystemModule::runDiagnostics::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::BrakingSystemModule::activateEmergencyBraking": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 118,
      "line_end": 127,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "active_param",
          "line": 119,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "FATAL",
              "apId": "ABS",
              "ctId": "PROC",
              "message_template": "EMERGENCY BRAKING ACTIVATED! Max brake pressure (120 bar sim).",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 120,
              "function": "Automotive::ECUs::BrakingSystemModule::activateEmergencyBraking::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::BrakingSystemModule::activateEmergencyBraking::if_then",
              "callee": "Automotive::ECUs::BrakingSystemModule::controlBrakePressure",
              "file": "src/BrakingSystemModule.cpp",
              "line": 121
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ABS",
              "ctId": "PROC",
              "message_template": "Emergency braking DEACTIVATED by driver/system.",
              "values": [],
              "file": "src/BrakingSystemModule.cpp",
              "line": 124,
              "function": "Automotive::ECUs::BrakingSystemModule::activateEmergencyBraking::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::BrakingSystemModule::applyAntiLockBraking": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 130,
      "line_end": 132,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ABS",
          "ctId": "PUMP",
          "message_template": "ABS Pump activated. Modulating brake pressure for RR wheel. Target slip: 15pct (sim).",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 131,
          "function": "Automotive::ECUs::BrakingSystemModule::applyAntiLockBraking"
        }
      ]
    },
    "Automotive::ECUs::BrakingSystemModule::manageStabilityControl": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 134,
      "line_end": 136,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ABS",
          "ctId": "STABIL",
          "message_template": "ESP system managing stability. Sim Sensors: Yaw=5.2deg/s, Steering=15deg.",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 135,
          "function": "Automotive::ECUs::BrakingSystemModule::manageStabilityControl"
        }
      ]
    },
    "Automotive::ECUs::BrakingSystemModule::getBrakeFluidLevel": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 138,
      "line_end": 141,
      "execution_elements_structured": []
    },
    "Automotive::ECUs::BrakingSystemModule::checkBrakePadsWear": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 144,
      "line_end": 146,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ABS",
          "ctId": "DIAG",
          "message_template": "Brake pads wear check. Sim Remaining: FL=75, FR=72, RL=80, RR=78 pct.",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 145,
          "function": "Automotive::ECUs::BrakingSystemModule::checkBrakePadsWear"
        }
      ]
    },
    "Automotive::ECUs::BrakingSystemModule::controlBrakePressure": {
      "file": "src/BrakingSystemModule.cpp",
      "line_start": 148,
      "line_end": 150,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ABS",
          "ctId": "PUMP",
          "message_template": "Controlling brake pressure. Target: 60 bar. Current: 58.5 bar. Valve FL: OPEN (Simulated).",
          "values": [],
          "file": "src/BrakingSystemModule.cpp",
          "line": 149,
          "function": "Automotive::ECUs::BrakingSystemModule::controlBrakePressure"
        }
      ]
    },
    "Automotive::Controllers::VehicleController": {
      "file": "src/VehicleController.cpp",
      "line_start": 13,
      "line_end": 31,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "INIT",
          "message_template": "VehicleController constructor. System state: OFF (0).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 22,
          "function": "Automotive::Controllers::VehicleController"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "INIT",
          "message_template": "ECU Modules instantiated.",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 30,
          "function": "Automotive::Controllers::VehicleController"
        }
      ]
    },
    "Automotive::Controllers::~VehicleController": {
      "file": "src/VehicleController.cpp",
      "line_start": 33,
      "line_end": 49,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "SHTDWN",
          "message_template": "VehicleController destructor. Releasing ECU modules.",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 34,
          "function": "Automotive::Controllers::~VehicleController"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "SHTDWN",
          "message_template": "ECU Modules released. Vehicle Controller shutdown complete.",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 48,
          "function": "Automotive::Controllers::~VehicleController"
        }
      ]
    },
    "Automotive::Controllers::VehicleController::initializeSystem": {
      "file": "src/VehicleController.cpp",
      "line_start": 51,
      "line_end": 91,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "START",
          "message_template": "Vehicle system initialization: STARTED.",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 52,
          "function": "Automotive::Controllers::VehicleController::initializeSystem"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::initializeSystem",
          "callee": "Automotive::Controllers::VehicleController::performPowerOnSelfTest",
          "file": "src/VehicleController.cpp",
          "line": 55
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! ecm_ok",
          "line": 58,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "FATAL",
              "apId": "VCTRL",
              "ctId": "START",
              "message_template": "CRITICAL FAILURE: ECM init FAILED. Aborting system startup.",
              "values": [],
              "file": "src/VehicleController.cpp",
              "line": 59,
              "function": "Automotive::Controllers::VehicleController::initializeSystem::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! tcu_ok",
          "line": 65,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "VCTRL",
              "ctId": "START",
              "message_template": "ERROR: TCU init FAILED. Limited functionality.",
              "values": [],
              "file": "src/VehicleController.cpp",
              "line": 66,
              "function": "Automotive::Controllers::VehicleController::initializeSystem::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! m_brakingSystem -> initialize ( )",
          "line": 69,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "VCTRL",
              "ctId": "START",
              "message_template": "ERROR: ABS init FAILED.",
              "values": [],
              "file": "src/VehicleController.cpp",
              "line": 70,
              "function": "Automotive::Controllers::VehicleController::initializeSystem::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! m_bodyControl -> initialize ( )",
          "line": 73,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "VCTRL",
              "ctId": "START",
              "message_template": "ERROR: BCM init FAILED.",
              "values": [],
              "file": "src/VehicleController.cpp",
              "line": 74,
              "function": "Automotive::Controllers::VehicleController::initializeSystem::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "! m_infotainmentControl -> initialize ( \"EN_US\" )",
          "line": 78,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "VCTRL",
              "ctId": "START",
              "message_template": "WARNING: IHU init FAILED. User experience affected.",
              "values": [],
              "file": "src/VehicleController.cpp",
              "line": 79,
              "function": "Automotive::Controllers::VehicleController::initializeSystem::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_5",
          "condition_expression": "! init_failed_globally",
          "line": 83,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "VCTRL",
              "ctId": "START",
              "message_template": "Vehicle system initialization: COMPLETED. State: RUNNING (2).",
              "values": [],
              "file": "src/VehicleController.cpp",
              "line": 86,
              "function": "Automotive::Controllers::VehicleController::initializeSystem::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "VCTRL",
              "ctId": "START",
              "message_template": "Vehicle system initialization: FAILED. State: ERROR (3). See logs.",
              "values": [],
              "file": "src/VehicleController.cpp",
              "line": 88,
              "function": "Automotive::Controllers::VehicleController::initializeSystem::if_else"
            }
          ]
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::initializeSystem",
          "callee": "Automotive::Controllers::VehicleController::communicateNetworkStatus",
          "file": "src/VehicleController.cpp",
          "line": 90
        }
      ]
    },
    "Automotive::Controllers::VehicleController::shutdownSystem": {
      "file": "src/VehicleController.cpp",
      "line_start": 93,
      "line_end": 109,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "SHTDWN",
          "message_template": "Vehicle system shutdown: INITIATED. Current State: %d.",
          "values": [
            "m_vehicleState"
          ],
          "file": "src/VehicleController.cpp",
          "line": 95,
          "function": "Automotive::Controllers::VehicleController::shutdownSystem"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "SHTDWN",
          "message_template": "Requesting IHU shutdown.",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 98,
          "function": "Automotive::Controllers::VehicleController::shutdownSystem"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::shutdownSystem",
          "callee": "Automotive::ECUs::InfotainmentModule::shutdownDisplay",
          "file": "src/VehicleController.cpp",
          "line": 99
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "SHTDWN",
          "message_template": "Requesting ECM shutdown.",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 101,
          "function": "Automotive::Controllers::VehicleController::shutdownSystem"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::shutdownSystem",
          "callee": "Automotive::ECUs::EngineControlModule::requestEngineShutdown",
          "file": "src/VehicleController.cpp",
          "line": 102
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "SHTDWN",
          "message_template": "TCU, ABS, BCM will shutdown on power off (simulated).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 104,
          "function": "Automotive::Controllers::VehicleController::shutdownSystem"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "SHTDWN",
          "message_template": "Vehicle system shutdown: COMPLETED. System state: OFF (0).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 108,
          "function": "Automotive::Controllers::VehicleController::shutdownSystem"
        }
      ]
    },
    "Automotive::Controllers::VehicleController::triggerDiagnosticSequence": {
      "file": "src/VehicleController.cpp",
      "line_start": 111,
      "line_end": 134,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "DIAG",
          "message_template": "Global diagnostic sequence triggered. Requested Level: %d.",
          "values": [
            "diagnosticLevel_param"
          ],
          "file": "src/VehicleController.cpp",
          "line": 112,
          "function": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_systemInitialized && diagnosticLevel_param > 0",
          "line": 113,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "VCTRL",
              "ctId": "DIAG",
              "message_template": "Cannot run detailed diagnostics (system not init). Basic checks only (L0 sim).",
              "values": [],
              "file": "src/VehicleController.cpp",
              "line": 114,
              "function": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "DIAG",
          "message_template": "Running diagnostics for ECM (Level %d).",
          "values": [
            "diagnosticLevel_param"
          ],
          "file": "src/VehicleController.cpp",
          "line": 118,
          "function": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence",
          "callee": "Automotive::ECUs::EngineControlModule::runDiagnostics",
          "file": "src/VehicleController.cpp",
          "line": 119
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "DIAG",
          "message_template": "Running diagnostics for TCU (Level %d).",
          "values": [
            "diagnosticLevel_param"
          ],
          "file": "src/VehicleController.cpp",
          "line": 121,
          "function": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence",
          "callee": "Automotive::ECUs::TransmissionControlModule::runDiagnostics",
          "file": "src/VehicleController.cpp",
          "line": 122
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "DIAG",
          "message_template": "Running diagnostics for ABS (Level %d).",
          "values": [
            "diagnosticLevel_param"
          ],
          "file": "src/VehicleController.cpp",
          "line": 124,
          "function": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence",
          "callee": "Automotive::ECUs::BrakingSystemModule::runDiagnostics",
          "file": "src/VehicleController.cpp",
          "line": 125
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "DIAG",
          "message_template": "Running diagnostics for BCM (Level %d).",
          "values": [
            "diagnosticLevel_param"
          ],
          "file": "src/VehicleController.cpp",
          "line": 127,
          "function": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence",
          "callee": "Automotive::ECUs::BodyControlModule::runDiagnostics",
          "file": "src/VehicleController.cpp",
          "line": 128
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "DIAG",
          "message_template": "Running diagnostics for IHU (Level %d).",
          "values": [
            "diagnosticLevel_param"
          ],
          "file": "src/VehicleController.cpp",
          "line": 130,
          "function": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence",
          "callee": "Automotive::ECUs::InfotainmentModule::runDiagnostics",
          "file": "src/VehicleController.cpp",
          "line": 131
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "DIAG",
          "message_template": "Global diagnostic sequence (L%d) completed. Check ECU logs.",
          "values": [
            "diagnosticLevel_param"
          ],
          "file": "src/VehicleController.cpp",
          "line": 133,
          "function": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence"
        }
      ]
    },
    "Automotive::Controllers::VehicleController::performPowerOnSelfTest": {
      "file": "src/VehicleController.cpp",
      "line_start": 136,
      "line_end": 142,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "PWR",
          "message_template": "Performing Power-On Self-Test (POST).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 137,
          "function": "Automotive::Controllers::VehicleController::performPowerOnSelfTest"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "PWR",
          "message_template": "Main ECU voltage: 12.6V (OK).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 138,
          "function": "Automotive::Controllers::VehicleController::performPowerOnSelfTest"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "PWR",
          "message_template": "CAN bus A termination: 60 Ohm (Nominal).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 139,
          "function": "Automotive::Controllers::VehicleController::performPowerOnSelfTest"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "PWR",
          "message_template": "CAN bus B termination: 60 Ohm (Nominal).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 140,
          "function": "Automotive::Controllers::VehicleController::performPowerOnSelfTest"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "PWR",
          "message_template": "POST completed successfully.",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 141,
          "function": "Automotive::Controllers::VehicleController::performPowerOnSelfTest"
        }
      ]
    },
    "Automotive::Controllers::VehicleController::manageVehicleState": {
      "file": "src/VehicleController.cpp",
      "line_start": 144,
      "line_end": 147,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "STATE",
          "message_template": "Managing vehicle state. Current internal state val: %d.",
          "values": [
            "m_vehicleState"
          ],
          "file": "src/VehicleController.cpp",
          "line": 146,
          "function": "Automotive::Controllers::VehicleController::manageVehicleState"
        }
      ]
    },
    "Automotive::Controllers::VehicleController::communicateNetworkStatus": {
      "file": "src/VehicleController.cpp",
      "line_start": 149,
      "line_end": 152,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "NET",
          "message_template": "Broadcasting network frame: System Active. Node ID: 0x01 (VCTRL).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 150,
          "function": "Automotive::Controllers::VehicleController::communicateNetworkStatus"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "COMM",
          "message_template": "Sending heartbeat on CAN Bus A. Cycle: 100ms (Simulated).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 151,
          "function": "Automotive::Controllers::VehicleController::communicateNetworkStatus"
        }
      ]
    },
    "Automotive::Controllers::VehicleController::runMainVehicleLoop": {
      "file": "src/VehicleController.cpp",
      "line_start": 154,
      "line_end": 186,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_systemInitialized || m_vehicleState != 2",
          "line": 155,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "VCTRL",
              "ctId": "LOOP",
              "message_template": "Main loop skipped. System not init or not RUNNING. Current State val: %d.",
              "values": [
                "m_vehicleState"
              ],
              "file": "src/VehicleController.cpp",
              "line": 157,
              "function": "Automotive::Controllers::VehicleController::runMainVehicleLoop::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "LOOP",
          "message_template": "Running main vehicle loop iteration. Vehicle State val: %d.",
          "values": [
            "m_vehicleState"
          ],
          "file": "src/VehicleController.cpp",
          "line": 162,
          "function": "Automotive::Controllers::VehicleController::runMainVehicleLoop"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
          "callee": "Automotive::ECUs::EngineControlModule::processEngineData",
          "file": "src/VehicleController.cpp",
          "line": 164
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
          "callee": "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests",
          "file": "src/VehicleController.cpp",
          "line": 165
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
          "callee": "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds",
          "file": "src/VehicleController.cpp",
          "line": 166
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
          "callee": "Automotive::ECUs::BodyControlModule::processComfortRequests",
          "file": "src/VehicleController.cpp",
          "line": 167
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
          "callee": "Automotive::ECUs::InfotainmentModule::processUserInput",
          "file": "src/VehicleController.cpp",
          "line": 168
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
          "callee": "Automotive::Controllers::VehicleController::manageVehicleState",
          "file": "src/VehicleController.cpp",
          "line": 170
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "m_engineControl -> getCurrentRPM ( ) > 3000",
          "line": 173,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "VCTRL",
              "ctId": "LOOP",
              "message_template": "Engine RPM high (>3000, e.g. 3200 RPM). Activating BCM sports mode light (sim).",
              "values": [],
              "file": "src/VehicleController.cpp",
              "line": 174,
              "function": "Automotive::Controllers::VehicleController::runMainVehicleLoop::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop::if_then",
              "callee": "Automotive::ECUs::BodyControlModule::setHeadlightsState",
              "file": "src/VehicleController.cpp",
              "line": 175
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "LOOP",
          "message_template": "Testing Switch statement in ECM with mode 1 and 5 (fixed).",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 178,
          "function": "Automotive::Controllers::VehicleController::runMainVehicleLoop"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
          "callee": "Automotive::ECUs::EngineControlModule::someFunctionWithSwitch",
          "file": "src/VehicleController.cpp",
          "line": 179
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
          "callee": "Automotive::ECUs::EngineControlModule::someFunctionWithSwitch",
          "file": "src/VehicleController.cpp",
          "line": 180
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "VCTRL",
          "ctId": "LOOP",
          "message_template": "Testing Do-While loop in TCU.",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 182,
          "function": "Automotive::Controllers::VehicleController::runMainVehicleLoop"
        },
        {
          "type": "CALL",
          "caller": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
          "callee": "Automotive::ECUs::TransmissionControlModule::testDoWhileLoop",
          "file": "src/VehicleController.cpp",
          "line": 183
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "VCTRL",
          "ctId": "LOOP",
          "message_template": "Main vehicle loop iteration COMPLETED.",
          "values": [],
          "file": "src/VehicleController.cpp",
          "line": 185,
          "function": "Automotive::Controllers::VehicleController::runMainVehicleLoop"
        }
      ]
    },
    "Automotive::ECUs::BodyControlModule": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 8,
      "line_end": 14,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "BCM",
          "ctId": "INIT",
          "message_template": "BodyControlModule constructor. State: Not Initialized. Headlights: OFF, Doors: UNLOCKED.",
          "values": [],
          "file": "src/BodyControlModule.cpp",
          "line": 13,
          "function": "Automotive::ECUs::BodyControlModule"
        }
      ]
    },
    "Automotive::ECUs::~BodyControlModule": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 16,
      "line_end": 23,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_doorsLocked",
          "line": 18,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "SHTDWN",
              "message_template": "BodyControlModule destructor. Doors were LOCKED at exit.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 19,
              "function": "Automotive::ECUs::~BodyControlModule::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "SHTDWN",
              "message_template": "BodyControlModule destructor. Doors were UNLOCKED at exit.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 21,
              "function": "Automotive::ECUs::~BodyControlModule::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::BodyControlModule::initialize": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 25,
      "line_end": 33,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "BCM",
          "ctId": "INIT",
          "message_template": "Initializing Body Control Systems.",
          "values": [],
          "file": "src/BodyControlModule.cpp",
          "line": 26,
          "function": "Automotive::ECUs::BodyControlModule::initialize"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "BCM",
          "ctId": "CONF",
          "message_template": "LIN bus for lighting: OK. Window motor power: Nominal (12.5V).",
          "values": [],
          "file": "src/BodyControlModule.cpp",
          "line": 27,
          "function": "Automotive::ECUs::BodyControlModule::initialize"
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::BodyControlModule::initialize",
          "callee": "Automotive::ECUs::BodyControlModule::readLightSensorValue",
          "file": "src/BodyControlModule.cpp",
          "line": 28
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "BCM",
          "ctId": "INIT",
          "message_template": "Body Control Systems Initialized Successfully.",
          "values": [],
          "file": "src/BodyControlModule.cpp",
          "line": 31,
          "function": "Automotive::ECUs::BodyControlModule::initialize"
        }
      ]
    },
    "Automotive::ECUs::BodyControlModule::processComfortRequests": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 35,
      "line_end": 58,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized",
          "line": 36,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "BCM",
              "ctId": "PROC",
              "message_template": "ProcessComfortRequests: BCM not initialized. Skipping.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 37,
              "function": "Automotive::ECUs::BodyControlModule::processComfortRequests::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "BCM",
          "ctId": "PROC",
          "message_template": "Processing comfort and access requests.",
          "values": [],
          "file": "src/BodyControlModule.cpp",
          "line": 41,
          "function": "Automotive::ECUs::BodyControlModule::processComfortRequests"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "is_dark_outside_simulated && m_headlightStatus == 0",
          "line": 44,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "LIGHT",
              "message_template": "Ambient light dark. Auto-activating headlights to ON (State 2).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 45,
              "function": "Automotive::ECUs::BodyControlModule::processComfortRequests::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::BodyControlModule::processComfortRequests::if_then",
              "callee": "Automotive::ECUs::BodyControlModule::setHeadlightsState",
              "file": "src/BodyControlModule.cpp",
              "line": 46
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "central_locking_request_simulated && ! m_doorsLocked",
          "line": 50,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "ACCESS",
              "message_template": "Central locking request. Locking all doors.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 51,
              "function": "Automotive::ECUs::BodyControlModule::processComfortRequests::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::BodyControlModule::processComfortRequests::if_then",
              "callee": "Automotive::ECUs::BodyControlModule::manageCentralLocking",
              "file": "src/BodyControlModule.cpp",
              "line": 52
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::BodyControlModule::processComfortRequests",
          "callee": "Automotive::ECUs::BodyControlModule::checkDoorStatus",
          "file": "src/BodyControlModule.cpp",
          "line": 55
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "BCM",
          "ctId": "PROC",
          "message_template": "Finished processing comfort requests for this cycle.",
          "values": [],
          "file": "src/BodyControlModule.cpp",
          "line": 57,
          "function": "Automotive::ECUs::BodyControlModule::processComfortRequests"
        }
      ]
    },
    "Automotive::ECUs::BodyControlModule::runDiagnostics": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 60,
      "line_end": 97,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized && level_param > 0",
          "line": 61,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "BCM",
              "ctId": "DIAG",
              "message_template": "Cannot run BCM diagnostics (Level %d req), module not init.",
              "values": [
                "level_param"
              ],
              "file": "src/BodyControlModule.cpp",
              "line": 62,
              "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "level_param == 0",
          "line": 68,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "DIAG",
              "message_template": "Running basic BCM diagnostics (L0). Comm check: PASS.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 69,
              "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! level_checked && level_param == 1",
          "line": 73,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "DIAG",
              "message_template": "Running BCM sensor checks (L1).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 74,
              "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "BCM",
              "ctId": "DIAG",
              "message_template": "Rain sensor: Dry (0.0V).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 75,
              "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "BCM",
              "ctId": "DIAG",
              "message_template": "Driver window sensor timeout. Last pos: 50pct open.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 76,
              "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! level_checked && level_param >= 2",
          "line": 80,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "id_in_function": "if_4",
              "condition_expression": "level_param == 2",
              "line": 81,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "BCM",
                  "ctId": "DIAG",
                  "message_template": "Running BCM actuator tests (L2).",
                  "values": [],
                  "file": "src/BodyControlModule.cpp",
                  "line": 82,
                  "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "BCM",
                  "ctId": "DIAG",
                  "message_template": "Running BCM actuator tests (L%d, extended).",
                  "values": [
                    "level_param"
                  ],
                  "file": "src/BodyControlModule.cpp",
                  "line": 84,
                  "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then::if_else"
                }
              ]
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "BCM",
              "ctId": "DIAG",
              "message_template": "Wiper motor test: Low speed OK, High speed OK.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 86,
              "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then"
            },
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "BCM",
              "ctId": "DIAG",
              "message_template": "Rear right door lock actuator FAILED. Error: Short to Gnd (0xDA01).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 87,
              "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_5",
          "condition_expression": "success",
          "line": 91,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "DIAG",
              "message_template": "BCM Diagnostics (L%d) completed: PASS.",
              "values": [
                "level_param"
              ],
              "file": "src/BodyControlModule.cpp",
              "line": 92,
              "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "BCM",
              "ctId": "DIAG",
              "message_template": "BCM Diagnostics (L%d) completed: ISSUES FOUND.",
              "values": [
                "level_param"
              ],
              "file": "src/BodyControlModule.cpp",
              "line": 94,
              "function": "Automotive::ECUs::BodyControlModule::runDiagnostics::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::BodyControlModule::setHeadlightsState": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 99,
      "line_end": 127,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "state_param == 0",
          "line": 103,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "LIGHT",
              "message_template": "Headlights set to OFF (State 0).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 104,
              "function": "Automotive::ECUs::BodyControlModule::setHeadlightsState::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! state_handled && state_param == 1",
          "line": 109,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "LIGHT",
              "message_template": "Headlights set to PARKING (State 1).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 110,
              "function": "Automotive::ECUs::BodyControlModule::setHeadlightsState::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! state_handled && state_param == 2",
          "line": 115,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "LIGHT",
              "message_template": "Headlights set to ON (State 2 - Low Beam).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 116,
              "function": "Automotive::ECUs::BodyControlModule::setHeadlightsState::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! state_handled",
          "line": 121,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "BCM",
              "ctId": "LIGHT",
              "message_template": "Invalid headlight state requested: %d. No action.",
              "values": [
                "state_param"
              ],
              "file": "src/BodyControlModule.cpp",
              "line": 122,
              "function": "Automotive::ECUs::BodyControlModule::setHeadlightsState::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "BCM",
          "ctId": "LIGHT",
          "message_template": "LIN command sent to headlight module. New state: %d.",
          "values": [
            "m_headlightStatus"
          ],
          "file": "src/BodyControlModule.cpp",
          "line": 126,
          "function": "Automotive::ECUs::BodyControlModule::setHeadlightsState"
        }
      ]
    },
    "Automotive::ECUs::BodyControlModule::controlWipers": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 129,
      "line_end": 162,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "speed_param == 0",
          "line": 133,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "WIPER",
              "message_template": "Wipers set to OFF (Speed 0).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 134,
              "function": "Automotive::ECUs::BodyControlModule::controlWipers::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! speed_processed && speed_param == 1",
          "line": 139,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "WIPER",
              "message_template": "Wipers set to INTERMITTENT (Speed 1). Interval: 5s.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 140,
              "function": "Automotive::ECUs::BodyControlModule::controlWipers::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! speed_processed && speed_param == 2",
          "line": 145,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "WIPER",
              "message_template": "Wipers set to LOW speed (Speed 2).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 146,
              "function": "Automotive::ECUs::BodyControlModule::controlWipers::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! speed_processed && speed_param == 3",
          "line": 151,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "WIPER",
              "message_template": "Wipers set to HIGH speed (Speed 3).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 152,
              "function": "Automotive::ECUs::BodyControlModule::controlWipers::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "! speed_processed",
          "line": 157,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "BCM",
              "ctId": "WIPER",
              "message_template": "Invalid wiper speed requested: %d. No action.",
              "values": [
                "speed_param"
              ],
              "file": "src/BodyControlModule.cpp",
              "line": 158,
              "function": "Automotive::ECUs::BodyControlModule::controlWipers::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "BCM",
          "ctId": "WIPER",
          "message_template": "Wiper motor relay. New speed state: %d.",
          "values": [
            "current_speed_for_log"
          ],
          "file": "src/BodyControlModule.cpp",
          "line": 161,
          "function": "Automotive::ECUs::BodyControlModule::controlWipers"
        }
      ]
    },
    "Automotive::ECUs::BodyControlModule::manageCentralLocking": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 164,
      "line_end": 174,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "lock_param",
          "line": 165,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "ACCESS",
              "message_template": "Locking all doors. Command: LOCK.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 166,
              "function": "Automotive::ECUs::BodyControlModule::manageCentralLocking::if_then"
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "BCM",
              "ctId": "ACCESS",
              "message_template": "Door lock actuators status: FL:L, FR:L, RL:L, RR:L.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 168,
              "function": "Automotive::ECUs::BodyControlModule::manageCentralLocking::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "BCM",
              "ctId": "ACCESS",
              "message_template": "Unlocking all doors. Command: UNLOCK.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 170,
              "function": "Automotive::ECUs::BodyControlModule::manageCentralLocking::if_else"
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "BCM",
              "ctId": "ACCESS",
              "message_template": "Door lock actuators status: FL:U, FR:U, RL:U, RR:U.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 172,
              "function": "Automotive::ECUs::BodyControlModule::manageCentralLocking::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::BodyControlModule::getCurrentAmbientTemperature": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 176,
      "line_end": 180,
      "execution_elements_structured": []
    },
    "Automotive::ECUs::BodyControlModule::readLightSensorValue": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 183,
      "line_end": 185,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "BCM",
          "ctId": "LIGHT",
          "message_template": "Reading ambient light sensor. Value: 350 lux (Simulated Daylight).",
          "values": [],
          "file": "src/BodyControlModule.cpp",
          "line": 184,
          "function": "Automotive::ECUs::BodyControlModule::readLightSensorValue"
        }
      ]
    },
    "Automotive::ECUs::BodyControlModule::checkDoorStatus": {
      "file": "src/BodyControlModule.cpp",
      "line_start": 187,
      "line_end": 195,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "BCM",
          "ctId": "ACCESS",
          "message_template": "Checking door status sensors.",
          "values": [],
          "file": "src/BodyControlModule.cpp",
          "line": 188,
          "function": "Automotive::ECUs::BodyControlModule::checkDoorStatus"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_doorsLocked",
          "line": 189,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "BCM",
              "ctId": "ACCESS",
              "message_template": "Door status report: ALL_CLOSED_LOCKED.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 190,
              "function": "Automotive::ECUs::BodyControlModule::checkDoorStatus::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "BCM",
              "ctId": "ACCESS",
              "message_template": "Door status report: FR_OPEN_UNLOCKED, others_CLOSED_UNLOCKED (Simulated).",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 192,
              "function": "Automotive::ECUs::BodyControlModule::checkDoorStatus::if_else"
            },
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "BCM",
              "ctId": "ACCESS",
              "message_template": "Front Right door reported OPEN while system active.",
              "values": [],
              "file": "src/BodyControlModule.cpp",
              "line": 193,
              "function": "Automotive::ECUs::BodyControlModule::checkDoorStatus::if_else"
            }
          ]
        }
      ]
    },
    "main": {
      "file": "src/main.cpp",
      "line_start": 7,
      "line_end": 61,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "SYSTEM",
          "ctId": "BOOT",
          "message_template": "Dummy Automotive Application STARTING. Version: 1.0.1 (fixed).",
          "values": [],
          "file": "src/main.cpp",
          "line": 8,
          "function": "main"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "argc > 1",
          "line": 11,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "SYSTEM",
              "ctId": "BOOT",
              "message_template": "App started with %d arguments. First arg: '%s'.",
              "values": [
                "argc - 1",
                "argv [ 1 ]"
              ],
              "file": "src/main.cpp",
              "line": 12,
              "function": "main::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "SYSTEM",
              "ctId": "BOOT",
              "message_template": "App started with no command-line arguments.",
              "values": [],
              "file": "src/main.cpp",
              "line": 14,
              "function": "main::if_else"
            }
          ]
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "SYSTEM",
          "ctId": "MAIN",
          "message_template": "Creating VehicleController instance...",
          "values": [],
          "file": "src/main.cpp",
          "line": 17,
          "function": "main"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "SYSTEM",
          "ctId": "MAIN",
          "message_template": "VehicleController instance created.",
          "values": [],
          "file": "src/main.cpp",
          "line": 19,
          "function": "main"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "SYSTEM",
          "ctId": "MAIN",
          "message_template": "Initiating system initialization sequence...",
          "values": [],
          "file": "src/main.cpp",
          "line": 21,
          "function": "main"
        },
        {
          "type": "CALL",
          "caller": "main",
          "callee": "Automotive::Controllers::VehicleController::initializeSystem",
          "file": "src/main.cpp",
          "line": 22
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "SYSTEM",
          "ctId": "MAIN",
          "message_template": "System initialization sequence finished by VehicleController.",
          "values": [],
          "file": "src/main.cpp",
          "line": 23,
          "function": "main"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "",
          "line": 29,
          "then_branch_elements": [],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "system_ready_for_loop_simulated",
          "line": 36,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "SYSTEM",
              "ctId": "MAIN",
              "message_template": "Entering main application loop (simulated 2 iterations).",
              "values": [],
              "file": "src/main.cpp",
              "line": 37,
              "function": "main::if_then"
            },
            {
              "type": "FOR_LOOP",
              "id_in_function": "loop_0",
              "line": 38,
              "body_elements": [
                {
                  "type": "LOG",
                  "level": "DEBUG",
                  "apId": "SYSTEM",
                  "ctId": "LOOP",
                  "message_template": "Main loop - Iteration #%d.",
                  "values": [
                    "i + 1"
                  ],
                  "file": "src/main.cpp",
                  "line": 40,
                  "function": "main::if_then::loop_body"
                },
                {
                  "type": "CALL",
                  "caller": "main::if_then::loop_body",
                  "callee": "Automotive::Controllers::VehicleController::runMainVehicleLoop",
                  "file": "src/main.cpp",
                  "line": 41
                },
                {
                  "type": "IF_STMT",
                  "id_in_function": "if_3",
                  "condition_expression": "i == 0",
                  "line": 43,
                  "then_branch_elements": [
                    {
                      "type": "LOG",
                      "level": "DEBUG",
                      "apId": "SYSTEM",
                      "ctId": "LOOP",
                      "message_template": "Simulated delay after iteration 1 (e.g., 100ms task).",
                      "values": [],
                      "file": "src/main.cpp",
                      "line": 44,
                      "function": "main::if_then::loop_body::if_then"
                    }
                  ],
                  "else_branch_elements": []
                }
              ]
            },
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "SYSTEM",
              "ctId": "MAIN",
              "message_template": "Exited main application loop.",
              "values": [],
              "file": "src/main.cpp",
              "line": 47,
              "function": "main::if_then"
            },
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "SYSTEM",
              "ctId": "MAIN",
              "message_template": "Simulating external diagnostic tool request (Level 2 fixed).",
              "values": [],
              "file": "src/main.cpp",
              "line": 49,
              "function": "main::if_then"
            },
            {
              "type": "CALL",
              "caller": "main::if_then",
              "callee": "Automotive::Controllers::VehicleController::triggerDiagnosticSequence",
              "file": "src/main.cpp",
              "line": 50
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "SYSTEM",
              "ctId": "MAIN",
              "message_template": "System not ready for main loop. Check initialization logs (simulated state).",
              "values": [],
              "file": "src/main.cpp",
              "line": 52,
              "function": "main::if_else"
            }
          ]
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "SYSTEM",
          "ctId": "MAIN",
          "message_template": "Initiating system shutdown sequence...",
          "values": [],
          "file": "src/main.cpp",
          "line": 55,
          "function": "main"
        },
        {
          "type": "CALL",
          "caller": "main",
          "callee": "Automotive::Controllers::VehicleController::shutdownSystem",
          "file": "src/main.cpp",
          "line": 56
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "SYSTEM",
          "ctId": "MAIN",
          "message_template": "System shutdown sequence finished by VehicleController.",
          "values": [],
          "file": "src/main.cpp",
          "line": 57,
          "function": "main"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "SYSTEM",
          "ctId": "BOOT",
          "message_template": "Dummy Automotive Application FINISHED. Exiting main.",
          "values": [],
          "file": "src/main.cpp",
          "line": 59,
          "function": "main"
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 7,
      "line_end": 14,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ECM",
          "ctId": "INIT",
          "message_template": "EngineControlModule constructor. State: Not Initialized. Default Type: 0, RPM: 0, Coolant: 25.0C.",
          "values": [],
          "file": "src/EngineControlModule.cpp",
          "line": 13,
          "function": "Automotive::ECUs::EngineControlModule"
        }
      ]
    },
    "Automotive::ECUs::~EngineControlModule": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 16,
      "line_end": 31,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "was_init",
          "line": 20,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "id_in_function": "if_1",
              "condition_expression": "rpm_high",
              "line": 21,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "ECM",
                  "ctId": "SHTDWN",
                  "message_template": "EngineControlModule destructor. Was Initialized. RPM at exit >100 (Simulated).",
                  "values": [],
                  "file": "src/EngineControlModule.cpp",
                  "line": 22,
                  "function": "Automotive::ECUs::~EngineControlModule::if_then::if_then"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "id_in_function": "if_2",
              "condition_expression": "! rpm_high",
              "line": 24,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "ECM",
                  "ctId": "SHTDWN",
                  "message_template": "EngineControlModule destructor. Was Initialized. RPM at exit <=100 (Simulated).",
                  "values": [],
                  "file": "src/EngineControlModule.cpp",
                  "line": 25,
                  "function": "Automotive::ECUs::~EngineControlModule::if_then::if_then"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! was_init",
          "line": 28,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "SHTDWN",
              "message_template": "EngineControlModule destructor. Not initialized at exit.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 29,
              "function": "Automotive::ECUs::~EngineControlModule::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::initialize": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 33,
      "line_end": 83,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "engineTypeCode == 0",
          "line": 37,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "INIT",
              "message_template": "Initializing Engine Systems for Petrol (Type 0).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 38,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            },
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "CONF",
              "message_template": "Configuring Petrol. Setting idle RPM to 800.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 39,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::EngineControlModule::initialize::if_then",
              "callee": "Automotive::ECUs::EngineControlModule::setTargetIdleRPM",
              "file": "src/EngineControlModule.cpp",
              "line": 40
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! typeConfigured && engineTypeCode == 1",
          "line": 44,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "INIT",
              "message_template": "Initializing Engine Systems for Diesel (Type 1).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 45,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            },
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "CONF",
              "message_template": "Configuring Diesel. Setting idle RPM to 750.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 46,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::EngineControlModule::initialize::if_then",
              "callee": "Automotive::ECUs::EngineControlModule::setTargetIdleRPM",
              "file": "src/EngineControlModule.cpp",
              "line": 47
            },
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ECM",
              "ctId": "FUEL",
              "message_template": "Diesel fuel pressure sensor: low initial reading (0.5 bar). Priming.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 48,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! typeConfigured && engineTypeCode == 2",
          "line": 52,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "INIT",
              "message_template": "Initializing Engine Systems for Electric (Type 2).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 53,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            },
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "CONF",
              "message_template": "Configuring Electric. Setting idle RPM to 0 (standby).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 54,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::EngineControlModule::initialize::if_then",
              "callee": "Automotive::ECUs::EngineControlModule::setTargetIdleRPM",
              "file": "src/EngineControlModule.cpp",
              "line": 55
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! typeConfigured",
          "line": 59,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "ECM",
              "ctId": "CONF",
              "message_template": "Invalid Engine Type Code received: %d. Supported: 0, 1, 2.",
              "values": [
                "engineTypeCode"
              ],
              "file": "src/EngineControlModule.cpp",
              "line": 60,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ECM",
          "ctId": "INIT",
          "message_template": "Fuel pump status check: OK.",
          "values": [],
          "file": "src/EngineControlModule.cpp",
          "line": 65,
          "function": "Automotive::ECUs::EngineControlModule::initialize"
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ECM",
          "ctId": "INIT",
          "message_template": "Ignition system integrity check: PASS.",
          "values": [],
          "file": "src/EngineControlModule.cpp",
          "line": 66,
          "function": "Automotive::ECUs::EngineControlModule::initialize"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "m_engineType == 0",
          "line": 71,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "INIT",
              "message_template": "Engine Systems Initialized Successfully. Type: Petrol (0).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 72,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_5",
          "condition_expression": "! log_init_done && m_engineType == 1",
          "line": 75,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "INIT",
              "message_template": "Engine Systems Initialized Successfully. Type: Diesel (1). Example val: 0.75.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 76,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_6",
          "condition_expression": "! log_init_done && m_engineType == 2",
          "line": 79,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "INIT",
              "message_template": "Engine Systems Initialized Successfully. Type: Electric (2).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 80,
              "function": "Automotive::ECUs::EngineControlModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::processEngineData": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 85,
      "line_end": 131,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized",
          "line": 86,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ECM",
              "ctId": "PROC",
              "message_template": "ProcessEngineData: Module not initialized. Skipping.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 87,
              "function": "Automotive::ECUs::EngineControlModule::processEngineData::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "m_engineType == 0",
          "line": 93,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ECM",
              "ctId": "PROC",
              "message_template": "Processing Petrol engine data. Sim-RPM: 1500, Sim-Coolant: 85.5C.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 94,
              "function": "Automotive::ECUs::EngineControlModule::processEngineData::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! engine_data_processed_log && m_engineType == 1",
          "line": 99,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ECM",
              "ctId": "PROC",
              "message_template": "Processing Diesel engine data. Sim-RPM: 1200, Sim-Coolant: 90.1C.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 100,
              "function": "Automotive::ECUs::EngineControlModule::processEngineData::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! engine_data_processed_log && m_engineType == 2",
          "line": 105,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ECM",
              "ctId": "PROC",
              "message_template": "Processing Electric motor data. Sim-Power: 25kW, Sim-BattTemp: 35.2C.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 106,
              "function": "Automotive::ECUs::EngineControlModule::processEngineData::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::EngineControlModule::processEngineData",
          "callee": "Automotive::ECUs::EngineControlModule::checkSensors",
          "file": "src/EngineControlModule.cpp",
          "line": 109
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "m_engineType != 2 && m_coolantTemperature > 105.0f",
          "line": 113,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "ECM",
              "ctId": "SENSOR",
              "message_template": "CRITICAL: Engine overheating! Coolant Temp: 107.2C. Max Temp: 105.0C.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 114,
              "function": "Automotive::ECUs::EngineControlModule::processEngineData::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::EngineControlModule::processEngineData::if_then",
              "callee": "Automotive::ECUs::EngineControlModule::manageFuelInjection",
              "file": "src/EngineControlModule.cpp",
              "line": 115
            },
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ECM",
              "ctId": "FUEL",
              "message_template": "Overheat protection: Fuel injection DISABLED.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 116,
              "function": "Automotive::ECUs::EngineControlModule::processEngineData::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_5",
          "condition_expression": "! temp_condition_logged && m_engineType != 2 && m_coolantTemperature > 95.0f",
          "line": 119,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ECM",
              "ctId": "SENSOR",
              "message_template": "Engine temperature high: 98.5C. Normal Max: 95.0C.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 120,
              "function": "Automotive::ECUs::EngineControlModule::processEngineData::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_6",
          "condition_expression": "m_engineType == 0 && m_currentRPM > 6500",
          "line": 123,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "FATAL",
              "apId": "ECM",
              "ctId": "SENSOR",
              "message_template": "FATAL: Engine over-rev! RPM: 7200. Max RPM: 6500.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 124,
              "function": "Automotive::ECUs::EngineControlModule::processEngineData::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::EngineControlModule::processEngineData::if_then",
              "callee": "Automotive::ECUs::EngineControlModule::controlIgnition",
              "file": "src/EngineControlModule.cpp",
              "line": 125
            },
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "ECM",
              "ctId": "IGNIT",
              "message_template": "Over-rev protection: Ignition system DISABLED.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 126,
              "function": "Automotive::ECUs::EngineControlModule::processEngineData::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::EngineControlModule::processEngineData",
          "callee": "Automotive::ECUs::EngineControlModule::updateActuators",
          "file": "src/EngineControlModule.cpp",
          "line": 129
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ECM",
          "ctId": "PROC",
          "message_template": "Finished processing engine data. Cycle time: 10 ms (simulated).",
          "values": [],
          "file": "src/EngineControlModule.cpp",
          "line": 130,
          "function": "Automotive::ECUs::EngineControlModule::processEngineData"
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::runDiagnostics": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 133,
      "line_end": 185,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized && level_param > 0",
          "line": 134,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "ECM",
              "ctId": "DIAG",
              "message_template": "Cannot run detailed diagnostics (Level %d req), module not init.",
              "values": [
                "level_param"
              ],
              "file": "src/EngineControlModule.cpp",
              "line": 135,
              "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "level_param == 0",
          "line": 142,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "DIAG",
              "message_template": "Running basic diagnostics (L0). Status: PASS.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 143,
              "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! level_processed && level_param == 1",
          "line": 147,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "DIAG",
              "message_template": "Running sensor integrity check (L1).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 148,
              "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then"
            },
            {
              "type": "IF_STMT",
              "id_in_function": "if_3",
              "condition_expression": "m_coolantTemperature < 15.0f",
              "line": 149,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARN",
                  "apId": "ECM",
                  "ctId": "DIAG",
                  "message_template": "Diag L1: Coolant temp sensor low (12.5C). Normal if engine cold.",
                  "values": [],
                  "file": "src/EngineControlModule.cpp",
                  "line": 150,
                  "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "ECM",
                  "ctId": "DIAG",
                  "message_template": "Diag L1: Coolant temp sensor normal (28.0C).",
                  "values": [],
                  "file": "src/EngineControlModule.cpp",
                  "line": 152,
                  "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then::if_else"
                }
              ]
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "! level_processed && level_param >= 2",
          "line": 157,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "id_in_function": "if_5",
              "condition_expression": "level_param == 2",
              "line": 158,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "ECM",
                  "ctId": "DIAG",
                  "message_template": "Running actuator response test (L2).",
                  "values": [],
                  "file": "src/EngineControlModule.cpp",
                  "line": 159,
                  "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "ECM",
                  "ctId": "DIAG",
                  "message_template": "Running actuator response test (L%d, extended).",
                  "values": [
                    "level_param"
                  ],
                  "file": "src/EngineControlModule.cpp",
                  "line": 161,
                  "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then::if_else"
                }
              ]
            },
            {
              "type": "IF_STMT",
              "id_in_function": "if_6",
              "condition_expression": "m_engineType == 1",
              "line": 165,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "apId": "ECM",
                  "ctId": "DIAG",
                  "message_template": "Diag L2+: Glow plug actuator (Diesel) FAILED. Timeout: 500ms.",
                  "values": [],
                  "file": "src/EngineControlModule.cpp",
                  "line": 166,
                  "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "id_in_function": "if_7",
              "condition_expression": "! actuator_test_done && m_engineType == 0",
              "line": 170,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "ECM",
                  "ctId": "DIAG",
                  "message_template": "Diag L2+: Spark plug test (Petrol) PASS. Response: 5ms.",
                  "values": [],
                  "file": "src/EngineControlModule.cpp",
                  "line": 171,
                  "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": []
            },
            {
              "type": "IF_STMT",
              "id_in_function": "if_8",
              "condition_expression": "! actuator_test_done && m_engineType == 2",
              "line": 174,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "ECM",
                  "ctId": "DIAG",
                  "message_template": "Diag L2+: Motor controller test (Electric) PASS. Response: 2ms.",
                  "values": [],
                  "file": "src/EngineControlModule.cpp",
                  "line": 175,
                  "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_9",
          "condition_expression": "overall_success",
          "line": 179,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "DIAG",
              "message_template": "Diagnostics for Level %d completed: PASS.",
              "values": [
                "level_param"
              ],
              "file": "src/EngineControlModule.cpp",
              "line": 180,
              "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ECM",
              "ctId": "DIAG",
              "message_template": "Diagnostics for Level %d completed: ISSUES FOUND.",
              "values": [
                "level_param"
              ],
              "file": "src/EngineControlModule.cpp",
              "line": 182,
              "function": "Automotive::ECUs::EngineControlModule::runDiagnostics::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::requestEngineShutdown": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 187,
      "line_end": 198,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ECM",
          "ctId": "SHTDWN",
          "message_template": "Engine shutdown sequence requested.",
          "values": [],
          "file": "src/EngineControlModule.cpp",
          "line": 188,
          "function": "Automotive::ECUs::EngineControlModule::requestEngineShutdown"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized",
          "line": 189,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "ECM",
              "ctId": "SHTDWN",
              "message_template": "Shutdown requested, but engine not running/initialized.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 190,
              "function": "Automotive::ECUs::EngineControlModule::requestEngineShutdown::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::EngineControlModule::requestEngineShutdown",
          "callee": "Automotive::ECUs::EngineControlModule::manageFuelInjection",
          "file": "src/EngineControlModule.cpp",
          "line": 193
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::EngineControlModule::requestEngineShutdown",
          "callee": "Automotive::ECUs::EngineControlModule::controlIgnition",
          "file": "src/EngineControlModule.cpp",
          "line": 194
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ECM",
          "ctId": "SHTDWN",
          "message_template": "Engine shutdown sequence completed. Final RPM: 0.",
          "values": [],
          "file": "src/EngineControlModule.cpp",
          "line": 197,
          "function": "Automotive::ECUs::EngineControlModule::requestEngineShutdown"
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::setTargetIdleRPM": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 200,
      "line_end": 217,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "rpm == 800",
          "line": 202,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ECM",
              "ctId": "CONF",
              "message_template": "Setting target idle RPM to 800 (Petrol default).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 203,
              "function": "Automotive::ECUs::EngineControlModule::setTargetIdleRPM::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! rpm_set_logged && rpm == 750",
          "line": 206,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ECM",
              "ctId": "CONF",
              "message_template": "Setting target idle RPM to 750 (Diesel default).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 207,
              "function": "Automotive::ECUs::EngineControlModule::setTargetIdleRPM::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! rpm_set_logged && rpm == 0",
          "line": 210,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ECM",
              "ctId": "CONF",
              "message_template": "Setting target idle RPM to 0 (Electric standby).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 211,
              "function": "Automotive::ECUs::EngineControlModule::setTargetIdleRPM::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! rpm_set_logged",
          "line": 214,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ECM",
              "ctId": "CONF",
              "message_template": "Setting target idle RPM to custom value: %d.",
              "values": [
                "rpm"
              ],
              "file": "src/EngineControlModule.cpp",
              "line": 215,
              "function": "Automotive::ECUs::EngineControlModule::setTargetIdleRPM::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::manageFuelInjection": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 219,
      "line_end": 229,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_engineType == 2",
          "line": 220,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ECM",
              "ctId": "FUEL",
              "message_template": "Fuel injection N/A for electric motor (Type 2).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 221,
              "function": "Automotive::ECUs::EngineControlModule::manageFuelInjection::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "enable",
          "line": 224,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "FUEL",
              "message_template": "Enabling fuel injection. System: Common Rail.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 225,
              "function": "Automotive::ECUs::EngineControlModule::manageFuelInjection::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "FUEL",
              "message_template": "Disabling fuel injection. Reason: Shutdown/Overheat.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 227,
              "function": "Automotive::ECUs::EngineControlModule::manageFuelInjection::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::controlIgnition": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 231,
      "line_end": 241,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_engineType == 2",
          "line": 232,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "ECM",
              "ctId": "IGNIT",
              "message_template": "Ignition control N/A for electric motor (Type 2).",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 233,
              "function": "Automotive::ECUs::EngineControlModule::controlIgnition::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "enable",
          "line": 236,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "IGNIT",
              "message_template": "Enabling ignition system. Type: Coil-on-Plug.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 237,
              "function": "Automotive::ECUs::EngineControlModule::controlIgnition::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "IGNIT",
              "message_template": "Disabling ignition system. Reason: Shutdown/Over-rev.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 239,
              "function": "Automotive::ECUs::EngineControlModule::controlIgnition::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::getCurrentRPM": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 243,
      "line_end": 245,
      "execution_elements_structured": []
    },
    "Automotive::ECUs::EngineControlModule::checkSensors": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 247,
      "line_end": 249,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ECM",
          "ctId": "SENSOR",
          "message_template": "Checking engine sensors. SimValues: O2=0.85V (Rich), MAF=15.2g/s (Nominal), Coolant=88.1C (Normal).",
          "values": [],
          "file": "src/EngineControlModule.cpp",
          "line": 248,
          "function": "Automotive::ECUs::EngineControlModule::checkSensors"
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::updateActuators": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 251,
      "line_end": 258,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "ECM",
          "ctId": "PROC",
          "message_template": "Updating engine actuators. SimActions: Throttle=15pct (Actual 14.8pct).",
          "values": [],
          "file": "src/EngineControlModule.cpp",
          "line": 252,
          "function": "Automotive::ECUs::EngineControlModule::updateActuators"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_coolantTemperature > 90.0f",
          "line": 253,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "PROC",
              "message_template": "Cooling fan command: ON (High Speed L2). SimCoolant: 96.0C.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 254,
              "function": "Automotive::ECUs::EngineControlModule::updateActuators::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "ECM",
              "ctId": "PROC",
              "message_template": "Cooling fan command: OFF. SimCoolant: 85.0C.",
              "values": [],
              "file": "src/EngineControlModule.cpp",
              "line": 256,
              "function": "Automotive::ECUs::EngineControlModule::updateActuators::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::EngineControlModule::someFunctionWithSwitch": {
      "file": "src/EngineControlModule.cpp",
      "line_start": 259,
      "line_end": 275,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ECM",
          "ctId": "PROC",
          "message_template": "Entering someFunctionWithSwitch with mode: %d.",
          "values": [
            "mode_param"
          ],
          "file": "src/EngineControlModule.cpp",
          "line": 260,
          "function": "Automotive::ECUs::EngineControlModule::someFunctionWithSwitch"
        },
        {
          "type": "SWITCH_STMT",
          "id_in_function": "switch_0",
          "line": 261,
          "body_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "ECM",
          "ctId": "PROC",
          "message_template": "Exiting someFunctionWithSwitch.",
          "values": [],
          "file": "src/EngineControlModule.cpp",
          "line": 274,
          "function": "Automotive::ECUs::EngineControlModule::someFunctionWithSwitch"
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 8,
      "line_end": 15,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "TCU",
          "ctId": "INIT",
          "message_template": "TransmissionControlModule constructor. State: Not Initialized. Type: Manual, Gear: N, OilTemp: 30.0C.",
          "values": [],
          "file": "src/TransmissionControlModule.cpp",
          "line": 14,
          "function": "Automotive::ECUs::TransmissionControlModule"
        }
      ]
    },
    "Automotive::ECUs::~TransmissionControlModule": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 17,
      "line_end": 23,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_isInitialized",
          "line": 18,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "SHTDWN",
              "message_template": "TransmissionControlModule destructor. Was Initialized. Final Gear: N (0 sim).",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 19,
              "function": "Automotive::ECUs::~TransmissionControlModule::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "SHTDWN",
              "message_template": "TransmissionControlModule destructor. Was NOT initialized.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 21,
              "function": "Automotive::ECUs::~TransmissionControlModule::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::initialize": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 25,
      "line_end": 52,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "transmissionTypeCode_param == 0",
          "line": 29,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "INIT",
              "message_template": "Initializing Transmission Systems. Type: Manual (0).",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 30,
              "function": "Automotive::ECUs::TransmissionControlModule::initialize::if_then"
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "TCU",
              "ctId": "CONF",
              "message_template": "Manual transmission selected. Clutch monitoring enabled.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 31,
              "function": "Automotive::ECUs::TransmissionControlModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "! typeSet && transmissionTypeCode_param == 1",
          "line": 35,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "INIT",
              "message_template": "Initializing Transmission Systems. Type: Automatic (1).",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 36,
              "function": "Automotive::ECUs::TransmissionControlModule::initialize::if_then"
            },
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "TCU",
              "ctId": "CONF",
              "message_template": "Automatic transmission. Hydraulic pressure check: Nominal (15.0 bar sim).",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 37,
              "function": "Automotive::ECUs::TransmissionControlModule::initialize::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::TransmissionControlModule::initialize::if_then",
              "callee": "Automotive::ECUs::TransmissionControlModule::monitorHydraulicPressure",
              "file": "src/TransmissionControlModule.cpp",
              "line": 38
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! typeSet",
          "line": 42,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "TCU",
              "ctId": "CONF",
              "message_template": "Invalid Transmission Type Code: %d. Supported: 0 (Man), 1 (Auto).",
              "values": [
                "transmissionTypeCode_param"
              ],
              "file": "src/TransmissionControlModule.cpp",
              "line": 43,
              "function": "Automotive::ECUs::TransmissionControlModule::initialize::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "TCU",
          "ctId": "INIT",
          "message_template": "Transmission Systems Initialized. Current Gear: Neutral (0).",
          "values": [],
          "file": "src/TransmissionControlModule.cpp",
          "line": 50,
          "function": "Automotive::ECUs::TransmissionControlModule::initialize"
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 54,
      "line_end": 88,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized",
          "line": 55,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "TCU",
              "ctId": "PROC",
              "message_template": "ProcessTransmissionRequests: Module not initialized. Skipping.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 56,
              "function": "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "m_transmissionType == 1",
          "line": 61,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "TCU",
              "ctId": "PROC",
              "message_template": "Automatic: Processing shift logic. Sim-RPM: 2200, Sim-Speed: 60km/h.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 62,
              "function": "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests::if_then"
            },
            {
              "type": "IF_STMT",
              "id_in_function": "if_2",
              "condition_expression": "m_selectedGear == 3",
              "line": 65,
              "then_branch_elements": [
                {
                  "type": "CALL",
                  "caller": "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests::if_then::if_then",
                  "callee": "Automotive::ECUs::TransmissionControlModule::shiftGearUp",
                  "file": "src/TransmissionControlModule.cpp",
                  "line": 66
                }
              ],
              "else_branch_elements": []
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_3",
          "condition_expression": "! type_processed_log && m_transmissionType == 0",
          "line": 72,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "TCU",
              "ctId": "PROC",
              "message_template": "Manual: Awaiting gear shift. Clutch pos: 90pct (Engaged sim).",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 73,
              "function": "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "m_oilTemperature > 120.0f",
          "line": 78,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "TCU",
              "ctId": "HYDRAU",
              "message_template": "CRITICAL: Transmission oil OVERHEATING! Temp: 122.5C. Max: 120.0C.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 79,
              "function": "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests::if_then"
            },
            {
              "type": "CALL",
              "caller": "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests::if_then",
              "callee": "Automotive::ECUs::TransmissionControlModule::requestSafeState",
              "file": "src/TransmissionControlModule.cpp",
              "line": 80
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_5",
          "condition_expression": "! oil_temp_logged && m_oilTemperature > 100.0f",
          "line": 83,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "TCU",
              "ctId": "HYDRAU",
              "message_template": "Transmission oil temperature HIGH: 105.0C. Recommended Max: 100.0C.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 84,
              "function": "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "TCU",
          "ctId": "PROC",
          "message_template": "Finished processing transmission requests for this cycle.",
          "values": [],
          "file": "src/TransmissionControlModule.cpp",
          "line": 87,
          "function": "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests"
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::runDiagnostics": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 90,
      "line_end": 135,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized && level_param > 0",
          "line": 91,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "ERROR",
              "apId": "TCU",
              "ctId": "DIAG",
              "message_template": "Cannot run TCU diagnostics (Level %d req), module not init.",
              "values": [
                "level_param"
              ],
              "file": "src/TransmissionControlModule.cpp",
              "line": 92,
              "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "level_param == 0",
          "line": 98,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "DIAG",
              "message_template": "Running basic TCU diagnostics (L0). Solenoid check: PASS.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 99,
              "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_2",
          "condition_expression": "! level_checked && level_param == 1",
          "line": 103,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "DIAG",
              "message_template": "Running TCU sensor checks (L1).",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 104,
              "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then"
            },
            {
              "type": "IF_STMT",
              "id_in_function": "if_3",
              "condition_expression": "m_oilTemperature < 20.0f",
              "line": 105,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "WARN",
                  "apId": "TCU",
                  "ctId": "DIAG",
                  "message_template": "Diag L1: Oil temp sensor low (18.5C). Normal if cold.",
                  "values": [],
                  "file": "src/TransmissionControlModule.cpp",
                  "line": 106,
                  "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "TCU",
                  "ctId": "DIAG",
                  "message_template": "Diag L1: Oil temp sensor nominal (45.0C).",
                  "values": [],
                  "file": "src/TransmissionControlModule.cpp",
                  "line": 108,
                  "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then::if_else"
                }
              ]
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_4",
          "condition_expression": "! level_checked && level_param >= 2",
          "line": 113,
          "then_branch_elements": [
            {
              "type": "IF_STMT",
              "id_in_function": "if_5",
              "condition_expression": "level_param == 2",
              "line": 114,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "TCU",
                  "ctId": "DIAG",
                  "message_template": "Running TCU actuator tests (L2).",
                  "values": [],
                  "file": "src/TransmissionControlModule.cpp",
                  "line": 115,
                  "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "TCU",
                  "ctId": "DIAG",
                  "message_template": "Running TCU actuator tests (L%d, extended).",
                  "values": [
                    "level_param"
                  ],
                  "file": "src/TransmissionControlModule.cpp",
                  "line": 117,
                  "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then::if_else"
                }
              ]
            },
            {
              "type": "IF_STMT",
              "id_in_function": "if_6",
              "condition_expression": "m_transmissionType == 1",
              "line": 120,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "DEBUG",
                  "apId": "TCU",
                  "ctId": "DIAG",
                  "message_template": "Testing shift solenoid 'A'. Resp time: 12ms (OK).",
                  "values": [],
                  "file": "src/TransmissionControlModule.cpp",
                  "line": 121,
                  "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then::if_then"
                },
                {
                  "type": "LOG",
                  "level": "ERROR",
                  "apId": "TCU",
                  "ctId": "DIAG",
                  "message_template": "Shift solenoid 'B' FAILED. Code: 0xAB12. Current: 0.0A.",
                  "values": [],
                  "file": "src/TransmissionControlModule.cpp",
                  "line": 122,
                  "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then::if_then"
                }
              ],
              "else_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "TCU",
                  "ctId": "DIAG",
                  "message_template": "Manual transmission diag (L2+): Clutch sensor calib check: PASS.",
                  "values": [],
                  "file": "src/TransmissionControlModule.cpp",
                  "line": 125,
                  "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then::if_else"
                }
              ]
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_7",
          "condition_expression": "success",
          "line": 129,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "DIAG",
              "message_template": "TCU Diagnostics (L%d) completed: PASS.",
              "values": [
                "level_param"
              ],
              "file": "src/TransmissionControlModule.cpp",
              "line": 130,
              "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "TCU",
              "ctId": "DIAG",
              "message_template": "TCU Diagnostics (L%d) completed: ISSUES FOUND.",
              "values": [
                "level_param"
              ],
              "file": "src/TransmissionControlModule.cpp",
              "line": 132,
              "function": "Automotive::ECUs::TransmissionControlModule::runDiagnostics::if_else"
            }
          ]
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::requestSafeState": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 137,
      "line_end": 142,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "WARN",
          "apId": "TCU",
          "ctId": "STATE",
          "message_template": "Transmission safe state requested. Forcing Neutral.",
          "values": [],
          "file": "src/TransmissionControlModule.cpp",
          "line": 138,
          "function": "Automotive::ECUs::TransmissionControlModule::requestSafeState"
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "TCU",
          "ctId": "STATE",
          "message_template": "Transmission now in Neutral (Safe State). SimOilTemp: %.1fC.",
          "values": [
            "m_oilTemperature"
          ],
          "file": "src/TransmissionControlModule.cpp",
          "line": 141,
          "function": "Automotive::ECUs::TransmissionControlModule::requestSafeState"
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::shiftGearUp": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 144,
      "line_end": 157,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized || m_transmissionType == 0",
          "line": 145,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "TCU",
              "ctId": "GEAR",
              "message_template": "ShiftGearUp ignored. Reason: Not Auto or Not Initialized.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 146,
              "function": "Automotive::ECUs::TransmissionControlModule::shiftGearUp::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "m_selectedGear < 6",
          "line": 149,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "GEAR",
              "message_template": "Shifted UP. New gear: %d.",
              "values": [
                "m_selectedGear"
              ],
              "file": "src/TransmissionControlModule.cpp",
              "line": 152,
              "function": "Automotive::ECUs::TransmissionControlModule::shiftGearUp::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "GEAR",
              "message_template": "Already in highest gear (6). Shift up ignored.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 154,
              "function": "Automotive::ECUs::TransmissionControlModule::shiftGearUp::if_else"
            }
          ]
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::TransmissionControlModule::shiftGearUp",
          "callee": "Automotive::ECUs::TransmissionControlModule::controlSolenoids",
          "file": "src/TransmissionControlModule.cpp",
          "line": 156
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::shiftGearDown": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 159,
      "line_end": 171,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized || m_transmissionType == 0",
          "line": 160,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "TCU",
              "ctId": "GEAR",
              "message_template": "ShiftGearDown ignored. Reason: Not Auto or Not Initialized.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 161,
              "function": "Automotive::ECUs::TransmissionControlModule::shiftGearDown::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_1",
          "condition_expression": "m_selectedGear > 0",
          "line": 164,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "GEAR",
              "message_template": "Shifted DOWN. New gear: %d.",
              "values": [
                "m_selectedGear"
              ],
              "file": "src/TransmissionControlModule.cpp",
              "line": 166,
              "function": "Automotive::ECUs::TransmissionControlModule::shiftGearDown::if_then"
            }
          ],
          "else_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "GEAR",
              "message_template": "Already in lowest gear/Neutral. Shift down ignored.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 168,
              "function": "Automotive::ECUs::TransmissionControlModule::shiftGearDown::if_else"
            }
          ]
        },
        {
          "type": "CALL",
          "caller": "Automotive::ECUs::TransmissionControlModule::shiftGearDown",
          "callee": "Automotive::ECUs::TransmissionControlModule::controlSolenoids",
          "file": "src/TransmissionControlModule.cpp",
          "line": 170
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::engagePark": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 173,
      "line_end": 180,
      "execution_elements_structured": [
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "! m_isInitialized || m_transmissionType == 0",
          "line": 174,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "WARN",
              "apId": "TCU",
              "ctId": "GEAR",
              "message_template": "EngagePark ignored. Reason: Not Auto or Not Initialized.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 175,
              "function": "Automotive::ECUs::TransmissionControlModule::engagePark::if_then"
            }
          ],
          "else_branch_elements": []
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "TCU",
          "ctId": "GEAR",
          "message_template": "Park engaged. Mechanical lock: SECURED.",
          "values": [],
          "file": "src/TransmissionControlModule.cpp",
          "line": 179,
          "function": "Automotive::ECUs::TransmissionControlModule::engagePark"
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::getCurrentGear": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 182,
      "line_end": 184,
      "execution_elements_structured": []
    },
    "Automotive::ECUs::TransmissionControlModule::monitorHydraulicPressure": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 186,
      "line_end": 191,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "TCU",
          "ctId": "HYDRAU",
          "message_template": "Monitoring hydraulic pressure. Main: 14.8 bar, Clutch: 12.1 bar (Sim).",
          "values": [],
          "file": "src/TransmissionControlModule.cpp",
          "line": 187,
          "function": "Automotive::ECUs::TransmissionControlModule::monitorHydraulicPressure"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_oilTemperature < 35.0f",
          "line": 188,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "INFO",
              "apId": "TCU",
              "ctId": "HYDRAU",
              "message_template": "Hydraulic pressure low due to cold oil (10.5 bar sim). Warming up.",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 189,
              "function": "Automotive::ECUs::TransmissionControlModule::monitorHydraulicPressure::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::controlSolenoids": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 193,
      "line_end": 203,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "DEBUG",
          "apId": "TCU",
          "ctId": "GEAR",
          "message_template": "Controlling shift solenoids for gear: %d.",
          "values": [
            "m_selectedGear"
          ],
          "file": "src/TransmissionControlModule.cpp",
          "line": 195,
          "function": "Automotive::ECUs::TransmissionControlModule::controlSolenoids"
        },
        {
          "type": "IF_STMT",
          "id_in_function": "if_0",
          "condition_expression": "m_selectedGear == 1",
          "line": 198,
          "then_branch_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "TCU",
              "ctId": "GEAR",
              "message_template": "Solenoid A: ON, Solenoid B: OFF (For Gear 1).",
              "values": [],
              "file": "src/TransmissionControlModule.cpp",
              "line": 199,
              "function": "Automotive::ECUs::TransmissionControlModule::controlSolenoids::if_then"
            }
          ],
          "else_branch_elements": []
        }
      ]
    },
    "Automotive::ECUs::TransmissionControlModule::testDoWhileLoop": {
      "file": "src/TransmissionControlModule.cpp",
      "line_start": 205,
      "line_end": 217,
      "execution_elements_structured": [
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "TCU",
          "ctId": "PROC",
          "message_template": "Starting testDoWhileLoop.",
          "values": [],
          "file": "src/TransmissionControlModule.cpp",
          "line": 207,
          "function": "Automotive::ECUs::TransmissionControlModule::testDoWhileLoop"
        },
        {
          "type": "DO_WHILE_LOOP",
          "id_in_function": "loop_0",
          "loop_condition": "counter < 3",
          "line": 208,
          "body_elements": [
            {
              "type": "LOG",
              "level": "DEBUG",
              "apId": "TCU",
              "ctId": "PROC",
              "message_template": "Do-while iteration: %d.",
              "values": [
                "counter"
              ],
              "file": "src/TransmissionControlModule.cpp",
              "line": 210,
              "function": "Automotive::ECUs::TransmissionControlModule::testDoWhileLoop::dowhile_body"
            },
            {
              "type": "IF_STMT",
              "id_in_function": "if_0",
              "condition_expression": "counter == 1",
              "line": 212,
              "then_branch_elements": [
                {
                  "type": "LOG",
                  "level": "INFO",
                  "apId": "TCU",
                  "ctId": "PROC",
                  "message_template": "Counter is 1 in do-while (fixed message).",
                  "values": [],
                  "file": "src/TransmissionControlModule.cpp",
                  "line": 213,
                  "function": "Automotive::ECUs::TransmissionControlModule::testDoWhileLoop::dowhile_body::if_then"
                }
              ],
              "else_branch_elements": []
            }
          ]
        },
        {
          "type": "LOG",
          "level": "INFO",
          "apId": "TCU",
          "ctId": "PROC",
          "message_template": "Finished testDoWhileLoop.",
          "values": [],
          "file": "src/TransmissionControlModule.cpp",
          "line": 216,
          "function": "Automotive::ECUs::TransmissionControlModule::testDoWhileLoop"
        }
      ]
    }
  },
  "call_graph": {
    "Automotive::ECUs::InfotainmentModule::initialize": [
      "std::__cxx11::basic_string::operator=",
      "Automotive::ECUs::InfotainmentModule::checkMediaSources"
    ],
    "Automotive::ECUs::InfotainmentModule::initialize::if_then": [
      "std::__cxx11::basic_string::operator="
    ],
    "Automotive::ECUs::InfotainmentModule::processUserInput::if_then": [
      "Automotive::ECUs::InfotainmentModule::setVolumeLevel"
    ],
    "Automotive::ECUs::InfotainmentModule::processUserInput": [
      "Automotive::ECUs::InfotainmentModule::updateDisplayContent"
    ],
    "Automotive::ECUs::InfotainmentModule::playAudioTrack::if_then": [
      "std::__cxx11::basic_string::operator="
    ],
    "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds::if_then": [
      "Automotive::ECUs::BrakingSystemModule::applyAntiLockBraking",
      "Automotive::ECUs::BrakingSystemModule::manageStabilityControl"
    ],
    "Automotive::ECUs::BrakingSystemModule::activateEmergencyBraking::if_then": [
      "Automotive::ECUs::BrakingSystemModule::controlBrakePressure"
    ],
    "Automotive::Controllers::VehicleController::initializeSystem": [
      "Automotive::Controllers::VehicleController::performPowerOnSelfTest",
      "Automotive::Controllers::VehicleController::communicateNetworkStatus"
    ],
    "Automotive::Controllers::VehicleController::shutdownSystem": [
      "Automotive::ECUs::InfotainmentModule::shutdownDisplay",
      "Automotive::ECUs::EngineControlModule::requestEngineShutdown"
    ],
    "Automotive::Controllers::VehicleController::triggerDiagnosticSequence": [
      "Automotive::ECUs::EngineControlModule::runDiagnostics",
      "Automotive::ECUs::TransmissionControlModule::runDiagnostics",
      "Automotive::ECUs::BrakingSystemModule::runDiagnostics",
      "Automotive::ECUs::BodyControlModule::runDiagnostics",
      "Automotive::ECUs::InfotainmentModule::runDiagnostics"
    ],
    "Automotive::Controllers::VehicleController::runMainVehicleLoop": [
      "Automotive::ECUs::EngineControlModule::processEngineData",
      "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests",
      "Automotive::ECUs::BrakingSystemModule::monitorWheelSpeeds",
      "Automotive::ECUs::BodyControlModule::processComfortRequests",
      "Automotive::ECUs::InfotainmentModule::processUserInput",
      "Automotive::Controllers::VehicleController::manageVehicleState",
      "Automotive::ECUs::EngineControlModule::someFunctionWithSwitch",
      "Automotive::ECUs::TransmissionControlModule::testDoWhileLoop"
    ],
    "Automotive::Controllers::VehicleController::runMainVehicleLoop::if_then": [
      "Automotive::ECUs::BodyControlModule::setHeadlightsState"
    ],
    "Automotive::ECUs::BodyControlModule::initialize": [
      "Automotive::ECUs::BodyControlModule::readLightSensorValue"
    ],
    "Automotive::ECUs::BodyControlModule::processComfortRequests::if_then": [
      "Automotive::ECUs::BodyControlModule::setHeadlightsState",
      "Automotive::ECUs::BodyControlModule::manageCentralLocking"
    ],
    "Automotive::ECUs::BodyControlModule::processComfortRequests": [
      "Automotive::ECUs::BodyControlModule::checkDoorStatus"
    ],
    "main": [
      "Automotive::Controllers::VehicleController::initializeSystem",
      "Automotive::Controllers::VehicleController::shutdownSystem"
    ],
    "main::if_then::loop_body": [
      "Automotive::Controllers::VehicleController::runMainVehicleLoop"
    ],
    "main::if_then": [
      "Automotive::Controllers::VehicleController::triggerDiagnosticSequence"
    ],
    "Automotive::ECUs::EngineControlModule::initialize::if_then": [
      "Automotive::ECUs::EngineControlModule::setTargetIdleRPM"
    ],
    "Automotive::ECUs::EngineControlModule::processEngineData": [
      "Automotive::ECUs::EngineControlModule::checkSensors",
      "Automotive::ECUs::EngineControlModule::updateActuators"
    ],
    "Automotive::ECUs::EngineControlModule::processEngineData::if_then": [
      "Automotive::ECUs::EngineControlModule::manageFuelInjection",
      "Automotive::ECUs::EngineControlModule::controlIgnition"
    ],
    "Automotive::ECUs::EngineControlModule::requestEngineShutdown": [
      "Automotive::ECUs::EngineControlModule::manageFuelInjection",
      "Automotive::ECUs::EngineControlModule::controlIgnition"
    ],
    "Automotive::ECUs::TransmissionControlModule::initialize::if_then": [
      "Automotive::ECUs::TransmissionControlModule::monitorHydraulicPressure"
    ],
    "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests::if_then::if_then": [
      "Automotive::ECUs::TransmissionControlModule::shiftGearUp"
    ],
    "Automotive::ECUs::TransmissionControlModule::processTransmissionRequests::if_then": [
      "Automotive::ECUs::TransmissionControlModule::requestSafeState"
    ],
    "Automotive::ECUs::TransmissionControlModule::shiftGearUp": [
      "Automotive::ECUs::TransmissionControlModule::controlSolenoids"
    ],
    "Automotive::ECUs::TransmissionControlModule::shiftGearDown": [
      "Automotive::ECUs::TransmissionControlModule::controlSolenoids"
    ]
  }
}