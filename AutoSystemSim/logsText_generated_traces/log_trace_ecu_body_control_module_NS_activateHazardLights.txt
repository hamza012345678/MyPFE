Trace de Séquence de Logs pour Point d'Entrée: ecu_body_control_module::activateHazardLights
================================================================================
>> ENTRÉE DANS POINT PRINCIPAL: ecu_body_control_module::activateHazardLights (lighting_control.cpp:145)
  L146: INFO: LightingControl: Hazard lights requested to <activate ? "ACTIVATE" : "DEACTIVATE">.
  L147: IF (is_hazard_active_ == activate) {
    L148: DEBUG: LightingControl: Hazard lights already in requested state (<activate ? "ACTIVE" : "INACTIVE">).
  } 
  L153: IF (activate) {
    L155: IF (is_left_indicator_active_) {
      L156: -> APPEL: ecu_body_control_module::setSpecificLight
        L66: IF (!bulb) {
          L67: ERROR: LightingControl: Cannot set state for unknown LightType <static_cast<int>(type)>.
        } 
        L71: IF (bulb->status == LightStatus::FAULTY_BULB || bulb->status == LightStatus::FAULTY_CIRCUIT) {
          L72: WARNING: LightingControl: Cannot turn <on ? "ON" : "OFF"> LightType <static_cast<int>(type)>. It's faulty (Status: <static_cast<int>(status)>).
        } 
        L78: IF (bulb->status == new_status) {
          L79: DEBUG: LightingControl: LightType <on ? "ON" : "OFF"> already <static_cast<int>(type)>.
        } 
        L84: IF (on && (type == LightType::HEADLIGHT_LOW || type == LightType::HEADLIGHT_HIGH || type == LightType::FOG_LIGHT_FRONT)) {
          L85: IF (power_monitor_ && !power_monitor_->isPowerStable()) {
            L86: WARNING: LightingControl: Power system unstable. Deferring turning ON LightType <static_cast<int>(type)>.
            L88: IF (power_monitor_->getBatteryVoltage() < 10.0) {
              L89: ERROR: LightingControl: CRITICAL: Battery too low (<static_cast<int>(type)>V) to activate LightType <getBatteryVoltage>.
            } 
          } 
        } 
        L96: INFO: LightingControl: LightType <on ? "ON" : "OFF"> turned <static_cast<int>(type)>.
        L99: IF (type == LightType::HEADLIGHT_HIGH && on) {
          L101: IF (low_beam && low_beam->status == LightStatus::OFF) {
            L102: DEBUG: LightingControl: High beams activated, ensuring low beams are also ON.
            L103: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
          } 
        } 
        L107: IF (type == LightType::HEADLIGHT_LOW && !on) {
          L109: IF (high_beam && high_beam->status == LightStatus::ON) {
            L110: INFO: LightingControl: Low beams turned OFF while high beams were ON. Turning OFF high beams for safety.
            L111: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
          } 
        } 
      L156: <- RETOUR DE: ecu_body_control_module::setSpecificLight
    } 
    L159: IF (is_right_indicator_active_) {
      L160: -> APPEL: ecu_body_control_module::setSpecificLight
        L66: IF (!bulb) {
          L67: ERROR: LightingControl: Cannot set state for unknown LightType <static_cast<int>(type)>.
        } 
        L71: IF (bulb->status == LightStatus::FAULTY_BULB || bulb->status == LightStatus::FAULTY_CIRCUIT) {
          L72: WARNING: LightingControl: Cannot turn <on ? "ON" : "OFF"> LightType <static_cast<int>(type)>. It's faulty (Status: <static_cast<int>(status)>).
        } 
        L78: IF (bulb->status == new_status) {
          L79: DEBUG: LightingControl: LightType <on ? "ON" : "OFF"> already <static_cast<int>(type)>.
        } 
        L84: IF (on && (type == LightType::HEADLIGHT_LOW || type == LightType::HEADLIGHT_HIGH || type == LightType::FOG_LIGHT_FRONT)) {
          L85: IF (power_monitor_ && !power_monitor_->isPowerStable()) {
            L86: WARNING: LightingControl: Power system unstable. Deferring turning ON LightType <static_cast<int>(type)>.
            L88: IF (power_monitor_->getBatteryVoltage() < 10.0) {
              L89: ERROR: LightingControl: CRITICAL: Battery too low (<static_cast<int>(type)>V) to activate LightType <getBatteryVoltage>.
            } 
          } 
        } 
        L96: INFO: LightingControl: LightType <on ? "ON" : "OFF"> turned <static_cast<int>(type)>.
        L99: IF (type == LightType::HEADLIGHT_HIGH && on) {
          L101: IF (low_beam && low_beam->status == LightStatus::OFF) {
            L102: DEBUG: LightingControl: High beams activated, ensuring low beams are also ON.
            L103: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
          } 
        } 
        L107: IF (type == LightType::HEADLIGHT_LOW && !on) {
          L109: IF (high_beam && high_beam->status == LightStatus::ON) {
            L110: INFO: LightingControl: Low beams turned OFF while high beams were ON. Turning OFF high beams for safety.
            L111: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
          } 
        } 
      L160: <- RETOUR DE: ecu_body_control_module::setSpecificLight
    } 
    L164: INFO: LightingControl: Activating hazard sequence (both indicators ON).
    L165: -> APPEL: ecu_body_control_module::setSpecificLight
      L66: IF (!bulb) {
        L67: ERROR: LightingControl: Cannot set state for unknown LightType <static_cast<int>(type)>.
      } 
      L71: IF (bulb->status == LightStatus::FAULTY_BULB || bulb->status == LightStatus::FAULTY_CIRCUIT) {
        L72: WARNING: LightingControl: Cannot turn <on ? "ON" : "OFF"> LightType <static_cast<int>(type)>. It's faulty (Status: <static_cast<int>(status)>).
      } 
      L78: IF (bulb->status == new_status) {
        L79: DEBUG: LightingControl: LightType <on ? "ON" : "OFF"> already <static_cast<int>(type)>.
      } 
      L84: IF (on && (type == LightType::HEADLIGHT_LOW || type == LightType::HEADLIGHT_HIGH || type == LightType::FOG_LIGHT_FRONT)) {
        L85: IF (power_monitor_ && !power_monitor_->isPowerStable()) {
          L86: WARNING: LightingControl: Power system unstable. Deferring turning ON LightType <static_cast<int>(type)>.
          L88: IF (power_monitor_->getBatteryVoltage() < 10.0) {
            L89: ERROR: LightingControl: CRITICAL: Battery too low (<static_cast<int>(type)>V) to activate LightType <getBatteryVoltage>.
          } 
        } 
      } 
      L96: INFO: LightingControl: LightType <on ? "ON" : "OFF"> turned <static_cast<int>(type)>.
      L99: IF (type == LightType::HEADLIGHT_HIGH && on) {
        L101: IF (low_beam && low_beam->status == LightStatus::OFF) {
          L102: DEBUG: LightingControl: High beams activated, ensuring low beams are also ON.
          L103: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
        } 
      } 
      L107: IF (type == LightType::HEADLIGHT_LOW && !on) {
        L109: IF (high_beam && high_beam->status == LightStatus::ON) {
          L110: INFO: LightingControl: Low beams turned OFF while high beams were ON. Turning OFF high beams for safety.
          L111: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
        } 
      } 
    L165: <- RETOUR DE: ecu_body_control_module::setSpecificLight
    L166: -> APPEL: ecu_body_control_module::setSpecificLight
      L66: IF (!bulb) {
        L67: ERROR: LightingControl: Cannot set state for unknown LightType <static_cast<int>(type)>.
      } 
      L71: IF (bulb->status == LightStatus::FAULTY_BULB || bulb->status == LightStatus::FAULTY_CIRCUIT) {
        L72: WARNING: LightingControl: Cannot turn <on ? "ON" : "OFF"> LightType <static_cast<int>(type)>. It's faulty (Status: <static_cast<int>(status)>).
      } 
      L78: IF (bulb->status == new_status) {
        L79: DEBUG: LightingControl: LightType <on ? "ON" : "OFF"> already <static_cast<int>(type)>.
      } 
      L84: IF (on && (type == LightType::HEADLIGHT_LOW || type == LightType::HEADLIGHT_HIGH || type == LightType::FOG_LIGHT_FRONT)) {
        L85: IF (power_monitor_ && !power_monitor_->isPowerStable()) {
          L86: WARNING: LightingControl: Power system unstable. Deferring turning ON LightType <static_cast<int>(type)>.
          L88: IF (power_monitor_->getBatteryVoltage() < 10.0) {
            L89: ERROR: LightingControl: CRITICAL: Battery too low (<static_cast<int>(type)>V) to activate LightType <getBatteryVoltage>.
          } 
        } 
      } 
      L96: INFO: LightingControl: LightType <on ? "ON" : "OFF"> turned <static_cast<int>(type)>.
      L99: IF (type == LightType::HEADLIGHT_HIGH && on) {
        L101: IF (low_beam && low_beam->status == LightStatus::OFF) {
          L102: DEBUG: LightingControl: High beams activated, ensuring low beams are also ON.
          L103: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
        } 
      } 
      L107: IF (type == LightType::HEADLIGHT_LOW && !on) {
        L109: IF (high_beam && high_beam->status == LightStatus::ON) {
          L110: INFO: LightingControl: Low beams turned OFF while high beams were ON. Turning OFF high beams for safety.
          L111: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
        } 
      } 
    L166: <- RETOUR DE: ecu_body_control_module::setSpecificLight
  } 
  ELSE {
    L169: INFO: LightingControl: Deactivating hazard sequence (both indicators OFF).
    L170: -> APPEL: ecu_body_control_module::setSpecificLight
      L66: IF (!bulb) {
        L67: ERROR: LightingControl: Cannot set state for unknown LightType <static_cast<int>(type)>.
      } 
      L71: IF (bulb->status == LightStatus::FAULTY_BULB || bulb->status == LightStatus::FAULTY_CIRCUIT) {
        L72: WARNING: LightingControl: Cannot turn <on ? "ON" : "OFF"> LightType <static_cast<int>(type)>. It's faulty (Status: <static_cast<int>(status)>).
      } 
      L78: IF (bulb->status == new_status) {
        L79: DEBUG: LightingControl: LightType <on ? "ON" : "OFF"> already <static_cast<int>(type)>.
      } 
      L84: IF (on && (type == LightType::HEADLIGHT_LOW || type == LightType::HEADLIGHT_HIGH || type == LightType::FOG_LIGHT_FRONT)) {
        L85: IF (power_monitor_ && !power_monitor_->isPowerStable()) {
          L86: WARNING: LightingControl: Power system unstable. Deferring turning ON LightType <static_cast<int>(type)>.
          L88: IF (power_monitor_->getBatteryVoltage() < 10.0) {
            L89: ERROR: LightingControl: CRITICAL: Battery too low (<static_cast<int>(type)>V) to activate LightType <getBatteryVoltage>.
          } 
        } 
      } 
      L96: INFO: LightingControl: LightType <on ? "ON" : "OFF"> turned <static_cast<int>(type)>.
      L99: IF (type == LightType::HEADLIGHT_HIGH && on) {
        L101: IF (low_beam && low_beam->status == LightStatus::OFF) {
          L102: DEBUG: LightingControl: High beams activated, ensuring low beams are also ON.
          L103: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
        } 
      } 
      L107: IF (type == LightType::HEADLIGHT_LOW && !on) {
        L109: IF (high_beam && high_beam->status == LightStatus::ON) {
          L110: INFO: LightingControl: Low beams turned OFF while high beams were ON. Turning OFF high beams for safety.
          L111: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
        } 
      } 
    L170: <- RETOUR DE: ecu_body_control_module::setSpecificLight
    L171: -> APPEL: ecu_body_control_module::setSpecificLight
      L66: IF (!bulb) {
        L67: ERROR: LightingControl: Cannot set state for unknown LightType <static_cast<int>(type)>.
      } 
      L71: IF (bulb->status == LightStatus::FAULTY_BULB || bulb->status == LightStatus::FAULTY_CIRCUIT) {
        L72: WARNING: LightingControl: Cannot turn <on ? "ON" : "OFF"> LightType <static_cast<int>(type)>. It's faulty (Status: <static_cast<int>(status)>).
      } 
      L78: IF (bulb->status == new_status) {
        L79: DEBUG: LightingControl: LightType <on ? "ON" : "OFF"> already <static_cast<int>(type)>.
      } 
      L84: IF (on && (type == LightType::HEADLIGHT_LOW || type == LightType::HEADLIGHT_HIGH || type == LightType::FOG_LIGHT_FRONT)) {
        L85: IF (power_monitor_ && !power_monitor_->isPowerStable()) {
          L86: WARNING: LightingControl: Power system unstable. Deferring turning ON LightType <static_cast<int>(type)>.
          L88: IF (power_monitor_->getBatteryVoltage() < 10.0) {
            L89: ERROR: LightingControl: CRITICAL: Battery too low (<static_cast<int>(type)>V) to activate LightType <getBatteryVoltage>.
          } 
        } 
      } 
      L96: INFO: LightingControl: LightType <on ? "ON" : "OFF"> turned <static_cast<int>(type)>.
      L99: IF (type == LightType::HEADLIGHT_HIGH && on) {
        L101: IF (low_beam && low_beam->status == LightStatus::OFF) {
          L102: DEBUG: LightingControl: High beams activated, ensuring low beams are also ON.
          L103: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
        } 
      } 
      L107: IF (type == LightType::HEADLIGHT_LOW && !on) {
        L109: IF (high_beam && high_beam->status == LightStatus::ON) {
          L110: INFO: LightingControl: Low beams turned OFF while high beams were ON. Turning OFF high beams for safety.
          L111: -> APPEL RÉCURSIF SAUTÉ vers ecu_body_control_module::setSpecificLight
        } 
      } 
    L171: <- RETOUR DE: ecu_body_control_module::setSpecificLight
  } 
<< SORTIE DE POINT PRINCIPAL: ecu_body_control_module::activateHazardLights
